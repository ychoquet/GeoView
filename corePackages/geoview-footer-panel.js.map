{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-footer-panel/src/details-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/legend-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/data-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\r\nimport { ReactElement } from 'react';\r\n\r\nimport {\r\n  TypeWindow,\r\n  payloadIsAMapSingleClick,\r\n  markerDefinitionPayload,\r\n  payloadIsAllQueriesDone,\r\n  TypeArrayOfLayerData,\r\n  getLocalizedValue,\r\n  Coordinate,\r\n} from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n}\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the details component\r\n *\r\n * @returns {JSX.Element} created details component\r\n */\r\nexport function DetailsItem({ mapId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react } = cgpv;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [list, setList] = useState<ReactElement>();\r\n  const [lngLat, setLngLat] = useState<Coordinate>([]);\r\n  const [handlerName, setHandlerName] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // create the listener to return the details\r\n    api.event.on(\r\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\r\n      (payload) => {\r\n        if (payloadIsAllQueriesDone(payload)) {\r\n          const { resultSets } = payload;\r\n          const newDetails: TypeArrayOfLayerData = [];\r\n          Object.keys(resultSets).forEach((layerPath) => {\r\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\r\n            const features = resultSets[layerPath]!;\r\n            if (features.length > 0) {\r\n              newDetails.push({ layerPath, layerName, features });\r\n            }\r\n          });\r\n          if (newDetails.length > 0) {\r\n            setDetails(newDetails);\r\n          } else {\r\n            setDetails([]);\r\n          }\r\n        } else {\r\n          setDetails([]);\r\n        }\r\n      },\r\n      `${mapId}/${mapId}-DetailsAPI`\r\n    );\r\n    api.event.on(\r\n      api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK,\r\n      (payload) => {\r\n        if (payloadIsAMapSingleClick(payload)) {\r\n          const { coordinates } = payload;\r\n          setHandlerName(payload.handlerName);\r\n          setLngLat(coordinates.lnglat);\r\n          api.event.emit(\r\n            markerDefinitionPayload(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_SHOW, payload.handlerName, coordinates.lnglat)\r\n          );\r\n        } else {\r\n          setLngLat([]);\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n    return () => {\r\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\r\n      api.event.off(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setList(api.map(mapId).details.createDetails(mapId, details, { mapId, location: lngLat, handlerName }));\r\n    setTimeout(() => {\r\n      api.event.emit(markerDefinitionPayload(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_SHOW, handlerName, lngLat));\r\n    }, 1800);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [details, lngLat]);\r\n\r\n  return <div>{list}</div>;\r\n}\r\n","/* eslint-disable react/require-default-props */\r\nimport { DetailedReactHTMLElement } from 'react';\r\nimport { TypeWindow, payloadIsALayerConfig, payloadIsRemoveGeoViewLayer } from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n}\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the legend component\r\n *\r\n * @returns {JSX.Element} created legend component\r\n */\r\nexport function LegendItem({ mapId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react } = cgpv;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [legend, setLegend] = useState<DetailedReactHTMLElement<{}, HTMLElement>>();\r\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\r\n\r\n  const addLayer = (addGeoviewLayerId: string) => {\r\n    if (Object.keys(api.map(mapId).layer.geoviewLayers).includes(addGeoviewLayerId)) {\r\n      setMapLayers((orderedLayers) => [addGeoviewLayerId, ...orderedLayers]);\r\n    } else {\r\n      // eslint-disable-next-line no-console\r\n      console.error('geoviewLayerId is not in the layers list');\r\n    }\r\n  };\r\n\r\n  const removeLayer = (removeGeoviewLayerId: string) => {\r\n    setMapLayers((orderedLayers) => orderedLayers.filter((layerId) => layerId !== removeGeoviewLayerId));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMapLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\r\n      (payload) => {\r\n        if (payloadIsRemoveGeoViewLayer(payload)) {\r\n          removeLayer(payload.geoviewLayer.geoviewLayerId);\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_ADD_LAYER,\r\n      (payload) => {\r\n        if (payloadIsALayerConfig(payload)) {\r\n          api.event.on(\r\n            api.eventNames.LAYER.EVENT_LAYER_ADDED,\r\n            () => {\r\n              addLayer(payload.layerConfig.geoviewLayerId);\r\n              api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, `${mapId}/${payload.layerConfig.geoviewLayerId}`);\r\n            },\r\n            `${mapId}/${payload.layerConfig.geoviewLayerId}`\r\n          );\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n    return () => {\r\n      api.event.off(api.eventNames.LAYER.EVENT_ADD_LAYER, mapId);\r\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLegend(api.map(mapId).legend.createLegend({ layerIds: mapLayers, isRemoveable: false, canSetOpacity: true }));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [mapLayers]);\r\n\r\n  return <div>{legend}</div>;\r\n}\r\n","/* eslint-disable react/require-default-props */\r\nimport { TypeWindow, getLocalizedValue, TypeTabs } from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n}\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the data grid footer component\r\n *\r\n * @returns {JSX.Element} created data grid footer component\r\n */\r\nexport function DataItem({ mapId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, ui, react } = cgpv;\r\n  const { Tabs } = ui.elements;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [dataLayers, setDataLayers] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    setDataLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [api, mapId]);\r\n\r\n  setTimeout(() => {\r\n    dataLayers.forEach((layerId) => {\r\n      const layerSelection = document.getElementById(`${layerId}-groupLayerSelection`);\r\n      if (layerSelection) {\r\n        (layerSelection as HTMLSelectElement).addEventListener('change', function onChange(this) {\r\n          const { selectedIndex } = this;\r\n          const datagridTables = document.getElementsByClassName(`${layerId}-layer-datagrid-table`);\r\n          if (datagridTables.length > 0) {\r\n            for (let i = 0; i < datagridTables.length; i++) {\r\n              (datagridTables[i] as HTMLDivElement).setAttribute('style', `display:${i !== selectedIndex ? 'none' : 'block'}`);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }, 2000);\r\n  return (\r\n    <Tabs\r\n      tabsProps={{\r\n        variant: 'scrollable',\r\n      }}\r\n      tabs={dataLayers.map((layerId, index): TypeTabs => {\r\n        const geoviewLayerInstance = api.map(mapId).layer.geoviewLayers[layerId];\r\n        const labelValue = getLocalizedValue(geoviewLayerInstance.geoviewLayerName, mapId);\r\n        return {\r\n          value: index,\r\n          label: labelValue !== undefined ? labelValue : `data-${index}`,\r\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId }),\r\n        };\r\n      })}\r\n    />\r\n  );\r\n}\r\n","import {\r\n  Cast,\r\n  AbstractPlugin,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  AnySchemaObject,\r\n  payloadIsAllQueriesDone,\r\n  TypeArrayOfFeatureInfoEntries,\r\n} from 'geoview-core';\r\n\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-footer-panel.json';\r\nimport { DetailsItem } from './details-item';\r\nimport { LegendItem } from './legend-item';\r\nimport { DataItem } from './data-item';\r\n\r\nconst w = window as TypeWindow;\r\n\r\ntype CustomTabs = {\r\n  title: string;\r\n  contentHTML: string;\r\n};\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass FooterPanelPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the package schema\r\n   *\r\n   * @returns {AnySchemaObject} the package schema\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      legend: 'Legend',\r\n      details: 'Details',\r\n      dataGrid: 'Data',\r\n    },\r\n    fr: {\r\n      legend: 'Légende',\r\n      details: 'Détails',\r\n      dataGrid: 'Données',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { configObj, pluginProps } = this;\r\n\r\n    const { mapId } = pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api } = cgpv;\r\n      const { displayLanguage, footerTabs, map } = api.map(mapId);\r\n\r\n      const mapContainer = map.getTargetElement().parentElement;\r\n      // Set size of map container based on whether footer-panel is collapsed or not\r\n      if (mapContainer) {\r\n        if (configObj?.collapsed === false) {\r\n          mapContainer.style.height = 'calc( 100% - 300px )';\r\n        } else {\r\n          mapContainer.style.height = 'calc( 100% - 55px )';\r\n        }\r\n      }\r\n\r\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\r\n      let tabsCounter = 0;\r\n\r\n      if (defaultTabs.includes('legend')) {\r\n        // create new tab and add the LegendComponent to the footer tab\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: this.translations[displayLanguage].legend as string,\r\n          content: () => <LegendItem mapId={mapId} />,\r\n        });\r\n        tabsCounter++;\r\n      }\r\n\r\n      // create the listener to return the details\r\n      if (defaultTabs.includes('details')) {\r\n        // create new tab and add the DetailComponent to the footer tab\r\n        const detailsTabValue = tabsCounter;\r\n        footerTabs.createFooterTab({\r\n          value: detailsTabValue,\r\n          label: this.translations[displayLanguage].details as string,\r\n          content: () => <DetailsItem mapId={mapId} />,\r\n        });\r\n        tabsCounter++;\r\n        // select the details tab when map click queries are done\r\n        api.event.on(\r\n          api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\r\n          (payload) => {\r\n            if (payloadIsAllQueriesDone(payload)) {\r\n              const { resultSets } = payload;\r\n              let features: TypeArrayOfFeatureInfoEntries = [];\r\n              Object.keys(resultSets).forEach((layerPath) => {\r\n                features = features.concat(resultSets[layerPath]!);\r\n              });\r\n              if (features.length > 0) {\r\n                footerTabs.selectFooterTab(detailsTabValue);\r\n              }\r\n            }\r\n          },\r\n          `${mapId}/${mapId}-DetailsAPI`\r\n        );\r\n      }\r\n\r\n      if (defaultTabs.includes('data-grid')) {\r\n        /// create new tab and add the DataGridComponent to the footer tab\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: this.translations[displayLanguage].dataGrid as string,\r\n          content: () => <DataItem mapId={mapId} />,\r\n        });\r\n        tabsCounter++;\r\n      }\r\n\r\n      // TODO add custom detail reusable component when done\r\n\r\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\r\n      for (let i = 0; i < customTabs.length; i++) {\r\n        const tab = customTabs[i] as unknown as CustomTabs;\r\n\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: tab.title,\r\n          content: tab.contentHTML,\r\n        });\r\n        tabsCounter++;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    // const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      // const { api } = cgpv;\r\n      // TODO: Enable the footer tabs removal\r\n    }\r\n  }\r\n}\r\n\r\nexport default FooterPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\r\n"],"names":["w","window","DetailsItem","mapId","cgpv","api","react","useState","useEffect","details","setDetails","list","setList","lngLat","setLngLat","handlerName","setHandlerName","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","map","layer","registeredLayers","features","length","push","MAP","EVENT_MAP_SINGLE_CLICK","payloadIsAMapSingleClick","coordinates","lnglat","emit","markerDefinitionPayload","MARKER_ICON","EVENT_MARKER_ICON_SHOW","off","createDetails","location","setTimeout","LegendItem","legend","setLegend","mapLayers","setMapLayers","geoviewLayers","LAYER","EVENT_REMOVE_LAYER","removeGeoviewLayerId","payloadIsRemoveGeoViewLayer","geoviewLayer","geoviewLayerId","orderedLayers","filter","layerId","EVENT_ADD_LAYER","payloadIsALayerConfig","EVENT_LAYER_ADDED","addGeoviewLayerId","layerConfig","includes","console","error","createLegend","layerIds","isRemoveable","canSetOpacity","DataItem","ui","Tabs","elements","dataLayers","setDataLayers","layerSelection","document","getElementById","addEventListener","selectedIndex","this","datagridTables","getElementsByClassName","i","setAttribute","tabsProps","variant","tabs","index","geoviewLayerInstance","labelValue","geoviewLayerName","value","label","undefined","content","dataGrid","createDataGrid","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","fr","configObj","pluginProps","displayLanguage","footerTabs","mapContainer","getTargetElement","parentElement","collapsed","style","height","defaultTabs","tabsCounter","createFooterTab","translations","detailsTabValue","concat","selectFooterTab","customTabs","tab","title","contentHTML","buttonPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}