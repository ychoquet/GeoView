{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":";s+DAcA,IAAMA,EAAIC,OAUJC,EAAiB,oCAIrB,WAAYC,EAAkBC,GAA0B,MAE9B,OAF8B,eACtD,cAAMD,EAAUC,IAAO,4BAShB,kBAAuBC,CAAM,wCAOtB,kBAAsBC,EAAAA,EAAAA,KAAaC,EAAc,uCAKlDD,EAAAA,EAAAA,KAAa,CAC1BE,GAAI,CACFC,OAAQ,SACRC,QAAS,UACTC,SAAU,QAEZC,GAAI,CACFH,OAAQ,UACRC,QAAS,UACTC,SAAU,eAEZ,2BAKM,WACN,iBAAQE,EAAS,EAATA,UAEAC,EAFsB,EAAXC,YAEXD,MAGAE,EAAShB,EAATgB,KAER,GAAIA,EAAM,CAER,IAAQC,EAAQD,EAARC,IACAC,EAAoBD,EAAIE,IAAIL,GAA5BI,gBACAE,EAAeH,EAAIE,IAAIL,GAAvBM,WAEFC,EAAcR,aAAS,EAATA,EAAWS,KAAKD,YAChCE,EAAc,EAEdF,EAAYG,SAAS,YAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaV,GAAiBT,OAC1CoB,QAASZ,EAAIE,IAAIL,GAAOL,OAAOqB,iBAEjCP,KAGEF,EAAYG,SAAS,aAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaV,GAAiBR,QAC1CmB,QAAS,kBAAMZ,EAAIE,IAAIL,GAAOJ,QAAQqB,cAAc,CAAEC,QAAS,mBAAoB,IAErFT,KAGEF,EAAYG,SAAS,eAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaV,GAAiBP,SAC1CkB,QAAS,kBAAMZ,EAAIE,IAAIL,GAAOH,SAASsB,eAAe,CAAED,QAAS,mBAAoB,IAEvFT,KAMF,IADA,IAAMW,EAAarB,aAAS,EAATA,EAAWS,KAAKY,WAC1BC,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAK,CAC1C,IAAME,EAAMH,EAAWC,GAEvBf,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAOU,EAAIC,MACXT,QAASQ,EAAIE,cAEfhB,GACF,CACF,CACF,IAjGE,EAAKiB,YAAc,KAAK,CAC1B,CAwHC,OAtHD,+BAmGA,WACE,IAAQ1B,EAAU2B,KAAK1B,YAAfD,MAGAE,EAAShB,EAATgB,KAER,GAAIA,EAAM,CAER,IAAQC,EAAQD,EAARC,IAEJwB,KAAKD,cACPvB,EAAIE,IAAIL,GAAO4B,cAAcC,kBAAkBF,KAAKD,YAAYI,eAGhE3B,EAAIE,IAAIL,GAAO+B,QAAQC,SAAW,GAElC7B,EAAIE,IAAIL,GAAO+B,QAAQE,sBAE3B,CACF,KAAC,EA/HoB,CAASC,EAAAA,KAoIhChD,EAAEiD,QAAUjD,EAAEiD,SAAW,CAAC,EAC1BjD,EAAEiD,QAAQ,iBAAkBC,EAAAA,EAAAA,KAAqBhD,E","sources":["webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["import {\n  Cast,\n  AbstractPlugin,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypeJsonObject,\n  AnySchemaObject,\n} from 'geoview-core';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-footer-panel.json';\n\nconst w = window as TypeWindow;\n\ntype CustomTabs = {\n  title: string;\n  contentHTML: string;\n};\n\n/**\n * Create a class for the plugin instance\n */\nclass FooterPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      legend: 'Legend',\n      details: 'Details',\n      dataGrid: 'Data',\n    },\n    fr: {\n      legend: 'Légende',\n      details: 'Détails',\n      dataGrid: 'Données',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n      const { displayLanguage } = api.map(mapId);\n      const { footerTabs } = api.map(mapId);\n\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\n      let tabsCounter = 0;\n\n      if (defaultTabs.includes('legend')) {\n        // create new tab and add the LegendComponent to the footer tab\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].legend as string,\n          content: api.map(mapId).legend.createLegend(),\n        });\n        tabsCounter++;\n      }\n\n      if (defaultTabs.includes('details')) {\n        // the call to create data grid element return the element and the footer content is waiting for a function.\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].details as string,\n          content: () => api.map(mapId).details.createDetails({ layerId: 'esriFeatureLYR4' }),\n        });\n        tabsCounter++;\n      }\n\n      if (defaultTabs.includes('data-grid')) {\n        // the call to create data grid element return the element and the footer content is waiting for a function.\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].dataGrid as string,\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId: 'esriFeatureLYR4' }),\n        });\n        tabsCounter++;\n      }\n\n      // TODO add custom detail reusable component when done\n\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\n      for (let i = 0; i < customTabs.length; i++) {\n        const tab = customTabs[i] as unknown as CustomTabs;\n\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: tab.title,\n          content: tab.contentHTML,\n        });\n        tabsCounter++;\n      }\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n\n      if (this.buttonPanel) {\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n\n        // reset basemaps array\n        api.map(mapId).basemap.basemaps = [];\n        // reload default basemap\n        api.map(mapId).basemap.loadDefaultBasemaps();\n      }\n    }\n  }\n}\n\nexport default FooterPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\n"],"names":["w","window","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","legend","details","dataGrid","fr","configObj","mapId","pluginProps","cgpv","api","displayLanguage","map","footerTabs","defaultTabs","tabs","tabsCounter","includes","createFooterTab","value","label","translations","content","createLegend","createDetails","layerId","createDataGrid","customTabs","i","length","tab","title","contentHTML","buttonPanel","this","appBarButtons","removeAppbarPanel","buttonPanelId","basemap","basemaps","loadDefaultBasemaps","AbstractPlugin","plugins","Cast"],"sourceRoot":""}