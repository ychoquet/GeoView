{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":";s+DAcA,IAAMA,EAAIC,OAUJC,EAAiB,oCAIrB,WAAYC,EAAkBC,GAA0B,MAE9B,OAF8B,eACtD,cAAMD,EAAUC,IAAO,4BAShB,kBAAuBC,CAAM,wCAOtB,kBAAsBC,EAAAA,EAAAA,KAAaC,EAAc,uCAKlDD,EAAAA,EAAAA,KAAa,CAC1BE,GAAI,CACFC,OAAQ,SACRC,QAAS,SACTC,SAAU,QAEZC,GAAI,CACFH,OAAQ,UACRC,QAAS,SACTC,SAAU,eAEZ,2BAKM,WACN,iBAAQE,EAAS,EAATA,UAEAC,EAFsB,EAAXC,YAEXD,MAGAE,EAAShB,EAATgB,KAER,GAAIA,EAAM,CAER,IAAQC,EAAQD,EAARC,IACAC,EAAoBD,EAAIE,IAAIL,GAA5BI,gBACAE,EAAeH,EAAIE,IAAIL,GAAvBM,WAEFC,EAAcR,aAAS,EAATA,EAAWS,KAAKD,YAChCE,EAAc,EAEdF,EAAYG,SAAS,YAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaV,GAAiBT,OAC1CoB,QAASZ,EAAIE,IAAIL,GAAOL,OAAOqB,iBAEjCP,KAGEF,EAAYG,SAAS,eAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaV,GAAiBP,SAC1CkB,QAAS,kBAAMZ,EAAIE,IAAIL,GAAOH,SAASoB,eAAe,CAAEC,QAAS,mBAAoB,IAEvFT,KAMF,IADA,IAAMU,EAAapB,aAAS,EAATA,EAAWS,KAAKW,WAC1BC,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAK,CAC1C,IAAME,EAAMH,EAAWC,GAEvBd,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAOS,EAAIC,MACXR,QAASO,EAAIE,cAEff,GACF,CACF,CACF,IAvFE,EAAKgB,YAAc,KAAK,CAC1B,CA8GC,OA5GD,+BAyFA,WACE,IAAQzB,EAAU0B,KAAKzB,YAAfD,MAGAE,EAAShB,EAATgB,KAER,GAAIA,EAAM,CAER,IAAQC,EAAQD,EAARC,IAEJuB,KAAKD,cACPtB,EAAIE,IAAIL,GAAO2B,cAAcC,kBAAkBF,KAAKD,YAAYI,eAGhE1B,EAAIE,IAAIL,GAAO8B,QAAQC,SAAW,GAElC5B,EAAIE,IAAIL,GAAO8B,QAAQE,sBAE3B,CACF,KAAC,EArHoB,CAASC,EAAAA,KA0HhC/C,EAAEgD,QAAUhD,EAAEgD,SAAW,CAAC,EAC1BhD,EAAEgD,QAAQ,iBAAkBC,EAAAA,EAAAA,KAAqB/C,E","sources":["webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["import {\r\n  Cast,\r\n  AbstractPlugin,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\n\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-footer-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\ntype CustomTabs = {\r\n  title: string;\r\n  contentHTML: string;\r\n};\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass FooterPanelPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the package schema\r\n   *\r\n   * @returns {AnySchemaObject} the package schema\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      legend: 'Legend',\r\n      details: 'Detail',\r\n      dataGrid: 'Data',\r\n    },\r\n    fr: {\r\n      legend: 'Légende',\r\n      details: 'Détail',\r\n      dataGrid: 'Données',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { configObj, pluginProps } = this;\r\n\r\n    const { mapId } = pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api } = cgpv;\r\n      const { displayLanguage } = api.map(mapId);\r\n      const { footerTabs } = api.map(mapId);\r\n\r\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\r\n      let tabsCounter = 0;\r\n\r\n      if (defaultTabs.includes('legend')) {\r\n        // create new tab and add the LegendComponent to the footer tab\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: this.translations[displayLanguage].legend as string,\r\n          content: api.map(mapId).legend.createLegend(),\r\n        });\r\n        tabsCounter++;\r\n      }\r\n\r\n      if (defaultTabs.includes('data-grid')) {\r\n        // the call to create data grid element return the element and the footer content is waiting for a function.\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: this.translations[displayLanguage].dataGrid as string,\r\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId: 'esriFeatureLYR4' }),\r\n        });\r\n        tabsCounter++;\r\n      }\r\n\r\n      // TODO add custom detail reusable component when done\r\n\r\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\r\n      for (let i = 0; i < customTabs.length; i++) {\r\n        const tab = customTabs[i] as unknown as CustomTabs;\r\n\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: tab.title,\r\n          content: tab.contentHTML,\r\n        });\r\n        tabsCounter++;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api } = cgpv;\r\n\r\n      if (this.buttonPanel) {\r\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\r\n\r\n        // reset basemaps array\r\n        api.map(mapId).basemap.basemaps = [];\r\n        // reload default basemap\r\n        api.map(mapId).basemap.loadDefaultBasemaps();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default FooterPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\r\n"],"names":["w","window","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","legend","details","dataGrid","fr","configObj","mapId","pluginProps","cgpv","api","displayLanguage","map","footerTabs","defaultTabs","tabs","tabsCounter","includes","createFooterTab","value","label","translations","content","createLegend","createDataGrid","layerId","customTabs","i","length","tab","title","contentHTML","buttonPanel","this","appBarButtons","removeAppbarPanel","buttonPanelId","basemap","basemaps","loadDefaultBasemaps","AbstractPlugin","plugins","Cast"],"sourceRoot":""}