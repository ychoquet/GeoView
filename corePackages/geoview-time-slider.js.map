{"version":3,"file":"corePackages/geoview-time-slider.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/footer-plugin.ts","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@mui+material@5.15.13_@emotion+react@11.11.4_@emotion+styled@11.11.0_@types+react@18.2.66_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/NativeSelect/NativeSelect.js","webpack://geoview-core/../geoview-time-slider/src/time-slider-style.ts","webpack://geoview-core/../geoview-time-slider/src/time-slider.tsx","webpack://geoview-core/../geoview-time-slider/src/time-slider-panel.tsx","webpack://geoview-core/../geoview-time-slider/src/index.tsx"],"sourcesContent":["import { TypeTabs } from '@/ui/tabs/tabs';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { logger } from '@/core/utils/logger';\n\n/** ******************************************************************************************************************************\n * Footer Plugin abstract class.\n */\nexport abstract class FooterPlugin extends AbstractPlugin {\n  // Store index of tab\n  value?: number;\n\n  // Store the footer props\n  footerProps?: TypeTabs;\n\n  /**\n   * Overridable function to create footer props content\n   * @returns TypeTabs The footer props content\n   */\n  onCreateContentProps(): TypeTabs {\n    // Override this to create the footer props..\n\n    // Return dummy content\n    return {\n      id: 'some-id',\n      value: this.value!,\n      label: 'Some label',\n      content: `<div>Content for Footer plugin on map id ${this.pluginProps.mapId} goes here...</div>`,\n    };\n  }\n\n  /**\n   * Called when a footer plugin is being added\n   */\n  onAdd(): void {\n    // Log\n    // No need to log, parent class does it well already via added() function.\n\n    // Set value to length of tabs(?)\n    this.value = this.map()?.footerBarApi.tabs.length;\n\n    // Create props\n    this.footerProps = this.onCreateContentProps();\n\n    // Create tab with the props\n    this.map()?.footerBarApi.createTab(this.footerProps);\n  }\n\n  /**\n   * Called when a footer plugin is being removed\n   */\n  onRemove(): void {\n    // Log\n    // No need to log, parent class does it well already via removed() function.\n\n    // Remove the footer tab\n    if (this.value) this.map()?.footerBarApi.removeTab(this.footerProps!.id);\n  }\n\n  /**\n   * Called when a footer plugin has been selected in the tabs\n   */\n  onSelected(): void {\n    // Log\n    logger.logTraceCore('FOOTER-PLUGIN - onSelected');\n\n    // TODO: Refactor - Move 'onSelected' in AbstractPlugin class so that AppBar can eventually benefit as well?\n\n    // Nothing else here.. but inherited FooterPlugins might override this method to do stuff when they are selected!\n  }\n}\n","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n  _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n  const {\n      className,\n      children,\n      classes: classesProp = {},\n      IconComponent = ArrowDropDownIcon,\n      input = defaultInput,\n      inputProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n  const classes = useUtilityClasses(ownerState);\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, _extends({\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: _extends({\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined\n      }, inputProps, input ? input.props.inputProps : {}),\n      ref\n    }, other, {\n      className: clsx(classes.root, input.props.className, className)\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;","import { Theme } from '@mui/material/styles';\n\nexport const getSxClasses = (theme: Theme) => ({\n  panelHeaders: {\n    fontSize: theme.palette.geoViewFontSize.lg,\n    fontWeight: '600',\n    marginBottom: '20px',\n  },\n  rightPanelContainer: {\n    border: `2px solid ${theme.palette.primary.main}`,\n    borderRadius: '5px',\n    backgroundColor: theme.palette.common.white,\n  },\n  rightPanelBtnHolder: {\n    marginTop: '20px',\n    marginBottom: '9px',\n    boxShadow: '0px 12px 9px -13px #E0E0E0',\n  },\n  timeSliderInstructionsTitle: {\n    fontSize: theme.palette.geoViewFontSize.lg,\n    fontWeight: '600',\n    lineHeight: '1.5em',\n  },\n  timeSliderInstructionsBody: {\n    fontSize: '1rem',\n  },\n});\n","import { useTheme } from '@mui/material/styles';\nimport { FormControl, InputLabel, NativeSelect } from '@mui/material';\nimport { useTimeSliderLayers, useTimeSliderStoreActions } from 'geoview-core/src/core/stores';\nimport { getLocalizedMessage, getLocalizedValue } from 'geoview-core/src/core/utils/utilities';\nimport { getSxClasses } from './time-slider-style';\nimport { ConfigProps } from './time-slider-types';\n\ninterface TimeSliderPanelProps {\n  config: ConfigProps;\n  mapId: string;\n  layerPath: string;\n}\n\n/**\n * Creates a panel with time sliders\n *\n * @param {TimeSliderPanelProps} TimeSliderPanelProps time slider panel properties\n * @returns {JSX.Element} the slider panel\n */\nexport function TimeSlider(TimeSliderPanelProps: TimeSliderPanelProps) {\n  const { cgpv } = window;\n  const { config, layerPath, mapId } = TimeSliderPanelProps;\n  const { react, ui } = cgpv;\n  const { useState, useRef, useEffect } = react;\n  const {\n    Grid,\n    Slider,\n    Typography,\n    Checkbox,\n    Tooltip,\n    IconButton,\n    LockIcon,\n    LockOpenIcon,\n    ArrowLeftIcon,\n    PlayArrowIcon,\n    PauseIcon,\n    ArrowRightIcon,\n    SwitchRightIcon,\n    SwitchLeftIcon,\n  } = ui.elements;\n\n  const theme = useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const playIntervalRef = useRef<number>();\n\n  // References for play button\n  const sliderValueRef = useRef<number>();\n  const sliderDeltaRef = useRef<number>();\n\n  // Get actions and states from store\n  // TODO: evaluate best option to set value by layer path.... trough a getter?\n  const { setTitle, setDefaultValue, setDescription, setValues, setLocked, setReversed, setDelay, setFiltering } =\n    useTimeSliderStoreActions();\n\n  // TODO: check performance as we should technically have one selector by constant\n  const {\n    title,\n    description,\n    name,\n    defaultValue,\n    range,\n    minAndMax,\n    field,\n    fieldAlias,\n    filtering,\n    singleHandle,\n    values,\n    delay,\n    locked,\n    reversed,\n  } = useTimeSliderLayers()[layerPath];\n\n  // slider config\n  useEffect(() => {\n    // TODO: add mechanism to initialize these values during store onInitialize\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (title === undefined) setTitle(layerPath, getLocalizedValue(sliderConfig?.title, mapId) || '');\n    if (description === undefined) setDescription(layerPath, getLocalizedValue(sliderConfig?.description, mapId) || '');\n    if (locked === undefined) setLocked(layerPath, sliderConfig?.locked !== undefined ? sliderConfig?.locked : false);\n    if (reversed === undefined) setReversed(layerPath, sliderConfig?.reversed !== undefined ? sliderConfig?.reversed : false);\n    if (defaultValue === undefined) setDefaultValue(layerPath, sliderConfig?.defaultValue || '');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\n    if (sliderConfig?.defaultValue) {\n      // update values based on slider's default value\n      const defaultValueIsArray = Array.isArray(sliderConfig?.defaultValue);\n      if (defaultValueIsArray) {\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue[0]).getTime(), new Date(sliderConfig?.defaultValue[1]).getTime()]);\n      } else if (range.includes(sliderConfig?.defaultValue)) {\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue).getTime()]);\n      } else {\n        setValues(layerPath, [new Date(range[0]).getTime()]);\n      }\n    }\n  }, [config, layerPath, range, setFiltering, setValues]);\n\n  const timeStampRange = range.map((entry: string | number | Date) => new Date(entry).getTime());\n  // Check if range occurs in a single day or year\n  const timeDelta = minAndMax[1] - minAndMax[0];\n  const dayDelta = new Date(minAndMax[1]).getDate() - new Date(minAndMax[0]).getDate();\n  const yearDelta = new Date(minAndMax[1]).getFullYear() - new Date(minAndMax[0]).getFullYear();\n  let timeframe: string | undefined;\n  if (dayDelta === 0 && timeDelta < 86400000) timeframe = 'day';\n  else if (yearDelta === 0) timeframe = 'year';\n\n  let timeMarks: number[] = [];\n  if (range.length < 6 || singleHandle) timeMarks = timeStampRange;\n  else {\n    timeMarks = [\n      minAndMax[0],\n      new Date(range[Math.round(range.length / 4)]).getTime(),\n      new Date(range[Math.round(range.length / 2)]).getTime(),\n      new Date(range[Math.round((3 * range.length) / 4)]).getTime(),\n      minAndMax[1],\n    ];\n  }\n\n  const sliderMarks = [];\n  for (let i = 0; i < timeMarks.length; i++) {\n    sliderMarks.push({\n      value: timeMarks[i],\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n      label: timeframe\n        ? `${timeframe === 'day' ? new Date(timeMarks[i]).toTimeString().split(' ')[0] : new Date(timeMarks[i]).toISOString().slice(5, 10)}`\n        : new Date(timeMarks[i]).toISOString().slice(0, 10),\n    });\n  }\n\n  /**\n   * Create labels for values on slider\n   *\n   * @param {number} value The value of the slider handle\n   * @returns {string} A formatted time string or ISO date string\n   */\n  function valueLabelFormat(value: number): string {\n    // If timeframe is a single day, use time. If it is a single year, drop year from dates.\n    if (timeframe === 'day') return new Date(value).toTimeString().split(' ')[0].replace(/^0/, '');\n    if (timeframe === 'year') return new Date(value).toISOString().slice(5, 10);\n    return new Date(value).toISOString().slice(0, 10);\n  }\n\n  /**\n   * Moves the slider handle(s) back one increment\n   */\n  function moveBack(): void {\n    if (singleHandle) {\n      const currentIndex = timeStampRange.indexOf(values[0]);\n      let newIndex: number;\n      if (timeStampRange[currentIndex] === minAndMax[0]) newIndex = timeStampRange.length - 1;\n      else newIndex = currentIndex - 1;\n      setValues(layerPath, [timeStampRange[newIndex]]);\n    } else {\n      let [leftHandle, rightHandle] = values;\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\n      if (!sliderDeltaRef.current) {\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\n          setValues(layerPath, [rightHandle - sliderDeltaRef.current, rightHandle]);\n          return;\n        }\n        sliderDeltaRef.current = rightHandle - leftHandle;\n      }\n      // Check for edge cases and then set new slider values\n      if (locked && reversed) {\n        if (leftHandle === minAndMax[0]) leftHandle = rightHandle;\n        leftHandle -= sliderDeltaRef.current;\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\n      } else if (locked) {\n        rightHandle -= sliderDeltaRef.current!;\n        if (rightHandle < leftHandle) rightHandle = leftHandle;\n        if (rightHandle === leftHandle) [, rightHandle] = minAndMax;\n      } else {\n        if (rightHandle > sliderValueRef.current! && leftHandle === sliderValueRef.current) rightHandle = sliderValueRef.current;\n        else rightHandle -= sliderDeltaRef.current!;\n        if (rightHandle <= minAndMax[0]) [, rightHandle] = minAndMax;\n        leftHandle = rightHandle - sliderDeltaRef.current!;\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\n        if (leftHandle < sliderValueRef.current! && rightHandle > sliderValueRef.current!) leftHandle = sliderValueRef.current as number;\n      }\n      setValues(layerPath, [leftHandle, rightHandle]);\n    }\n  }\n\n  /**\n   * Moves the slider handle(s) forward one increment\n   */\n  function moveForward(): void {\n    if (singleHandle) {\n      const currentIndex = timeStampRange.indexOf(values[0]);\n      let newIndex: number;\n      if (timeStampRange[currentIndex] === minAndMax[1]) newIndex = 0;\n      else newIndex = currentIndex + 1;\n      setValues(layerPath, [timeStampRange[newIndex]]);\n    } else {\n      let [leftHandle, rightHandle] = values;\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\n      if (!sliderDeltaRef.current) {\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\n          setValues(layerPath, [leftHandle, leftHandle + sliderDeltaRef.current]);\n          return;\n        }\n        sliderDeltaRef.current = rightHandle - leftHandle;\n      }\n      // Check for edge cases and then set new slider values\n      if (locked && reversed) {\n        leftHandle += sliderDeltaRef.current!;\n        if (leftHandle >= rightHandle) [leftHandle] = minAndMax;\n      } else if (locked) {\n        if (rightHandle === minAndMax[1]) rightHandle = leftHandle;\n        rightHandle += sliderDeltaRef.current!;\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n      } else {\n        if (leftHandle < sliderValueRef.current! && rightHandle === sliderValueRef.current) leftHandle = sliderValueRef.current;\n        else leftHandle += sliderDeltaRef.current!;\n        if (leftHandle >= minAndMax[1]) [leftHandle] = minAndMax;\n        rightHandle = leftHandle + sliderDeltaRef.current!;\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\n        if (rightHandle > sliderValueRef.current! && leftHandle < sliderValueRef.current!) rightHandle = sliderValueRef.current as number;\n      }\n      setValues(layerPath, [leftHandle, rightHandle]);\n    }\n  }\n\n  // #region USE EFFECT\n  useEffect(() => {\n    // If slider cycle is active, pause before advancing to next increment\n    if (isPlaying) {\n      if (reversed) playIntervalRef.current = window.setTimeout(() => moveBack(), delay);\n      else playIntervalRef.current = window.setTimeout(() => moveForward(), delay);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [values, filtering, reversed, locked]);\n\n  // When slider cycle is activated, advance to first increment without delay\n  useEffect(() => {\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying]);\n  // #endregion\n\n  // #region HANDLE FUNCTIONS\n  function handleBack(): void {\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    moveBack();\n  }\n\n  function handleForward(): void {\n    [sliderValueRef.current] = values;\n    moveForward();\n  }\n\n  function handleLock(): void {\n    clearTimeout(playIntervalRef.current);\n    setLocked(layerPath, !locked);\n  }\n\n  function handlePlay(): void {\n    clearTimeout(playIntervalRef.current);\n    sliderValueRef.current = reversed ? values[1] : values[0];\n    setIsPlaying(!isPlaying);\n  }\n\n  function handleReverse(): void {\n    clearTimeout(playIntervalRef.current);\n    setReversed(layerPath, !reversed);\n    if (isPlaying) {\n      if (reversed) moveBack();\n      else moveForward();\n    }\n  }\n\n  function handleSliderChange(event: number | number[]): void {\n    clearTimeout(playIntervalRef.current);\n    setIsPlaying(false);\n    sliderDeltaRef.current = undefined;\n    setValues(layerPath, event as number[]);\n  }\n\n  function handleTimeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    setDelay(layerPath, event.target.value as unknown as number);\n  }\n\n  function handleCheckbox(newValue: boolean): void {\n    setFiltering(layerPath, newValue);\n    if (!newValue) {\n      clearInterval(playIntervalRef.current);\n      setIsPlaying(false);\n    }\n  }\n  // #endregion\n\n  function returnLockTooltip(): string {\n    if (reversed) {\n      const text = locked\n        ? getLocalizedMessage(mapId, 'timeSlider.slider.unlockRight')\n        : getLocalizedMessage(mapId, 'timeSlider.slider.lockRight');\n      return text;\n    }\n    const text = locked\n      ? getLocalizedMessage(mapId, 'timeSlider.slider.unlockLeft')\n      : getLocalizedMessage(mapId, 'timeSlider.slider.lockLeft');\n    return text;\n  }\n\n  return (\n    <Grid>\n      <div style={sxClasses.rightPanelContainer}>\n        <Grid container sx={sxClasses.rightPanelBtnHolder}>\n          <Grid item xs={9}>\n            <Typography component=\"div\" sx={{ ...sxClasses.panelHeaders, paddingLeft: '20px', paddingTop: '10px' }}>\n              {`${title || name}`}\n              {timeframe !== undefined &&\n                ` (${timeframe === 'day' ? new Date(defaultValue).toLocaleDateString() : new Date(defaultValue).getFullYear()})`}\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <div style={{ textAlign: 'right', marginRight: '25px' }}>\n              <Tooltip\n                title={\n                  filtering\n                    ? getLocalizedMessage(mapId, 'timeSlider.slider.disableFilter')\n                    : getLocalizedMessage(mapId, 'timeSlider.slider.enableFilter')\n                }\n                placement=\"top\"\n                enterDelay={1000}\n              >\n                <Checkbox checked={filtering} onChange={(event, child) => handleCheckbox(child)} />\n              </Tooltip>\n            </div>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\n            <Slider\n              sliderId={layerPath}\n              mapId={mapId}\n              style={{ width: '80%', color: 'primary' }}\n              min={minAndMax[0]}\n              max={minAndMax[1]}\n              value={values}\n              valueLabelFormat={(value) => valueLabelFormat(value)}\n              marks={sliderMarks}\n              step={singleHandle ? null : 0.1}\n              customOnChange={(event) => handleSliderChange(event)}\n              key={values[1] ? values[1] + values[0] : values[0]}\n            />\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\n            {!singleHandle && (\n              <IconButton\n                className=\"style1\"\n                aria-label={returnLockTooltip()}\n                tooltip={returnLockTooltip()}\n                tooltipPlacement=\"top\"\n                onClick={() => handleLock()}\n              >\n                {locked ? <LockIcon /> : <LockOpenIcon />}\n              </IconButton>\n            )}\n            <IconButton\n              className=\"style1\"\n              aria-label={getLocalizedMessage(mapId, 'timeSlider.slider.back') as string}\n              tooltip=\"timeSlider.slider.back\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleBack()}\n            >\n              <ArrowLeftIcon />\n            </IconButton>\n            <IconButton\n              className=\"style1\"\n              aria-label={\n                isPlaying\n                  ? (getLocalizedMessage(mapId, 'timeSlider.slider.pauseAnimation') as string)\n                  : (getLocalizedMessage(mapId, 'timeSlider.slider.playAnimation') as string)\n              }\n              tooltip={isPlaying ? 'timeSlider.slider.pauseAnimation' : 'timeSlider.slider.playAnimation'}\n              tooltipPlacement=\"top\"\n              disabled={!filtering}\n              onClick={() => handlePlay()}\n            >\n              {!isPlaying ? <PlayArrowIcon /> : <PauseIcon />}\n            </IconButton>\n            <IconButton\n              className=\"style1\"\n              aria-label={getLocalizedMessage(mapId, 'timeSlider.slider.forward') as string}\n              tooltip=\"timeSlider.slider.forward\"\n              tooltipPlacement=\"top\"\n              disabled={isPlaying || !filtering}\n              onClick={() => handleForward()}\n            >\n              <ArrowRightIcon />\n            </IconButton>\n            <IconButton\n              className=\"style1\"\n              aria-label={getLocalizedMessage(mapId, 'timeSlider.slider.changeDirection') as string}\n              tooltip=\"timeSlider.slider.changeDirection\"\n              tooltipPlacement=\"top\"\n              onClick={() => handleReverse()}\n            >\n              {reversed ? <SwitchRightIcon /> : <SwitchLeftIcon />}\n            </IconButton>\n            <FormControl sx={{ width: '150px' }}>\n              <InputLabel variant=\"standard\">{getLocalizedMessage(mapId, 'timeSlider.slider.timeDelay')}</InputLabel>\n              <NativeSelect\n                defaultValue={delay}\n                inputProps={{\n                  name: 'timeDelay',\n                  onChange: (event) => handleTimeChange(event),\n                }}\n              >\n                <option value={500}>0.5s</option>\n                <option value={750}>0.75s</option>\n                <option value={1000}>1.0s</option>\n                <option value={1500}>1.5s</option>\n                <option value={2000}>2.0s</option>\n                <option value={3000}>3.0s</option>\n                <option value={5000}>5.0s</option>\n              </NativeSelect>\n            </FormControl>\n          </div>\n        </Grid>\n        {description && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {description}\n            </Typography>\n          </Grid>\n        )}\n        {fieldAlias && (\n          <Grid item xs={12}>\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\n              {`${fieldAlias} (${field})`}\n            </Typography>\n          </Grid>\n        )}\n      </div>\n    </Grid>\n  );\n}\n","import { useTheme } from '@mui/material/styles';\nimport { TypeWindow, getLocalizedMessage } from 'geoview-core';\nimport { LayerListEntry, Layout } from 'geoview-core/src/core/components/common';\nimport { useMapVisibleLayers, useTimeSliderLayers } from 'geoview-core/src/core/stores';\nimport { Paper, Typography } from 'geoview-core/src/ui';\nimport { logger } from 'geoview-core/src/core/utils/logger';\n\nimport { TimeSlider } from './time-slider';\nimport { ConfigProps } from './time-slider-types';\nimport { getSxClasses } from './time-slider-style';\n\ninterface TypeTimeSliderProps {\n  configObj: ConfigProps;\n  mapId: string;\n}\n\n/**\n * Time slider tab\n *\n * @param {TypeTimeSliderProps} props The properties passed to slider\n * @returns {JSX.Element} the time slider tab\n */\nexport function TimeSliderPanel(props: TypeTimeSliderProps): JSX.Element {\n  const { mapId, configObj } = props;\n  const { cgpv } = window as TypeWindow;\n  const { react } = cgpv;\n  const { useState, useCallback, useMemo, useEffect } = react;\n\n  const theme = useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  // internal state\n  const [selectedLayerPath, setSelectedLayerPath] = useState<string>();\n\n  // get values from store\n  const visibleLayers = useMapVisibleLayers() as string[];\n  const timeSliderLayers = useTimeSliderLayers();\n\n  /**\n   * handle Layer list when clicked on each layer.\n   * @param {LayerListEntry} layer layer clicked by the user.\n   */\n  const handleClickLayerList = useCallback((layer: LayerListEntry) => {\n    // Log\n    logger.logTraceUseCallback('TIME-SLIDER-PANEL - handleLayerList');\n\n    // Set the layer path\n    setSelectedLayerPath(layer.layerPath);\n  }, []);\n\n  // Reacts when the array of layer data updates\n  const memoLayersList = useMemo(() => {\n    // Log\n    logger.logTraceUseMemo('TIME-SLIDER-PANEL - memoLayersList', timeSliderLayers);\n\n    // Return the layers\n    return visibleLayers\n      .map((layerPath) => {\n        return { layerPath, timeSliderLayerInfo: timeSliderLayers[layerPath!] };\n      })\n      .filter((layer) => layer && layer.timeSliderLayerInfo)\n      .map((layer) => {\n        return {\n          layerName: layer.timeSliderLayerInfo.name,\n          layerPath: layer.layerPath,\n          tooltip: layer.timeSliderLayerInfo.name,\n          layerStatus: 'loaded',\n          queryStatus: 'processed',\n        } as LayerListEntry;\n      });\n  }, [visibleLayers, timeSliderLayers]);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('TIME-SLIDER-PANEL - memoLayersList', memoLayersList, selectedLayerPath);\n\n    // If the selected layer path isn't in the list of layers possible, clear it\n    if (selectedLayerPath && !memoLayersList.map((layer) => layer.layerPath).includes(selectedLayerPath)) {\n      // Clear the selected layer path\n      setSelectedLayerPath('');\n    }\n  }, [memoLayersList, selectedLayerPath]);\n\n  return (\n    <Layout selectedLayerPath={selectedLayerPath} onLayerListClicked={handleClickLayerList} layerList={memoLayersList}>\n      {selectedLayerPath && <TimeSlider mapId={mapId} config={configObj} layerPath={selectedLayerPath} key={selectedLayerPath} />}\n      {!selectedLayerPath && (\n        <Paper sx={{ padding: '2rem' }}>\n          <Typography variant=\"h3\" gutterBottom sx={sxClasses.timeSliderInstructionsTitle}>\n            {getLocalizedMessage(mapId, 'timeSlider.instructions')}\n          </Typography>\n          <Typography component=\"p\" sx={sxClasses.timeSliderInstructionsBody}>\n            {getLocalizedMessage(mapId, 'timeSlider.instructions')}\n          </Typography>\n        </Paper>\n      )}\n    </Layout>\n  );\n}\n","import { AnySchemaObject, api, Cast, TimeDimension, toJsonObject, TypeJsonObject, TypeTabs } from 'geoview-core';\nimport { TimeSliderIcon } from 'geoview-core/src/ui';\nimport { FooterPlugin } from 'geoview-core/src/api/plugin/footer-plugin';\n\nimport { TimeSliderPanel } from './time-slider-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-time-slider-panel.json';\nimport { SliderProps } from './time-slider-types';\n\nexport interface LayerProps {\n  layerPath: string;\n  layerName: string;\n}\nexport interface SliderFilterProps {\n  title: string;\n  description: string;\n  range: string[];\n  defaultValue: string;\n  minAndMax: number[];\n  field: string;\n  singleHandle: boolean;\n  values: number[];\n  filtering: boolean;\n  delay: number;\n  locked: boolean;\n  reversed: boolean;\n}\n\n/**\n * Time slider plugin\n */\nclass TimeSliderPlugin extends FooterPlugin {\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * Translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      timeSlider: {\n        title: 'Time Slider',\n        panel: {\n          noLayers: 'No layers with temporal data',\n        },\n        slider: {\n          unlockRight: 'Unlock right handle',\n          unlockLeft: 'Unlock left handle',\n          lockRight: 'Lock right handle',\n          lockLeft: 'Lock left handle',\n          disableFilter: 'Disable Filtering',\n          enableFilter: 'Enable Filtering',\n          pauseAnimation: 'Pause animation',\n          playAnimation: 'Play animation',\n          back: 'Back',\n          forward: 'Forward',\n          changeDirection: 'Change animation direction',\n          timeDelay: 'Animation time delay',\n        },\n        instructions: 'Time Slider Instructions',\n      },\n    },\n    fr: {\n      timeSlider: {\n        title: 'Curseur Temporel',\n        panel: {\n          noLayers: 'Pas de couches avec des données temporelles',\n        },\n        slider: {\n          unlockRight: 'Déverrouiller la poignée droite',\n          unlockLeft: 'Déverrouiller la poignée gauche',\n          lockRight: 'Verrouiller la poignée droite',\n          lockLeft: 'Verrouiller la poignée gauche',\n          disableFilter: 'Désactiver le filtrage',\n          enableFilter: 'Activer le filtrage',\n          pauseAnimation: `Pause de l'animation`,\n          playAnimation: `Jouer l'animation`,\n          back: 'Retour',\n          forward: 'En avant',\n          changeDirection: `Changer la direction de l'animation`,\n          timeDelay: `Délai d'animation`,\n        },\n        instructions: 'Instructions Curseur Temporel',\n      },\n    },\n  });\n\n  onCreateContentProps = (): TypeTabs => {\n    // Set custom time dimension if applicable\n    this.configObj.sliders.forEach((obj: SliderProps) => {\n      if (obj.temporalDimension) {\n        const timeDimension: TimeDimension = {\n          field: obj.temporalDimension.field,\n          default: obj.temporalDimension.default,\n          unitSymbol: obj.temporalDimension.unitSymbol,\n          nearestValues: obj.temporalDimension.nearestValues,\n          range: api.dateUtilities.createRangeOGC(obj.temporalDimension.range as unknown as string),\n          singleHandle: obj.temporalDimension.singleHandle,\n        };\n\n        // TODO: Check concurrency between plugin creation and setting temporal dimensions\n        // TO.DOCONT: I doubt that this (and few lines below) is a good place to set the temporal dimension on layers that might be\n        // TO.DOCONT: loading their metadata (and setting their own temporal dimension) at the same time as the plugin gets created.\n        // TO.DOCONT: Whichever call comes last will be overriding the setTemporalDimension set by the other concurrent task.\n        // TO.DOCONT: Fortunately, the time-slider plugin gets initialized 'late' as it's currently part of a footer, so they, most of the time,\n        // TO.DOCONT: always overwrite the config from the layer metadata which is probably what we want here.\n        // TP.DOCONT: It's risky, because if the Plugin gets created before the layer metadata is fully fetched and read,\n        // TO.DOCONT: the later will override the plugin settings (can be tested by adding fake delays).\n        // TO.DOCONT: If this Plugin has temporal dimension settings, for various layers, those should be set in synch with the layers\n        // TO.DOCONT: using event listeners, not at Plugin creation.\n        api.maps[this.pluginProps.mapId].layer.geoviewLayer(obj.layerPaths[0]).setTemporalDimension(obj.layerPaths[0], timeDimension);\n      }\n\n      // Set override default value under time dimension if applicable\n      if (obj.defaultValue) {\n        const layerPath = obj.layerPaths[0];\n        const timeDimension = api.maps[this.pluginProps.mapId].layer.geoviewLayer(layerPath).layerTemporalDimension[layerPath];\n        api.maps[this.pluginProps.mapId].layer.geoviewLayer(layerPath).setTemporalDimension(layerPath, {\n          ...timeDimension,\n          default: obj.defaultValue,\n        });\n      }\n    });\n\n    return {\n      id: 'time-slider',\n      value: this.value!,\n      label: 'timeSlider.title',\n      icon: <TimeSliderIcon />,\n      content: <TimeSliderPanel mapId={this.pluginProps.mapId} configObj={this.configObj} />,\n    };\n  };\n}\n\nexport default TimeSliderPlugin;\n\n// Keep a reference to the Time Slider Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['time-slider'] = Cast<TimeSliderPlugin>(TimeSliderPlugin);\n"],"names":["FooterPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_assertThisInitialized","_inherits","_createClass","key","value","id","this","label","content","pluginProps","mapId","_this$map","_this$map2","map","footerBarApi","tabs","footerProps","onCreateContentProps","createTab","_this$map3","removeTab","logger","logTraceCore","AbstractPlugin","_excluded","_excluded2","defaultInput","Input","NativeSelect","inProps","ref","props","useThemeProps","name","className","children","classes","classesProp","IconComponent","ArrowDropDown","A","input","inputProps","other","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","useUtilityClasses","otherClasses","inputComponent","NativeSelectInput","variant","type","undefined","clsx","muiName","getSxClasses","theme","panelHeaders","fontSize","palette","geoViewFontSize","lg","fontWeight","marginBottom","rightPanelContainer","border","primary","main","borderRadius","backgroundColor","common","white","rightPanelBtnHolder","marginTop","boxShadow","timeSliderInstructionsTitle","lineHeight","timeSliderInstructionsBody","TimeSlider","TimeSliderPanelProps","cgpv","window","config","layerPath","react","ui","useState","useRef","useEffect","_ui$elements","elements","Grid","Slider","Typography","Checkbox","Tooltip","IconButton","LockIcon","LockOpenIcon","ArrowLeftIcon","PlayArrowIcon","PauseIcon","ArrowRightIcon","SwitchRightIcon","SwitchLeftIcon","useTheme","sxClasses","_useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","playIntervalRef","sliderValueRef","sliderDeltaRef","_useTimeSliderStoreAc","useTimeSliderStoreActions","setTitle","setDefaultValue","setDescription","setValues","setLocked","setReversed","setDelay","setFiltering","_useTimeSliderLayers$","useTimeSliderLayers","title","description","defaultValue","range","minAndMax","field","fieldAlias","filtering","singleHandle","values","delay","locked","reversed","_config$sliders","sliderConfig","sliders","find","o","layerPaths","includes","getLocalizedValue","_config$sliders2","isArray","Date","getTime","timeframe","timeStampRange","entry","timeDelta","dayDelta","getDate","yearDelta","getFullYear","timeMarks","Math","round","sliderMarks","i","push","toTimeString","split","toISOString","slice","moveBack","newIndex","currentIndex","indexOf","_values","leftHandle","rightHandle","current","moveForward","_values2","returnLockTooltip","getLocalizedMessage","setTimeout","_jsx","_jsxs","style","container","sx","item","xs","component","_objectSpread","paddingLeft","paddingTop","toLocaleDateString","textAlign","marginRight","placement","enterDelay","checked","onChange","event","child","newValue","clearInterval","sliderId","width","color","min","max","valueLabelFormat","replace","marks","step","customOnChange","clearTimeout","handleSliderChange","tooltip","tooltipPlacement","onClick","disabled","_values3","FormControl","InputLabel","target","handleTimeChange","px","py","TimeSliderPanel","configObj","useCallback","useMemo","selectedLayerPath","setSelectedLayerPath","visibleLayers","useMapVisibleLayers","timeSliderLayers","handleClickLayerList","layer","logTraceUseCallback","memoLayersList","logTraceUseMemo","timeSliderLayerInfo","filter","layerName","layerStatus","queryStatus","logTraceUseEffect","Layout","onLayerListClicked","layerList","Paper","padding","gutterBottom","TimeSliderPlugin","_FooterPlugin","schema","toJsonObject","defaultConfig","en","timeSlider","panel","noLayers","slider","unlockRight","unlockLeft","lockRight","lockLeft","disableFilter","enableFilter","pauseAnimation","playAnimation","back","forward","changeDirection","timeDelay","instructions","fr","forEach","obj","temporalDimension","timeDimension","default","unitSymbol","nearestValues","api","dateUtilities","createRangeOGC","maps","geoviewLayer","setTemporalDimension","layerTemporalDimension","icon","TimeSliderIcon","geoviewPlugins","Cast"],"sourceRoot":""}