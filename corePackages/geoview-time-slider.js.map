{"version":3,"file":"corePackages/geoview-time-slider.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/footer-plugin.ts","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@mui+material@5.15.15_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.79_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/NativeSelect/NativeSelect.js","webpack://geoview-core/../geoview-time-slider/src/time-slider-style.ts","webpack://geoview-core/../geoview-time-slider/src/time-slider.tsx","webpack://geoview-core/../geoview-time-slider/src/time-slider-panel.tsx","webpack://geoview-core/../geoview-time-slider/src/index.tsx"],"sourcesContent":["import { TypeTabs } from '@/ui/tabs/tabs';\r\nimport { AbstractPlugin } from './abstract-plugin';\r\nimport { logger } from '@/core/utils/logger';\r\n\r\n/** ******************************************************************************************************************************\r\n * Footer Plugin abstract class.\r\n */\r\nexport abstract class FooterPlugin extends AbstractPlugin {\r\n  // Store index of tab\r\n  value?: number;\r\n\r\n  // Store the footer props\r\n  footerProps?: TypeTabs;\r\n\r\n  /**\r\n   * Overridable function to create footer props content\r\n   * @returns TypeTabs The footer props content\r\n   */\r\n  onCreateContentProps(): TypeTabs {\r\n    // Override this to create the footer props..\r\n\r\n    // Return dummy content\r\n    return {\r\n      id: 'some-id',\r\n      value: this.value!,\r\n      label: 'Some label',\r\n      content: `<div>Content for Footer plugin on map id ${this.pluginProps.mapId} goes here...</div>`,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Called when a footer plugin is being added\r\n   */\r\n  onAdd(): void {\r\n    // Log\r\n    // No need to log, parent class does it well already via added() function.\r\n\r\n    // Set value to length of tabs(?)\r\n    this.value = this.map()?.footerBarApi.tabs.length;\r\n\r\n    // Create props\r\n    this.footerProps = this.onCreateContentProps();\r\n\r\n    // Create tab with the props\r\n    this.map()?.footerBarApi.createTab(this.footerProps);\r\n  }\r\n\r\n  /**\r\n   * Called when a footer plugin is being removed\r\n   */\r\n  onRemove(): void {\r\n    // Log\r\n    // No need to log, parent class does it well already via removed() function.\r\n\r\n    // Remove the footer tab\r\n    if (this.value) this.map()?.footerBarApi.removeTab(this.footerProps!.id);\r\n  }\r\n\r\n  /**\r\n   * Called when a footer plugin has been selected in the tabs\r\n   */\r\n  onSelected(): void {\r\n    // Log\r\n    logger.logTraceCore('FOOTER-PLUGIN - onSelected');\r\n\r\n    // TODO: Refactor - Move 'onSelected' in AbstractPlugin class so that AppBar can eventually benefit as well?\r\n\r\n    // Nothing else here.. but inherited FooterPlugins might override this method to do stuff when they are selected!\r\n  }\r\n}\r\n","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n  _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n  const {\n      className,\n      children,\n      classes: classesProp = {},\n      IconComponent = ArrowDropDownIcon,\n      input = defaultInput,\n      inputProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n  const classes = useUtilityClasses(ownerState);\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, _extends({\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: _extends({\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined\n      }, inputProps, input ? input.props.inputProps : {}),\n      ref\n    }, other, {\n      className: clsx(classes.root, input.props.className, className)\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;","import { Theme } from '@mui/material/styles';\r\n\r\n// ? I doubt we want to define an explicit type for style properties?\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const getSxClasses = (theme: Theme): any => ({\r\n  panelHeaders: {\r\n    fontSize: theme.palette.geoViewFontSize.lg,\r\n    fontWeight: '600',\r\n    marginBottom: '20px',\r\n  },\r\n  rightPanelContainer: {\r\n    border: `2px solid ${theme.palette.primary.main}`,\r\n    borderRadius: '5px',\r\n    backgroundColor: theme.palette.common.white,\r\n  },\r\n  rightPanelBtnHolder: {\r\n    marginTop: '20px',\r\n    marginBottom: '9px',\r\n    boxShadow: '0px 12px 9px -13px #E0E0E0',\r\n  },\r\n  timeSliderInstructionsTitle: {\r\n    fontSize: theme.palette.geoViewFontSize.lg,\r\n    fontWeight: '600',\r\n    lineHeight: '1.5em',\r\n  },\r\n  timeSliderInstructionsBody: {\r\n    fontSize: '1rem',\r\n  },\r\n});\r\n","import { useTheme } from '@mui/material/styles';\r\nimport { FormControl, InputLabel, NativeSelect } from '@mui/material';\r\nimport {\r\n  useTimeSliderLayers,\r\n  useTimeSliderStoreActions,\r\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\r\nimport { getLocalizedValue } from 'geoview-core/src/core/utils/utilities';\r\nimport { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\r\nimport { logger } from 'geoview-core/src/core/utils/logger';\r\nimport { getSxClasses } from './time-slider-style';\r\nimport { ConfigProps } from './time-slider-types';\r\n\r\ninterface TimeSliderProps {\r\n  config: ConfigProps;\r\n  mapId: string;\r\n  layerPath: string;\r\n}\r\n\r\n/**\r\n * Creates a panel with time sliders\r\n *\r\n * @param {TimeSliderProps} props - Time slider properties\r\n * @returns {JSX.Element} the slider panel\r\n */\r\nexport function TimeSlider(props: TimeSliderProps): JSX.Element {\r\n  // Log\r\n  logger.logTraceRender('geoview-time-slider/time-slider', props);\r\n\r\n  const { cgpv } = window;\r\n  const { config, layerPath, mapId } = props;\r\n  const { api, react, ui } = cgpv;\r\n  const { useState, useRef, useEffect, useCallback } = react;\r\n  const {\r\n    Grid,\r\n    Slider,\r\n    Typography,\r\n    Checkbox,\r\n    Tooltip,\r\n    IconButton,\r\n    LockIcon,\r\n    LockOpenIcon,\r\n    ArrowLeftIcon,\r\n    PlayArrowIcon,\r\n    PauseIcon,\r\n    ArrowRightIcon,\r\n    SwitchRightIcon,\r\n    SwitchLeftIcon,\r\n  } = ui.elements;\r\n\r\n  const theme = useTheme();\r\n  const sxClasses = getSxClasses(theme);\r\n\r\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n  const playIntervalRef = useRef<number>();\r\n\r\n  // References for play button\r\n  const sliderValueRef = useRef<number>();\r\n  const sliderDeltaRef = useRef<number>();\r\n\r\n  // Get actions and states from store\r\n  // TODO: evaluate best option to set value by layer path.... trough a getter?\r\n  const { setTitle, setDefaultValue, setDescription, setValues, setLocked, setReversed, setDelay, setFiltering } =\r\n    useTimeSliderStoreActions();\r\n  const displayLanguage = useAppDisplayLanguage();\r\n\r\n  // TODO: check performance as we should technically have one selector by constant\r\n  const {\r\n    title,\r\n    description,\r\n    name,\r\n    defaultValue,\r\n    discreteValues,\r\n    range,\r\n    minAndMax,\r\n    field,\r\n    fieldAlias,\r\n    filtering,\r\n    singleHandle,\r\n    values,\r\n    delay,\r\n    locked,\r\n    reversed,\r\n  } = useTimeSliderLayers()[layerPath];\r\n\r\n  // slider config\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - mount');\r\n\r\n    // TODO: add mechanism to initialize these values during store onInitialize\r\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\r\n    if (title === undefined) setTitle(layerPath, getLocalizedValue(sliderConfig?.title, displayLanguage) || '');\r\n    if (description === undefined) setDescription(layerPath, getLocalizedValue(sliderConfig?.description, displayLanguage) || '');\r\n    if (locked === undefined) setLocked(layerPath, sliderConfig?.locked !== undefined ? sliderConfig?.locked : false);\r\n    if (reversed === undefined) setReversed(layerPath, sliderConfig?.reversed !== undefined ? sliderConfig?.reversed : false);\r\n    if (defaultValue === undefined) setDefaultValue(layerPath, sliderConfig?.defaultValue || '');\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - config layerPath', config, layerPath);\r\n\r\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\r\n    if (sliderConfig?.defaultValue) {\r\n      // update values based on slider's default value\r\n      const defaultValueIsArray = Array.isArray(sliderConfig?.defaultValue);\r\n      if (defaultValueIsArray) {\r\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue[0]).getTime(), new Date(sliderConfig?.defaultValue[1]).getTime()]);\r\n      } else if (range.includes(sliderConfig?.defaultValue)) {\r\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue).getTime()]);\r\n      } else {\r\n        setValues(layerPath, [new Date(range[0]).getTime()]);\r\n      }\r\n    }\r\n  }, [config, layerPath, range, setFiltering, setValues]);\r\n\r\n  const timeStampRange = range.map((entry: string | number | Date) => new Date(entry).getTime());\r\n  // Check if range occurs in a single day or year\r\n  const timeDelta = minAndMax[1] - minAndMax[0];\r\n  const dayDelta = new Date(minAndMax[1]).getDate() - new Date(minAndMax[0]).getDate();\r\n  const yearDelta = new Date(minAndMax[1]).getFullYear() - new Date(minAndMax[0]).getFullYear();\r\n  let timeframe: string | undefined;\r\n  if (dayDelta === 0 && timeDelta < 86400000) timeframe = 'day';\r\n  else if (yearDelta === 0) timeframe = 'year';\r\n\r\n  let timeMarks: number[] = [];\r\n  if (range.length < 4 && discreteValues) {\r\n    const interval = (new Date(range[range.length - 1]).getTime() - new Date(range[0]).getTime()) / 4;\r\n    timeMarks = [minAndMax[0], minAndMax[0] + interval, minAndMax[0] + interval * 2, minAndMax[0] + interval * 3, minAndMax[1]];\r\n  } else if (range.length < 6 || singleHandle) timeMarks = timeStampRange;\r\n  else {\r\n    timeMarks = [\r\n      minAndMax[0],\r\n      new Date(range[Math.round(range.length / 4)]).getTime(),\r\n      new Date(range[Math.round(range.length / 2)]).getTime(),\r\n      new Date(range[Math.round((3 * range.length) / 4)]).getTime(),\r\n      minAndMax[1],\r\n    ];\r\n  }\r\n\r\n  const sliderMarks = [];\r\n  for (let i = 0; i < timeMarks.length; i++) {\r\n    sliderMarks.push({\r\n      value: timeMarks[i],\r\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\r\n      label: timeframe\r\n        ? `${timeframe === 'day' ? new Date(timeMarks[i]).toTimeString().split(' ')[0] : new Date(timeMarks[i]).toISOString().slice(5, 10)}`\r\n        : new Date(timeMarks[i]).toISOString().slice(0, 10),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Moves the slider handle(s) back one increment\r\n   */\r\n  function moveBack(): void {\r\n    if (singleHandle && !discreteValues) {\r\n      const currentIndex = timeStampRange.indexOf(values[0]);\r\n      let newIndex: number;\r\n      if (timeStampRange[currentIndex] === minAndMax[0]) newIndex = timeStampRange.length - 1;\r\n      else newIndex = currentIndex - 1;\r\n      setValues(layerPath, [timeStampRange[newIndex]]);\r\n    } else if (singleHandle) {\r\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\r\n      const newPosition = values[0] - interval < minAndMax[0] ? minAndMax[1] : values[0] - interval;\r\n      setValues(layerPath, [newPosition]);\r\n    } else {\r\n      let [leftHandle, rightHandle] = values;\r\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\r\n      if (!sliderDeltaRef.current) {\r\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\r\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\r\n          setValues(layerPath, [rightHandle - sliderDeltaRef.current, rightHandle]);\r\n          return;\r\n        }\r\n        sliderDeltaRef.current = rightHandle - leftHandle;\r\n      }\r\n      // Check for edge cases and then set new slider values\r\n      if (locked && reversed) {\r\n        if (leftHandle === minAndMax[0]) leftHandle = rightHandle;\r\n        leftHandle -= sliderDeltaRef.current;\r\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\r\n      } else if (locked) {\r\n        rightHandle -= sliderDeltaRef.current!;\r\n        if (rightHandle < leftHandle) rightHandle = leftHandle;\r\n        if (rightHandle === leftHandle) [, rightHandle] = minAndMax;\r\n      } else {\r\n        if (rightHandle > sliderValueRef.current! && leftHandle === sliderValueRef.current) rightHandle = sliderValueRef.current;\r\n        else rightHandle -= sliderDeltaRef.current!;\r\n        if (rightHandle <= minAndMax[0]) [, rightHandle] = minAndMax;\r\n        leftHandle = rightHandle - sliderDeltaRef.current!;\r\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\r\n        if (leftHandle < sliderValueRef.current! && rightHandle > sliderValueRef.current!) leftHandle = sliderValueRef.current as number;\r\n      }\r\n      setValues(layerPath, [leftHandle, rightHandle]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider handle(s) forward one increment\r\n   */\r\n  function moveForward(): void {\r\n    if (singleHandle && !discreteValues) {\r\n      const currentIndex = timeStampRange.indexOf(values[0]);\r\n      let newIndex: number;\r\n      if (timeStampRange[currentIndex] === minAndMax[1]) newIndex = 0;\r\n      else newIndex = currentIndex + 1;\r\n      setValues(layerPath, [timeStampRange[newIndex]]);\r\n    } else if (singleHandle) {\r\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\r\n      const newPosition = values[0] + interval > minAndMax[1] ? minAndMax[0] : values[0] + interval;\r\n      setValues(layerPath, [newPosition]);\r\n    } else {\r\n      let [leftHandle, rightHandle] = values;\r\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\r\n      if (!sliderDeltaRef.current) {\r\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\r\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\r\n          setValues(layerPath, [leftHandle, leftHandle + sliderDeltaRef.current]);\r\n          return;\r\n        }\r\n        sliderDeltaRef.current = rightHandle - leftHandle;\r\n      }\r\n      // Check for edge cases and then set new slider values\r\n      if (locked && reversed) {\r\n        leftHandle += sliderDeltaRef.current!;\r\n        if (leftHandle >= rightHandle) [leftHandle] = minAndMax;\r\n      } else if (locked) {\r\n        if (rightHandle === minAndMax[1]) rightHandle = leftHandle;\r\n        rightHandle += sliderDeltaRef.current!;\r\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\r\n      } else {\r\n        if (leftHandle < sliderValueRef.current! && rightHandle === sliderValueRef.current) leftHandle = sliderValueRef.current;\r\n        else leftHandle += sliderDeltaRef.current!;\r\n        if (leftHandle >= minAndMax[1]) [leftHandle] = minAndMax;\r\n        rightHandle = leftHandle + sliderDeltaRef.current!;\r\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\r\n        if (rightHandle > sliderValueRef.current! && leftHandle < sliderValueRef.current!) rightHandle = sliderValueRef.current as number;\r\n      }\r\n      setValues(layerPath, [leftHandle, rightHandle]);\r\n    }\r\n  }\r\n\r\n  // #region USE EFFECT\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - values filtering', values, filtering);\r\n\r\n    // If slider cycle is active, pause before advancing to next increment\r\n    if (isPlaying) {\r\n      if (reversed) playIntervalRef.current = window.setTimeout(() => moveBack(), delay);\r\n      else playIntervalRef.current = window.setTimeout(() => moveForward(), delay);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [values, filtering, reversed, locked]);\r\n\r\n  // When slider cycle is activated, advance to first increment without delay\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - isPlaying', isPlaying);\r\n\r\n    if (isPlaying) {\r\n      if (reversed) moveBack();\r\n      else moveForward();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isPlaying]);\r\n  // #endregion\r\n\r\n  // #region HANDLE FUNCTIONS\r\n  function handleBack(): void {\r\n    sliderValueRef.current = reversed ? values[1] : values[0];\r\n    moveBack();\r\n  }\r\n\r\n  function handleForward(): void {\r\n    [sliderValueRef.current] = values;\r\n    moveForward();\r\n  }\r\n\r\n  function handleLock(): void {\r\n    clearTimeout(playIntervalRef.current);\r\n    setLocked(layerPath, !locked);\r\n  }\r\n\r\n  function handlePlay(): void {\r\n    clearTimeout(playIntervalRef.current);\r\n    sliderValueRef.current = reversed ? values[1] : values[0];\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function handleReverse(): void {\r\n    clearTimeout(playIntervalRef.current);\r\n    setReversed(layerPath, !reversed);\r\n    if (isPlaying) {\r\n      if (reversed) moveBack();\r\n      else moveForward();\r\n    }\r\n  }\r\n\r\n  function handleTimeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\r\n    setDelay(layerPath, event.target.value as unknown as number);\r\n  }\r\n\r\n  function handleCheckbox(newValue: boolean): void {\r\n    setFiltering(layerPath, newValue);\r\n    if (!newValue) {\r\n      clearInterval(playIntervalRef.current);\r\n      setIsPlaying(false);\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  function returnLockTooltip(): string {\r\n    if (reversed) {\r\n      const text = locked\r\n        ? api.utilities.core.getLocalizedMessage('timeSlider.slider.unlockRight', displayLanguage)\r\n        : api.utilities.core.getLocalizedMessage('timeSlider.slider.lockRight', displayLanguage);\r\n      return text;\r\n    }\r\n    const text = locked\r\n      ? api.utilities.core.getLocalizedMessage('timeSlider.slider.unlockLeft', displayLanguage)\r\n      : api.utilities.core.getLocalizedMessage('timeSlider.slider.lockLeft', displayLanguage);\r\n    return text;\r\n  }\r\n\r\n  const handleSliderChange = useCallback(\r\n    (newValues: number | number[]): void => {\r\n      // Log\r\n      logger.logTraceUseCallback('TIME-SLIDER - handleSliderChange', layerPath);\r\n\r\n      clearTimeout(playIntervalRef.current);\r\n      setIsPlaying(false);\r\n      sliderDeltaRef.current = undefined;\r\n      setValues(layerPath, newValues as number[]);\r\n    },\r\n    [layerPath, setValues]\r\n  );\r\n\r\n  /**\r\n   * Create labels for values on slider\r\n   *\r\n   * @param {number} theValue - The value of the slider handle\r\n   * @returns {string} A formatted time string or ISO date string\r\n   */\r\n  const handleLabelFormat = useCallback(\r\n    (theValue: number): string => {\r\n      // Log\r\n      logger.logTraceUseCallback('TIME-SLIDER - handleLabelFormat', timeframe);\r\n\r\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\r\n      if (timeframe === 'day') return new Date(theValue).toTimeString().split(' ')[0].replace(/^0/, '');\r\n      if (timeframe === 'year') return new Date(theValue).toISOString().slice(5, 10);\r\n      return new Date(theValue).toISOString().slice(0, 10);\r\n    },\r\n    [timeframe]\r\n  );\r\n\r\n  return (\r\n    <Grid>\r\n      <div style={sxClasses.rightPanelContainer}>\r\n        <Grid container sx={sxClasses.rightPanelBtnHolder}>\r\n          <Grid item xs={9}>\r\n            <Typography component=\"div\" sx={{ ...sxClasses.panelHeaders, paddingLeft: '20px', paddingTop: '10px' }}>\r\n              {`${title || name}`}\r\n              {timeframe !== undefined &&\r\n                ` (${timeframe === 'day' ? new Date(defaultValue).toLocaleDateString() : new Date(defaultValue).getFullYear()})`}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <div style={{ textAlign: 'right', marginRight: '25px' }}>\r\n              <Tooltip\r\n                title={\r\n                  filtering\r\n                    ? api.utilities.core.getLocalizedMessage('timeSlider.slider.disableFilter', displayLanguage)\r\n                    : api.utilities.core.getLocalizedMessage('timeSlider.slider.enableFilter', displayLanguage)\r\n                }\r\n                placement=\"top\"\r\n                enterDelay={1000}\r\n              >\r\n                <Checkbox checked={filtering} onChange={(event: never, child: boolean): void => handleCheckbox(child)} />\r\n              </Tooltip>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\r\n            <Slider\r\n              key={values[1] ? values[1] + values[0] : values[0]}\r\n              sliderId={layerPath}\r\n              mapId={mapId}\r\n              style={{ width: '80%', color: 'primary' }}\r\n              min={minAndMax[0]}\r\n              max={minAndMax[1]}\r\n              value={values}\r\n              marks={sliderMarks}\r\n              step={!discreteValues ? null : 0.1}\r\n              onChangeCommitted={handleSliderChange}\r\n              onValueDisplay={handleLabelFormat}\r\n            />\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\r\n            {!singleHandle && (\r\n              <IconButton\r\n                className=\"style1\"\r\n                aria-label={returnLockTooltip()}\r\n                tooltip={returnLockTooltip()}\r\n                tooltipPlacement=\"top\"\r\n                onClick={() => handleLock()}\r\n              >\r\n                {locked ? <LockIcon /> : <LockOpenIcon />}\r\n              </IconButton>\r\n            )}\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.back', displayLanguage) as string}\r\n              tooltip=\"timeSlider.slider.back\"\r\n              tooltipPlacement=\"top\"\r\n              disabled={isPlaying || !filtering}\r\n              onClick={() => handleBack()}\r\n            >\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={\r\n                isPlaying\r\n                  ? (api.utilities.core.getLocalizedMessage('timeSlider.slider.pauseAnimation', displayLanguage) as string)\r\n                  : (api.utilities.core.getLocalizedMessage('timeSlider.slider.playAnimation', displayLanguage) as string)\r\n              }\r\n              tooltip={isPlaying ? 'timeSlider.slider.pauseAnimation' : 'timeSlider.slider.playAnimation'}\r\n              tooltipPlacement=\"top\"\r\n              disabled={!filtering}\r\n              onClick={() => handlePlay()}\r\n            >\r\n              {!isPlaying ? <PlayArrowIcon /> : <PauseIcon />}\r\n            </IconButton>\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.forward', displayLanguage) as string}\r\n              tooltip=\"timeSlider.slider.forward\"\r\n              tooltipPlacement=\"top\"\r\n              disabled={isPlaying || !filtering}\r\n              onClick={() => handleForward()}\r\n            >\r\n              <ArrowRightIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.changeDirection', displayLanguage) as string}\r\n              tooltip=\"timeSlider.slider.changeDirection\"\r\n              tooltipPlacement=\"top\"\r\n              onClick={() => handleReverse()}\r\n            >\r\n              {reversed ? <SwitchRightIcon /> : <SwitchLeftIcon />}\r\n            </IconButton>\r\n            <FormControl sx={{ width: '150px' }}>\r\n              <InputLabel variant=\"standard\">\r\n                {api.utilities.core.getLocalizedMessage('timeSlider.slider.timeDelay', displayLanguage)}\r\n              </InputLabel>\r\n              <NativeSelect\r\n                defaultValue={delay}\r\n                inputProps={{\r\n                  name: 'timeDelay',\r\n                  onChange: (event) => handleTimeChange(event),\r\n                }}\r\n              >\r\n                <option value={500}>0.5s</option>\r\n                <option value={750}>0.75s</option>\r\n                <option value={1000}>1.0s</option>\r\n                <option value={1500}>1.5s</option>\r\n                <option value={2000}>2.0s</option>\r\n                <option value={3000}>3.0s</option>\r\n                <option value={5000}>5.0s</option>\r\n              </NativeSelect>\r\n            </FormControl>\r\n          </div>\r\n        </Grid>\r\n        {description && (\r\n          <Grid item xs={12}>\r\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\r\n              {description}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        {fieldAlias && (\r\n          <Grid item xs={12}>\r\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\r\n              {`${fieldAlias} (${field})`}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n","import { TypeWindow } from 'geoview-core/src/core/types/global-types';\r\nimport { LayerListEntry, Layout } from 'geoview-core/src/core/components/common';\r\nimport {\r\n  TypeTimeSliderValues,\r\n  useTimeSliderLayers,\r\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\r\nimport { useMapVisibleLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\r\nimport { useAppGuide } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\r\nimport { Box, Paper } from 'geoview-core/src/ui';\r\nimport { logger } from 'geoview-core/src/core/utils/logger';\r\nimport Markdown from 'markdown-to-jsx';\r\n\r\nimport { ReactNode } from 'react';\r\nimport { TimeSlider } from './time-slider';\r\nimport { ConfigProps } from './time-slider-types';\r\n\r\ninterface TypeTimeSliderProps {\r\n  configObj: ConfigProps;\r\n  mapId: string;\r\n}\r\n\r\n/**\r\n * Time slider tab\r\n *\r\n * @param {TypeTimeSliderProps} props The properties passed to slider\r\n * @returns {JSX.Element} the time slider tab\r\n */\r\nexport function TimeSliderPanel(props: TypeTimeSliderProps): JSX.Element {\r\n  const { mapId, configObj } = props;\r\n  const { cgpv } = window as TypeWindow;\r\n  const { react } = cgpv;\r\n  const { useState, useCallback, useMemo, useEffect } = react;\r\n\r\n  // internal state\r\n  const [selectedLayerPath, setSelectedLayerPath] = useState<string>();\r\n\r\n  // get values from store\r\n  const visibleLayers = useMapVisibleLayers() as string[];\r\n  const timeSliderLayers = useTimeSliderLayers();\r\n  const guide = useAppGuide();\r\n\r\n  /**\r\n   * handle Layer list when clicked on each layer.\r\n   * @param {LayerListEntry} layer layer clicked by the user.\r\n   */\r\n  const handleClickLayerList = useCallback((layer: LayerListEntry) => {\r\n    // Log\r\n    logger.logTraceUseCallback('TIME-SLIDER-PANEL - handleLayerList');\r\n\r\n    // Set the layer path\r\n    setSelectedLayerPath(layer.layerPath);\r\n  }, []);\r\n\r\n  /**\r\n   * Get dates for current filters\r\n   * @param {TypeTimeSliderValuesListEntry} timeSliderLayerInfo Time slider layer info.\r\n   */\r\n  const getFilterInfo = (timeSliderLayerInfo: TypeTimeSliderValues): string | null => {\r\n    if (timeSliderLayerInfo.filtering)\r\n      return timeSliderLayerInfo.values.length === 1\r\n        ? new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)\r\n        : `${new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)} - ${new Date(timeSliderLayerInfo.values[1])\r\n            .toISOString()\r\n            .slice(0, 19)}`;\r\n    return null;\r\n  };\r\n\r\n  // Reacts when the array of layer data updates\r\n  const memoLayersList = useMemo(() => {\r\n    // Log\r\n    logger.logTraceUseMemo('TIME-SLIDER-PANEL - memoLayersList', timeSliderLayers);\r\n\r\n    /**\r\n     * Create layer tooltip\r\n     * @param {TypeTimeSliderValues} timeSliderLayerInfo Time slider layer info.\r\n     * @returns\r\n     */\r\n    const getLayerTooltip = (timeSliderLayerInfo: TypeTimeSliderValues): ReactNode => {\r\n      return (\r\n        <Box sx={{ display: 'flex', alignContent: 'center', '& svg ': { width: '0.75em', height: '0.75em' } }}>\r\n          {timeSliderLayerInfo.name}\r\n          {timeSliderLayerInfo.filtering && `: ${getFilterInfo(timeSliderLayerInfo)}`}\r\n        </Box>\r\n      );\r\n    };\r\n\r\n    // Return the layers\r\n    return visibleLayers\r\n      .map((layerPath) => {\r\n        return { layerPath, timeSliderLayerInfo: timeSliderLayers[layerPath!] };\r\n      })\r\n      .filter((layer) => layer && layer.timeSliderLayerInfo)\r\n      .map((layer) => {\r\n        return {\r\n          layerName: layer.timeSliderLayerInfo.name,\r\n          layerPath: layer.layerPath,\r\n          layerFeatures: getFilterInfo(layer.timeSliderLayerInfo),\r\n          tooltip: getLayerTooltip(layer.timeSliderLayerInfo),\r\n          layerStatus: 'loaded',\r\n          queryStatus: 'processed',\r\n        } as LayerListEntry;\r\n      });\r\n  }, [timeSliderLayers, visibleLayers]);\r\n\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER-PANEL - memoLayersList', memoLayersList, selectedLayerPath);\r\n\r\n    // If the selected layer path isn't in the list of layers possible, clear it\r\n    if (selectedLayerPath && !memoLayersList.map((layer: { layerPath: string }) => layer.layerPath).includes(selectedLayerPath)) {\r\n      // Clear the selected layer path\r\n      setSelectedLayerPath('');\r\n    }\r\n  }, [memoLayersList, selectedLayerPath]);\r\n\r\n  return (\r\n    <Layout selectedLayerPath={selectedLayerPath} onLayerListClicked={handleClickLayerList} layerList={memoLayersList}>\r\n      {selectedLayerPath && <TimeSlider mapId={mapId} config={configObj} layerPath={selectedLayerPath} key={selectedLayerPath} />}\r\n      {!selectedLayerPath && (\r\n        <Paper sx={{ padding: '2rem' }}>\r\n          <Box className=\"guideBox\">\r\n            <Markdown options={{ wrapper: 'article' }}>{guide!.footerPanel!.children!.timeSlider!.content}</Markdown>\r\n          </Box>\r\n        </Paper>\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n","import { TypeJsonObject, toJsonObject, Cast, AnySchemaObject } from 'geoview-core/src/core/types/global-types';\r\nimport { TimeDimension } from 'geoview-core/src/core/utils/date-mgt';\r\nimport { TypeTabs } from 'geoview-core/src/ui/tabs/tabs';\r\nimport { api } from 'geoview-core';\r\nimport { TimeSliderIcon } from 'geoview-core/src/ui';\r\nimport { FooterPlugin } from 'geoview-core/src/api/plugin/footer-plugin';\r\nimport { MapEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/map-event-processor';\r\n\r\nimport { TimeSliderPanel } from './time-slider-panel';\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-time-slider-panel.json';\r\nimport { SliderProps } from './time-slider-types';\r\n\r\nexport interface LayerProps {\r\n  layerPath: string;\r\n  layerName: string;\r\n}\r\nexport interface SliderFilterProps {\r\n  title: string;\r\n  description: string;\r\n  range: string[];\r\n  defaultValue: string;\r\n  minAndMax: number[];\r\n  field: string;\r\n  singleHandle: boolean;\r\n  values: number[];\r\n  filtering: boolean;\r\n  delay: number;\r\n  locked: boolean;\r\n  reversed: boolean;\r\n}\r\n\r\n/**\r\n * Time slider plugin\r\n */\r\nclass TimeSliderPlugin extends FooterPlugin {\r\n  /**\r\n   * Return the schema that is defined for this package\r\n   *\r\n   * @returns {AnySchemaObject} returns the schema for this package\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * Translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      timeSlider: {\r\n        title: 'Time Slider',\r\n        panel: {\r\n          noLayers: 'No layers with temporal data',\r\n        },\r\n        slider: {\r\n          unlockRight: 'Unlock right handle',\r\n          unlockLeft: 'Unlock left handle',\r\n          lockRight: 'Lock right handle',\r\n          lockLeft: 'Lock left handle',\r\n          disableFilter: 'Disable Filtering',\r\n          enableFilter: 'Enable Filtering',\r\n          pauseAnimation: 'Pause animation',\r\n          playAnimation: 'Play animation',\r\n          back: 'Back',\r\n          forward: 'Forward',\r\n          changeDirection: 'Change animation direction',\r\n          timeDelay: 'Animation time delay',\r\n        },\r\n      },\r\n    },\r\n    fr: {\r\n      timeSlider: {\r\n        title: 'Curseur Temporel',\r\n        panel: {\r\n          noLayers: 'Pas de couches avec des données temporelles',\r\n        },\r\n        slider: {\r\n          unlockRight: 'Déverrouiller la poignée droite',\r\n          unlockLeft: 'Déverrouiller la poignée gauche',\r\n          lockRight: 'Verrouiller la poignée droite',\r\n          lockLeft: 'Verrouiller la poignée gauche',\r\n          disableFilter: 'Désactiver le filtrage',\r\n          enableFilter: 'Activer le filtrage',\r\n          pauseAnimation: `Pause de l'animation`,\r\n          playAnimation: `Jouer l'animation`,\r\n          back: 'Retour',\r\n          forward: 'En avant',\r\n          changeDirection: `Changer la direction de l'animation`,\r\n          timeDelay: `Délai d'animation`,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  onCreateContentProps = (): TypeTabs => {\r\n    // Set custom time dimension if applicable\r\n    this.configObj.sliders.forEach((obj: SliderProps) => {\r\n      if (obj.temporalDimension) {\r\n        const timeDimension: TimeDimension = {\r\n          field: obj.temporalDimension.field,\r\n          default: obj.temporalDimension.default,\r\n          unitSymbol: obj.temporalDimension.unitSymbol,\r\n          nearestValues: obj.temporalDimension.nearestValues,\r\n          range: api.utilities.date.createRangeOGC(obj.temporalDimension.range as unknown as string),\r\n          singleHandle: obj.temporalDimension.singleHandle,\r\n        };\r\n\r\n        // TODO: Check concurrency between plugin creation and setting temporal dimensions\r\n        // TO.DOCONT: I doubt that this (and few lines below) is a good place to set the temporal dimension on layers that might be\r\n        // TO.DOCONT: loading their metadata (and setting their own temporal dimension) at the same time as the plugin gets created.\r\n        // TO.DOCONT: Whichever call comes last will be overriding the setTemporalDimension set by the other concurrent task.\r\n        // TO.DOCONT: Fortunately, the time-slider plugin gets initialized 'late' as it's currently part of a footer, so they, most of the time,\r\n        // TO.DOCONT: always overwrite the config from the layer metadata which is probably what we want here.\r\n        // TP.DOCONT: It's risky, because if the Plugin gets created before the layer metadata is fully fetched and read,\r\n        // TO.DOCONT: the later will override the plugin settings (can be tested by adding fake delays).\r\n        // TO.DOCONT: If this Plugin has temporal dimension settings, for various layers, those should be set in synch with the layers\r\n        // TO.DOCONT: using event listeners, not at Plugin creation.\r\n        MapEventProcessor.getMapViewerLayerAPI(this.pluginProps.mapId)\r\n          .geoviewLayer(obj.layerPaths[0])\r\n          .setTemporalDimension(obj.layerPaths[0], timeDimension);\r\n      }\r\n\r\n      // Set override default value under time dimension if applicable\r\n      if (obj.defaultValue) {\r\n        const layerPath = obj.layerPaths[0];\r\n        const timeDimension = MapEventProcessor.getMapViewerLayerAPI(this.pluginProps.mapId).geoviewLayer(layerPath).layerTemporalDimension[\r\n          layerPath\r\n        ];\r\n        MapEventProcessor.getMapViewerLayerAPI(this.pluginProps.mapId)\r\n          .geoviewLayer(layerPath)\r\n          .setTemporalDimension(layerPath, {\r\n            ...timeDimension,\r\n            default: obj.defaultValue,\r\n          });\r\n      }\r\n    });\r\n\r\n    return {\r\n      id: 'time-slider',\r\n      value: this.value!,\r\n      label: 'timeSlider.title',\r\n      icon: <TimeSliderIcon />,\r\n      content: <TimeSliderPanel mapId={this.pluginProps.mapId} configObj={this.configObj} />,\r\n    };\r\n  };\r\n}\r\n\r\nexport default TimeSliderPlugin;\r\n\r\n// Keep a reference to the Time Slider Plugin as part of the geoviewPlugins property stored in the window object\r\nwindow.geoviewPlugins = window.geoviewPlugins || {};\r\nwindow.geoviewPlugins['time-slider'] = Cast<TimeSliderPlugin>(TimeSliderPlugin);\r\n"],"names":["FooterPlugin","_AbstractPlugin","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","id","this","label","content","concat","pluginProps","mapId","_this$map","_this$map2","map","footerBarApi","tabs","length","footerProps","onCreateContentProps","createTab","_this$map3","removeTab","logger","logTraceCore","AbstractPlugin","_excluded","_excluded2","defaultInput","Input","NativeSelect","inProps","ref","props","useThemeProps","name","className","children","classes","classesProp","IconComponent","ArrowDropDown","A","input","inputProps","other","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","useUtilityClasses","otherClasses","inputComponent","NativeSelectInput","variant","type","undefined","clsx","muiName","getSxClasses","theme","panelHeaders","fontSize","palette","geoViewFontSize","lg","fontWeight","marginBottom","rightPanelContainer","border","primary","main","borderRadius","backgroundColor","common","white","rightPanelBtnHolder","marginTop","boxShadow","timeSliderInstructionsTitle","lineHeight","timeSliderInstructionsBody","TimeSlider","logTraceRender","cgpv","window","config","layerPath","api","react","ui","useState","useRef","useEffect","useCallback","_ui$elements","elements","Grid","Slider","Typography","Checkbox","Tooltip","IconButton","LockIcon","LockOpenIcon","ArrowLeftIcon","PlayArrowIcon","PauseIcon","ArrowRightIcon","SwitchRightIcon","SwitchLeftIcon","useTheme","sxClasses","_useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","playIntervalRef","sliderValueRef","sliderDeltaRef","_useTimeSliderStoreAc","useTimeSliderStoreActions","setTitle","setDefaultValue","setDescription","setValues","setLocked","setReversed","setDelay","setFiltering","displayLanguage","useAppDisplayLanguage","_useTimeSliderLayers$","useTimeSliderLayers","title","description","defaultValue","discreteValues","range","minAndMax","field","fieldAlias","filtering","singleHandle","values","delay","locked","reversed","_config$sliders","logTraceUseEffect","sliderConfig","sliders","find","o","layerPaths","includes","getLocalizedValue","_config$sliders2","Array","isArray","Date","getTime","timeframe","timeStampRange","entry","timeDelta","dayDelta","getDate","yearDelta","getFullYear","timeMarks","interval","Math","round","sliderMarks","i","push","toTimeString","split","toISOString","slice","moveBack","newIndex","currentIndex","indexOf","newPosition","_values","leftHandle","rightHandle","current","moveForward","_values2","returnLockTooltip","utilities","core","getLocalizedMessage","setTimeout","handleSliderChange","newValues","logTraceUseCallback","clearTimeout","handleLabelFormat","theValue","replace","_jsx","_jsxs","style","container","sx","item","xs","component","_objectSpread","paddingLeft","paddingTop","toLocaleDateString","textAlign","marginRight","placement","enterDelay","checked","onChange","event","child","newValue","clearInterval","sliderId","width","color","min","max","marks","step","onChangeCommitted","onValueDisplay","tooltip","tooltipPlacement","onClick","disabled","_values3","FormControl","InputLabel","target","handleTimeChange","px","py","TimeSliderPanel","configObj","useMemo","selectedLayerPath","setSelectedLayerPath","visibleLayers","useMapVisibleLayers","timeSliderLayers","guide","useAppGuide","handleClickLayerList","layer","getFilterInfo","timeSliderLayerInfo","memoLayersList","logTraceUseMemo","filter","layerName","layerFeatures","Box","display","alignContent","height","layerStatus","queryStatus","Layout","onLayerListClicked","layerList","Paper","padding","Markdown","options","wrapper","footerPanel","timeSlider","TimeSliderPlugin","_FooterPlugin","_this","_len","args","_key","_defineProperty","schema","toJsonObject","defaultConfig","en","panel","noLayers","slider","unlockRight","unlockLeft","lockRight","lockLeft","disableFilter","enableFilter","pauseAnimation","playAnimation","back","forward","changeDirection","timeDelay","fr","forEach","obj","temporalDimension","timeDimension","default","unitSymbol","nearestValues","date","createRangeOGC","MapEventProcessor","getMapViewerLayerAPI","geoviewLayer","setTemporalDimension","layerTemporalDimension","icon","TimeSliderIcon","geoviewPlugins","Cast"],"sourceRoot":""}