{"version":3,"file":"corePackages/geoview-time-slider.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/footer-plugin.ts","webpack://geoview-core/../../common/temp/node_modules/.pnpm/@mui+material@5.15.15_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.79_react-dom@18.2.0_react@18.2.0/node_modules/@mui/material/NativeSelect/NativeSelect.js","webpack://geoview-core/../geoview-time-slider/src/time-slider-style.ts","webpack://geoview-core/../geoview-time-slider/src/time-slider.tsx","webpack://geoview-core/../geoview-time-slider/src/time-slider-panel.tsx","webpack://geoview-core/../geoview-time-slider/src/index.tsx"],"sourcesContent":["import { TypeTabs } from '@/ui/tabs/tabs';\r\nimport { AbstractPlugin } from './abstract-plugin';\r\nimport { logger } from '@/core/utils/logger';\r\n\r\n/** ******************************************************************************************************************************\r\n * Footer Plugin abstract class.\r\n */\r\nexport abstract class FooterPlugin extends AbstractPlugin {\r\n  // Store index of tab\r\n  value?: number;\r\n\r\n  // Store the footer props\r\n  footerProps?: TypeTabs;\r\n\r\n  /**\r\n   * Overridable function to create footer props content\r\n   * @returns TypeTabs The footer props content\r\n   */\r\n  onCreateContentProps(): TypeTabs {\r\n    // Override this to create the footer props..\r\n\r\n    // Return dummy content\r\n    return {\r\n      id: 'some-id',\r\n      value: this.value!,\r\n      label: 'Some label',\r\n      content: `<div>Content for Footer plugin on map id ${this.pluginProps.mapId} goes here...</div>`,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Called when a footer plugin is being added\r\n   */\r\n  onAdd(): void {\r\n    // Log\r\n    // No need to log, parent class does it well already via added() function.\r\n\r\n    // Set value to length of tabs(?)\r\n    this.value = this.map()?.footerBarApi.tabs.length;\r\n\r\n    // Create props\r\n    this.footerProps = this.onCreateContentProps();\r\n\r\n    // Create tab with the props\r\n    this.map()?.footerBarApi.createTab(this.footerProps);\r\n  }\r\n\r\n  /**\r\n   * Called when a footer plugin is being removed\r\n   */\r\n  onRemove(): void {\r\n    // Log\r\n    // No need to log, parent class does it well already via removed() function.\r\n\r\n    // Remove the footer tab\r\n    if (this.value) this.map()?.footerBarApi.removeTab(this.footerProps!.id);\r\n  }\r\n\r\n  /**\r\n   * Called when a footer plugin has been selected in the tabs\r\n   */\r\n  onSelected(): void {\r\n    // Log\r\n    logger.logTraceCore('FOOTER-PLUGIN - onSelected');\r\n\r\n    // TODO: Refactor - Move 'onSelected' in AbstractPlugin class so that AppBar can eventually benefit as well?\r\n\r\n    // Nothing else here.. but inherited FooterPlugins might override this method to do stuff when they are selected!\r\n  }\r\n}\r\n","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n  _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n  const {\n      className,\n      children,\n      classes: classesProp = {},\n      IconComponent = ArrowDropDownIcon,\n      input = defaultInput,\n      inputProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n  const classes = useUtilityClasses(ownerState);\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, _extends({\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: _extends({\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined\n      }, inputProps, input ? input.props.inputProps : {}),\n      ref\n    }, other, {\n      className: clsx(classes.root, input.props.className, className)\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;","import { Theme } from '@mui/material/styles';\r\n\r\n// ? I doubt we want to define an explicit type for style properties?\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const getSxClasses = (theme: Theme): any => ({\r\n  panelHeaders: {\r\n    fontSize: theme.palette.geoViewFontSize.lg,\r\n    fontWeight: '600',\r\n    marginBottom: '20px',\r\n  },\r\n  rightPanelBtnHolder: {\r\n    marginTop: '20px',\r\n    marginBottom: '9px',\r\n    boxShadow: '0px 12px 9px -13px #E0E0E0',\r\n  },\r\n  timeSliderInstructionsTitle: {\r\n    fontSize: theme.palette.geoViewFontSize.lg,\r\n    fontWeight: '600',\r\n    lineHeight: '1.5em',\r\n  },\r\n  timeSliderInstructionsBody: {\r\n    fontSize: '1rem',\r\n  },\r\n});\r\n","import { useTheme } from '@mui/material/styles';\r\nimport { FormControl, InputLabel, NativeSelect } from '@mui/material';\r\nimport {\r\n  useTimeSliderLayers,\r\n  useTimeSliderStoreActions,\r\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\r\nimport { getLocalizedValue } from 'geoview-core/src/core/utils/utilities';\r\nimport { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\r\nimport { logger } from 'geoview-core/src/core/utils/logger';\r\nimport { getSxClasses } from './time-slider-style';\r\nimport { ConfigProps } from './time-slider-types';\r\n\r\ninterface TimeSliderProps {\r\n  config: ConfigProps;\r\n  mapId: string;\r\n  layerPath: string;\r\n}\r\n\r\n/**\r\n * Creates a panel with time sliders\r\n *\r\n * @param {TimeSliderProps} props - Time slider properties\r\n * @returns {JSX.Element} the slider panel\r\n */\r\nexport function TimeSlider(props: TimeSliderProps): JSX.Element {\r\n  // Log\r\n  logger.logTraceRender('geoview-time-slider/time-slider', props);\r\n\r\n  const { cgpv } = window;\r\n  const { config, layerPath, mapId } = props;\r\n  const { api, react, ui } = cgpv;\r\n  const { useState, useRef, useEffect, useCallback } = react;\r\n  const {\r\n    Grid,\r\n    Slider,\r\n    Typography,\r\n    Checkbox,\r\n    Tooltip,\r\n    IconButton,\r\n    LockIcon,\r\n    LockOpenIcon,\r\n    ArrowLeftIcon,\r\n    PlayArrowIcon,\r\n    PauseIcon,\r\n    ArrowRightIcon,\r\n    SwitchRightIcon,\r\n    SwitchLeftIcon,\r\n  } = ui.elements;\r\n\r\n  const theme = useTheme();\r\n  const sxClasses = getSxClasses(theme);\r\n\r\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n  const playIntervalRef = useRef<number>();\r\n\r\n  // References for play button\r\n  const sliderValueRef = useRef<number>();\r\n  const sliderDeltaRef = useRef<number>();\r\n\r\n  // Get actions and states from store\r\n  // TODO: evaluate best option to set value by layer path.... trough a getter?\r\n  const { setTitle, setDefaultValue, setDescription, setValues, setLocked, setReversed, setDelay, setFiltering } =\r\n    useTimeSliderStoreActions();\r\n  const displayLanguage = useAppDisplayLanguage();\r\n\r\n  // TODO: check performance as we should technically have one selector by constant\r\n  const {\r\n    title,\r\n    description,\r\n    name,\r\n    defaultValue,\r\n    discreteValues,\r\n    range,\r\n    minAndMax,\r\n    field,\r\n    fieldAlias,\r\n    filtering,\r\n    singleHandle,\r\n    values,\r\n    delay,\r\n    locked,\r\n    reversed,\r\n  } = useTimeSliderLayers()[layerPath];\r\n\r\n  // slider config\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - mount');\r\n\r\n    // TODO: add mechanism to initialize these values during store onInitialize\r\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\r\n    if (title === undefined) setTitle(layerPath, getLocalizedValue(sliderConfig?.title, displayLanguage) || '');\r\n    if (description === undefined) setDescription(layerPath, getLocalizedValue(sliderConfig?.description, displayLanguage) || '');\r\n    if (locked === undefined) setLocked(layerPath, sliderConfig?.locked !== undefined ? sliderConfig?.locked : false);\r\n    if (reversed === undefined) setReversed(layerPath, sliderConfig?.reversed !== undefined ? sliderConfig?.reversed : false);\r\n    if (defaultValue === undefined) setDefaultValue(layerPath, sliderConfig?.defaultValue || '');\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - config layerPath', config, layerPath);\r\n\r\n    const sliderConfig = config?.sliders?.find((o: { layerPaths: string[] }) => o.layerPaths.includes(layerPath));\r\n    if (sliderConfig?.defaultValue) {\r\n      // update values based on slider's default value\r\n      const defaultValueIsArray = Array.isArray(sliderConfig?.defaultValue);\r\n      if (defaultValueIsArray) {\r\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue[0]).getTime(), new Date(sliderConfig?.defaultValue[1]).getTime()]);\r\n      } else if (range.includes(sliderConfig?.defaultValue)) {\r\n        setValues(layerPath, [new Date(sliderConfig?.defaultValue).getTime()]);\r\n      } else {\r\n        setValues(layerPath, [new Date(range[0]).getTime()]);\r\n      }\r\n    }\r\n  }, [config, layerPath, range, setFiltering, setValues]);\r\n\r\n  const timeStampRange = range.map((entry: string | number | Date) => new Date(entry).getTime());\r\n  // Check if range occurs in a single day or year\r\n  const timeDelta = minAndMax[1] - minAndMax[0];\r\n  const dayDelta = new Date(minAndMax[1]).getDate() - new Date(minAndMax[0]).getDate();\r\n  const yearDelta = new Date(minAndMax[1]).getFullYear() - new Date(minAndMax[0]).getFullYear();\r\n  let timeframe: string | undefined;\r\n  if (dayDelta === 0 && timeDelta < 86400000) timeframe = 'day';\r\n  else if (yearDelta === 0) timeframe = 'year';\r\n\r\n  let timeMarks: number[] = [];\r\n  if (range.length < 4 && discreteValues) {\r\n    const interval = (new Date(range[range.length - 1]).getTime() - new Date(range[0]).getTime()) / 4;\r\n    timeMarks = [minAndMax[0], minAndMax[0] + interval, minAndMax[0] + interval * 2, minAndMax[0] + interval * 3, minAndMax[1]];\r\n  } else if (range.length < 6 || singleHandle) timeMarks = timeStampRange;\r\n  else {\r\n    timeMarks = [\r\n      minAndMax[0],\r\n      new Date(range[Math.round(range.length / 4)]).getTime(),\r\n      new Date(range[Math.round(range.length / 2)]).getTime(),\r\n      new Date(range[Math.round((3 * range.length) / 4)]).getTime(),\r\n      minAndMax[1],\r\n    ];\r\n  }\r\n\r\n  const sliderMarks = [];\r\n  for (let i = 0; i < timeMarks.length; i++) {\r\n    sliderMarks.push({\r\n      value: timeMarks[i],\r\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\r\n      label: timeframe\r\n        ? `${timeframe === 'day' ? new Date(timeMarks[i]).toTimeString().split(' ')[0] : new Date(timeMarks[i]).toISOString().slice(5, 10)}`\r\n        : new Date(timeMarks[i]).toISOString().slice(0, 10),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Moves the slider handle(s) back one increment\r\n   */\r\n  function moveBack(): void {\r\n    if (singleHandle && !discreteValues) {\r\n      const currentIndex = timeStampRange.indexOf(values[0]);\r\n      let newIndex: number;\r\n      if (timeStampRange[currentIndex] === minAndMax[0]) newIndex = timeStampRange.length - 1;\r\n      else newIndex = currentIndex - 1;\r\n      setValues(layerPath, [timeStampRange[newIndex]]);\r\n    } else if (singleHandle) {\r\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\r\n      const newPosition = values[0] - interval < minAndMax[0] ? minAndMax[1] : values[0] - interval;\r\n      setValues(layerPath, [newPosition]);\r\n    } else {\r\n      let [leftHandle, rightHandle] = values;\r\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\r\n      if (!sliderDeltaRef.current) {\r\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\r\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\r\n          setValues(layerPath, [rightHandle - sliderDeltaRef.current, rightHandle]);\r\n          return;\r\n        }\r\n        sliderDeltaRef.current = rightHandle - leftHandle;\r\n      }\r\n      // Check for edge cases and then set new slider values\r\n      if (locked && reversed) {\r\n        if (leftHandle === minAndMax[0]) leftHandle = rightHandle;\r\n        leftHandle -= sliderDeltaRef.current;\r\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\r\n      } else if (locked) {\r\n        rightHandle -= sliderDeltaRef.current!;\r\n        if (rightHandle < leftHandle) rightHandle = leftHandle;\r\n        if (rightHandle === leftHandle) [, rightHandle] = minAndMax;\r\n      } else {\r\n        if (rightHandle > sliderValueRef.current! && leftHandle === sliderValueRef.current) rightHandle = sliderValueRef.current;\r\n        else rightHandle -= sliderDeltaRef.current!;\r\n        if (rightHandle <= minAndMax[0]) [, rightHandle] = minAndMax;\r\n        leftHandle = rightHandle - sliderDeltaRef.current!;\r\n        if (leftHandle < minAndMax[0]) [leftHandle] = minAndMax;\r\n        if (leftHandle < sliderValueRef.current! && rightHandle > sliderValueRef.current!) leftHandle = sliderValueRef.current as number;\r\n      }\r\n      setValues(layerPath, [leftHandle, rightHandle]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider handle(s) forward one increment\r\n   */\r\n  function moveForward(): void {\r\n    if (singleHandle && !discreteValues) {\r\n      const currentIndex = timeStampRange.indexOf(values[0]);\r\n      let newIndex: number;\r\n      if (timeStampRange[currentIndex] === minAndMax[1]) newIndex = 0;\r\n      else newIndex = currentIndex + 1;\r\n      setValues(layerPath, [timeStampRange[newIndex]]);\r\n    } else if (singleHandle) {\r\n      const interval = (minAndMax[1] - minAndMax[0]) / 20;\r\n      const newPosition = values[0] + interval > minAndMax[1] ? minAndMax[0] : values[0] + interval;\r\n      setValues(layerPath, [newPosition]);\r\n    } else {\r\n      let [leftHandle, rightHandle] = values;\r\n      // If the current distance between slider handles is more than 1/5th of the range, reduce the difference to 1/5th range\r\n      if (!sliderDeltaRef.current) {\r\n        if (rightHandle - leftHandle > (minAndMax[1] - minAndMax[0]) / 5) {\r\n          sliderDeltaRef.current = (minAndMax[1] - minAndMax[0]) / 5;\r\n          setValues(layerPath, [leftHandle, leftHandle + sliderDeltaRef.current]);\r\n          return;\r\n        }\r\n        sliderDeltaRef.current = rightHandle - leftHandle;\r\n      }\r\n      // Check for edge cases and then set new slider values\r\n      if (locked && reversed) {\r\n        leftHandle += sliderDeltaRef.current!;\r\n        if (leftHandle >= rightHandle) [leftHandle] = minAndMax;\r\n      } else if (locked) {\r\n        if (rightHandle === minAndMax[1]) rightHandle = leftHandle;\r\n        rightHandle += sliderDeltaRef.current!;\r\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\r\n      } else {\r\n        if (leftHandle < sliderValueRef.current! && rightHandle === sliderValueRef.current) leftHandle = sliderValueRef.current;\r\n        else leftHandle += sliderDeltaRef.current!;\r\n        if (leftHandle >= minAndMax[1]) [leftHandle] = minAndMax;\r\n        rightHandle = leftHandle + sliderDeltaRef.current!;\r\n        if (rightHandle > minAndMax[1]) [, rightHandle] = minAndMax;\r\n        if (rightHandle > sliderValueRef.current! && leftHandle < sliderValueRef.current!) rightHandle = sliderValueRef.current as number;\r\n      }\r\n      setValues(layerPath, [leftHandle, rightHandle]);\r\n    }\r\n  }\r\n\r\n  // #region USE EFFECT\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - values filtering', values, filtering);\r\n\r\n    // If slider cycle is active, pause before advancing to next increment\r\n    if (isPlaying) {\r\n      if (reversed) playIntervalRef.current = window.setTimeout(() => moveBack(), delay);\r\n      else playIntervalRef.current = window.setTimeout(() => moveForward(), delay);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [values, filtering, reversed, locked]);\r\n\r\n  // When slider cycle is activated, advance to first increment without delay\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER - isPlaying', isPlaying);\r\n\r\n    if (isPlaying) {\r\n      if (reversed) moveBack();\r\n      else moveForward();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isPlaying]);\r\n  // #endregion\r\n\r\n  // #region HANDLE FUNCTIONS\r\n  function handleBack(): void {\r\n    sliderValueRef.current = reversed ? values[1] : values[0];\r\n    moveBack();\r\n  }\r\n\r\n  function handleForward(): void {\r\n    [sliderValueRef.current] = values;\r\n    moveForward();\r\n  }\r\n\r\n  function handleLock(): void {\r\n    clearTimeout(playIntervalRef.current);\r\n    setLocked(layerPath, !locked);\r\n  }\r\n\r\n  function handlePlay(): void {\r\n    clearTimeout(playIntervalRef.current);\r\n    sliderValueRef.current = reversed ? values[1] : values[0];\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function handleReverse(): void {\r\n    clearTimeout(playIntervalRef.current);\r\n    setReversed(layerPath, !reversed);\r\n    if (isPlaying) {\r\n      if (reversed) moveBack();\r\n      else moveForward();\r\n    }\r\n  }\r\n\r\n  function handleTimeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\r\n    setDelay(layerPath, event.target.value as unknown as number);\r\n  }\r\n\r\n  function handleCheckbox(newValue: boolean): void {\r\n    setFiltering(layerPath, newValue);\r\n    if (!newValue) {\r\n      clearInterval(playIntervalRef.current);\r\n      setIsPlaying(false);\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  function returnLockTooltip(): string {\r\n    if (reversed) {\r\n      const text = locked\r\n        ? api.utilities.core.getLocalizedMessage('timeSlider.slider.unlockRight', displayLanguage)\r\n        : api.utilities.core.getLocalizedMessage('timeSlider.slider.lockRight', displayLanguage);\r\n      return text;\r\n    }\r\n    const text = locked\r\n      ? api.utilities.core.getLocalizedMessage('timeSlider.slider.unlockLeft', displayLanguage)\r\n      : api.utilities.core.getLocalizedMessage('timeSlider.slider.lockLeft', displayLanguage);\r\n    return text;\r\n  }\r\n\r\n  const handleSliderChange = useCallback(\r\n    (newValues: number | number[]): void => {\r\n      // Log\r\n      logger.logTraceUseCallback('TIME-SLIDER - handleSliderChange', layerPath);\r\n\r\n      clearTimeout(playIntervalRef.current);\r\n      setIsPlaying(false);\r\n      sliderDeltaRef.current = undefined;\r\n      setValues(layerPath, newValues as number[]);\r\n    },\r\n    [layerPath, setValues]\r\n  );\r\n\r\n  /**\r\n   * Create labels for values on slider\r\n   *\r\n   * @param {number} theValue - The value of the slider handle\r\n   * @returns {string} A formatted time string or ISO date string\r\n   */\r\n  const handleLabelFormat = useCallback(\r\n    (theValue: number): string => {\r\n      // Log\r\n      logger.logTraceUseCallback('TIME-SLIDER - handleLabelFormat', timeframe);\r\n\r\n      // If timeframe is a single day, use time. If it is a single year, drop year from dates.\r\n      if (timeframe === 'day') return new Date(theValue).toTimeString().split(' ')[0].replace(/^0/, '');\r\n      if (timeframe === 'year') return new Date(theValue).toISOString().slice(5, 10);\r\n      return new Date(theValue).toISOString().slice(0, 10);\r\n    },\r\n    [timeframe]\r\n  );\r\n\r\n  return (\r\n    <Grid>\r\n      <div>\r\n        <Grid container sx={sxClasses.rightPanelBtnHolder}>\r\n          <Grid item xs={9}>\r\n            <Typography component=\"div\" sx={{ ...sxClasses.panelHeaders, paddingLeft: '20px', paddingTop: '10px' }}>\r\n              {`${title || name}`}\r\n              {timeframe !== undefined &&\r\n                ` (${timeframe === 'day' ? new Date(defaultValue).toLocaleDateString() : new Date(defaultValue).getFullYear()})`}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <div style={{ textAlign: 'right', marginRight: '25px' }}>\r\n              <Tooltip\r\n                title={\r\n                  filtering\r\n                    ? api.utilities.core.getLocalizedMessage('timeSlider.slider.disableFilter', displayLanguage)\r\n                    : api.utilities.core.getLocalizedMessage('timeSlider.slider.enableFilter', displayLanguage)\r\n                }\r\n                placement=\"top\"\r\n                enterDelay={1000}\r\n              >\r\n                <Checkbox checked={filtering} onChange={(event: never, child: boolean): void => handleCheckbox(child)} />\r\n              </Tooltip>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\r\n            <Slider\r\n              key={values[1] ? values[1] + values[0] : values[0]}\r\n              sliderId={layerPath}\r\n              mapId={mapId}\r\n              style={{ width: '80%', color: 'primary' }}\r\n              min={minAndMax[0]}\r\n              max={minAndMax[1]}\r\n              value={values}\r\n              marks={sliderMarks}\r\n              step={!discreteValues ? null : 0.1}\r\n              onChangeCommitted={handleSliderChange}\r\n              onValueDisplay={handleLabelFormat}\r\n            />\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div style={{ textAlign: 'center', paddingTop: '20px' }}>\r\n            {!singleHandle && (\r\n              <IconButton\r\n                className=\"style1\"\r\n                aria-label={returnLockTooltip()}\r\n                tooltip={returnLockTooltip()}\r\n                tooltipPlacement=\"top\"\r\n                onClick={() => handleLock()}\r\n              >\r\n                {locked ? <LockIcon /> : <LockOpenIcon />}\r\n              </IconButton>\r\n            )}\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.back', displayLanguage) as string}\r\n              tooltip=\"timeSlider.slider.back\"\r\n              tooltipPlacement=\"top\"\r\n              disabled={isPlaying || !filtering}\r\n              onClick={() => handleBack()}\r\n            >\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={\r\n                isPlaying\r\n                  ? (api.utilities.core.getLocalizedMessage('timeSlider.slider.pauseAnimation', displayLanguage) as string)\r\n                  : (api.utilities.core.getLocalizedMessage('timeSlider.slider.playAnimation', displayLanguage) as string)\r\n              }\r\n              tooltip={isPlaying ? 'timeSlider.slider.pauseAnimation' : 'timeSlider.slider.playAnimation'}\r\n              tooltipPlacement=\"top\"\r\n              disabled={!filtering}\r\n              onClick={() => handlePlay()}\r\n            >\r\n              {!isPlaying ? <PlayArrowIcon /> : <PauseIcon />}\r\n            </IconButton>\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.forward', displayLanguage) as string}\r\n              tooltip=\"timeSlider.slider.forward\"\r\n              tooltipPlacement=\"top\"\r\n              disabled={isPlaying || !filtering}\r\n              onClick={() => handleForward()}\r\n            >\r\n              <ArrowRightIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              className=\"style1\"\r\n              aria-label={api.utilities.core.getLocalizedMessage('timeSlider.slider.changeDirection', displayLanguage) as string}\r\n              tooltip=\"timeSlider.slider.changeDirection\"\r\n              tooltipPlacement=\"top\"\r\n              onClick={() => handleReverse()}\r\n            >\r\n              {reversed ? <SwitchRightIcon /> : <SwitchLeftIcon />}\r\n            </IconButton>\r\n            <FormControl sx={{ width: '150px' }}>\r\n              <InputLabel variant=\"standard\">\r\n                {api.utilities.core.getLocalizedMessage('timeSlider.slider.timeDelay', displayLanguage)}\r\n              </InputLabel>\r\n              <NativeSelect\r\n                defaultValue={delay}\r\n                inputProps={{\r\n                  name: 'timeDelay',\r\n                  onChange: (event) => handleTimeChange(event),\r\n                }}\r\n              >\r\n                <option value={500}>0.5s</option>\r\n                <option value={750}>0.75s</option>\r\n                <option value={1000}>1.0s</option>\r\n                <option value={1500}>1.5s</option>\r\n                <option value={2000}>2.0s</option>\r\n                <option value={3000}>3.0s</option>\r\n                <option value={5000}>5.0s</option>\r\n              </NativeSelect>\r\n            </FormControl>\r\n          </div>\r\n        </Grid>\r\n        {description && (\r\n          <Grid item xs={12}>\r\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\r\n              {description}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        {fieldAlias && (\r\n          <Grid item xs={12}>\r\n            <Typography component=\"div\" sx={{ px: '20px', py: '5px' }}>\r\n              {`${fieldAlias} (${field})`}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n","import { TypeWindow } from 'geoview-core/src/core/types/global-types';\r\nimport { LayerListEntry, Layout } from 'geoview-core/src/core/components/common';\r\nimport {\r\n  TypeTimeSliderValues,\r\n  useTimeSliderLayers,\r\n} from 'geoview-core/src/core/stores/store-interface-and-intial-values/time-slider-state';\r\nimport { useMapVisibleLayers } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\r\nimport { useAppGuide } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\r\nimport { Box } from 'geoview-core/src/ui';\r\nimport { logger } from 'geoview-core/src/core/utils/logger';\r\nimport Markdown from 'markdown-to-jsx';\r\n\r\nimport { ReactNode } from 'react';\r\nimport { TimeSlider } from './time-slider';\r\nimport { ConfigProps } from './time-slider-types';\r\n\r\ninterface TypeTimeSliderProps {\r\n  configObj: ConfigProps;\r\n  mapId: string;\r\n}\r\n\r\n/**\r\n * Time slider tab\r\n *\r\n * @param {TypeTimeSliderProps} props The properties passed to slider\r\n * @returns {JSX.Element} the time slider tab\r\n */\r\nexport function TimeSliderPanel(props: TypeTimeSliderProps): JSX.Element {\r\n  const { mapId, configObj } = props;\r\n  const { cgpv } = window as TypeWindow;\r\n  const { react } = cgpv;\r\n  const { useState, useCallback, useMemo, useEffect } = react;\r\n\r\n  // internal state\r\n  const [selectedLayerPath, setSelectedLayerPath] = useState<string>();\r\n\r\n  // get values from store\r\n  const visibleLayers = useMapVisibleLayers() as string[];\r\n  const timeSliderLayers = useTimeSliderLayers();\r\n  const guide = useAppGuide();\r\n\r\n  /**\r\n   * handle Layer list when clicked on each layer.\r\n   * @param {LayerListEntry} layer layer clicked by the user.\r\n   */\r\n  const handleClickLayerList = useCallback((layer: LayerListEntry) => {\r\n    // Log\r\n    logger.logTraceUseCallback('TIME-SLIDER-PANEL - handleLayerList');\r\n\r\n    // Set the layer path\r\n    setSelectedLayerPath(layer.layerPath);\r\n  }, []);\r\n\r\n  /**\r\n   * Get dates for current filters\r\n   * @param {TypeTimeSliderValuesListEntry} timeSliderLayerInfo Time slider layer info.\r\n   */\r\n  const getFilterInfo = (timeSliderLayerInfo: TypeTimeSliderValues): string | null => {\r\n    if (timeSliderLayerInfo.filtering)\r\n      return timeSliderLayerInfo.values.length === 1\r\n        ? new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)\r\n        : `${new Date(timeSliderLayerInfo.values[0]).toISOString().slice(0, 19)} - ${new Date(timeSliderLayerInfo.values[1])\r\n            .toISOString()\r\n            .slice(0, 19)}`;\r\n    return null;\r\n  };\r\n\r\n  // Reacts when the array of layer data updates\r\n  const memoLayersList = useMemo(() => {\r\n    // Log\r\n    logger.logTraceUseMemo('TIME-SLIDER-PANEL - memoLayersList', timeSliderLayers);\r\n\r\n    /**\r\n     * Create layer tooltip\r\n     * @param {TypeTimeSliderValues} timeSliderLayerInfo Time slider layer info.\r\n     * @returns\r\n     */\r\n    const getLayerTooltip = (timeSliderLayerInfo: TypeTimeSliderValues): ReactNode => {\r\n      return (\r\n        <Box sx={{ display: 'flex', alignContent: 'center', '& svg ': { width: '0.75em', height: '0.75em' } }}>\r\n          {timeSliderLayerInfo.name}\r\n          {timeSliderLayerInfo.filtering && `: ${getFilterInfo(timeSliderLayerInfo)}`}\r\n        </Box>\r\n      );\r\n    };\r\n\r\n    // Return the layers\r\n    return visibleLayers\r\n      .map((layerPath) => {\r\n        return { layerPath, timeSliderLayerInfo: timeSliderLayers[layerPath!] };\r\n      })\r\n      .filter((layer) => layer && layer.timeSliderLayerInfo)\r\n      .map((layer) => {\r\n        return {\r\n          layerName: layer.timeSliderLayerInfo.name,\r\n          layerPath: layer.layerPath,\r\n          layerFeatures: getFilterInfo(layer.timeSliderLayerInfo),\r\n          tooltip: getLayerTooltip(layer.timeSliderLayerInfo),\r\n          layerStatus: 'loaded',\r\n          queryStatus: 'processed',\r\n        } as LayerListEntry;\r\n      });\r\n  }, [timeSliderLayers, visibleLayers]);\r\n\r\n  useEffect(() => {\r\n    // Log\r\n    logger.logTraceUseEffect('TIME-SLIDER-PANEL - memoLayersList', memoLayersList, selectedLayerPath);\r\n\r\n    // If the selected layer path isn't in the list of layers possible, clear it\r\n    if (selectedLayerPath && !memoLayersList.map((layer: { layerPath: string }) => layer.layerPath).includes(selectedLayerPath)) {\r\n      // Clear the selected layer path\r\n      setSelectedLayerPath('');\r\n    }\r\n  }, [memoLayersList, selectedLayerPath]);\r\n\r\n  return (\r\n    <Layout selectedLayerPath={selectedLayerPath} onLayerListClicked={handleClickLayerList} layerList={memoLayersList}>\r\n      {selectedLayerPath && <TimeSlider mapId={mapId} config={configObj} layerPath={selectedLayerPath} key={selectedLayerPath} />}\r\n      {!selectedLayerPath && (\r\n        <Box className=\"guideBox\">\r\n          <Markdown options={{ wrapper: 'article' }}>{guide!.footerPanel!.children!.timeSlider!.content}</Markdown>\r\n        </Box>\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n","import { TypeJsonObject, toJsonObject, Cast, AnySchemaObject } from 'geoview-core/src/core/types/global-types';\r\nimport { TimeDimension } from 'geoview-core/src/core/utils/date-mgt';\r\nimport { TypeTabs } from 'geoview-core/src/ui/tabs/tabs';\r\nimport { api } from 'geoview-core';\r\nimport { TimeSliderIcon } from 'geoview-core/src/ui';\r\nimport { FooterPlugin } from 'geoview-core/src/api/plugin/footer-plugin';\r\nimport { MapEventProcessor } from 'geoview-core/src/api/event-processors/event-processor-children/map-event-processor';\r\n\r\nimport { TimeSliderPanel } from './time-slider-panel';\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-time-slider-panel.json';\r\nimport { SliderProps } from './time-slider-types';\r\n\r\nexport interface LayerProps {\r\n  layerPath: string;\r\n  layerName: string;\r\n}\r\nexport interface SliderFilterProps {\r\n  title: string;\r\n  description: string;\r\n  range: string[];\r\n  defaultValue: string;\r\n  minAndMax: number[];\r\n  field: string;\r\n  singleHandle: boolean;\r\n  values: number[];\r\n  filtering: boolean;\r\n  delay: number;\r\n  locked: boolean;\r\n  reversed: boolean;\r\n}\r\n\r\n/**\r\n * Time slider plugin\r\n */\r\nclass TimeSliderPlugin extends FooterPlugin {\r\n  /**\r\n   * Return the schema that is defined for this package\r\n   *\r\n   * @returns {AnySchemaObject} returns the schema for this package\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * Translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      timeSlider: {\r\n        title: 'Time Slider',\r\n        panel: {\r\n          noLayers: 'No layers with temporal data',\r\n        },\r\n        slider: {\r\n          unlockRight: 'Unlock right handle',\r\n          unlockLeft: 'Unlock left handle',\r\n          lockRight: 'Lock right handle',\r\n          lockLeft: 'Lock left handle',\r\n          disableFilter: 'Disable Filtering',\r\n          enableFilter: 'Enable Filtering',\r\n          pauseAnimation: 'Pause animation',\r\n          playAnimation: 'Play animation',\r\n          back: 'Back',\r\n          forward: 'Forward',\r\n          changeDirection: 'Change animation direction',\r\n          timeDelay: 'Animation time delay',\r\n        },\r\n      },\r\n    },\r\n    fr: {\r\n      timeSlider: {\r\n        title: 'Curseur Temporel',\r\n        panel: {\r\n          noLayers: 'Pas de couches avec des données temporelles',\r\n        },\r\n        slider: {\r\n          unlockRight: 'Déverrouiller la poignée droite',\r\n          unlockLeft: 'Déverrouiller la poignée gauche',\r\n          lockRight: 'Verrouiller la poignée droite',\r\n          lockLeft: 'Verrouiller la poignée gauche',\r\n          disableFilter: 'Désactiver le filtrage',\r\n          enableFilter: 'Activer le filtrage',\r\n          pauseAnimation: `Pause de l'animation`,\r\n          playAnimation: `Jouer l'animation`,\r\n          back: 'Retour',\r\n          forward: 'En avant',\r\n          changeDirection: `Changer la direction de l'animation`,\r\n          timeDelay: `Délai d'animation`,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  onCreateContentProps = (): TypeTabs => {\r\n    // Set custom time dimension if applicable\r\n    this.configObj.sliders.forEach((obj: SliderProps) => {\r\n      if (obj.temporalDimension) {\r\n        const timeDimension: TimeDimension = {\r\n          field: obj.temporalDimension.field,\r\n          default: obj.temporalDimension.default,\r\n          unitSymbol: obj.temporalDimension.unitSymbol,\r\n          nearestValues: obj.temporalDimension.nearestValues,\r\n          range: api.utilities.date.createRangeOGC(obj.temporalDimension.range as unknown as string),\r\n          singleHandle: obj.temporalDimension.singleHandle,\r\n        };\r\n\r\n        // TODO: Check concurrency between plugin creation and setting temporal dimensions\r\n        // TO.DOCONT: I doubt that this (and few lines below) is a good place to set the temporal dimension on layers that might be\r\n        // TO.DOCONT: loading their metadata (and setting their own temporal dimension) at the same time as the plugin gets created.\r\n        // TO.DOCONT: Whichever call comes last will be overriding the setTemporalDimension set by the other concurrent task.\r\n        // TO.DOCONT: Fortunately, the time-slider plugin gets initialized 'late' as it's currently part of a footer, so they, most of the time,\r\n        // TO.DOCONT: always overwrite the config from the layer metadata which is probably what we want here.\r\n        // TP.DOCONT: It's risky, because if the Plugin gets created before the layer metadata is fully fetched and read,\r\n        // TO.DOCONT: the later will override the plugin settings (can be tested by adding fake delays).\r\n        // TO.DOCONT: If this Plugin has temporal dimension settings, for various layers, those should be set in synch with the layers\r\n        // TO.DOCONT: using event listeners, not at Plugin creation.\r\n        MapEventProcessor.getMapViewerLayerAPI(this.pluginProps.mapId)\r\n          .geoviewLayer(obj.layerPaths[0])\r\n          .setTemporalDimension(obj.layerPaths[0], timeDimension);\r\n      }\r\n\r\n      // Set override default value under time dimension if applicable\r\n      if (obj.defaultValue) {\r\n        const layerPath = obj.layerPaths[0];\r\n        const timeDimension = MapEventProcessor.getMapViewerLayerAPI(this.pluginProps.mapId).geoviewLayer(layerPath).layerTemporalDimension[\r\n          layerPath\r\n        ];\r\n        MapEventProcessor.getMapViewerLayerAPI(this.pluginProps.mapId)\r\n          .geoviewLayer(layerPath)\r\n          .setTemporalDimension(layerPath, {\r\n            ...timeDimension,\r\n            default: obj.defaultValue,\r\n          });\r\n      }\r\n    });\r\n\r\n    return {\r\n      id: 'time-slider',\r\n      value: this.value!,\r\n      label: 'timeSlider.title',\r\n      icon: <TimeSliderIcon />,\r\n      content: <TimeSliderPanel mapId={this.pluginProps.mapId} configObj={this.configObj} />,\r\n    };\r\n  };\r\n}\r\n\r\nexport default TimeSliderPlugin;\r\n\r\n// Keep a reference to the Time Slider Plugin as part of the geoviewPlugins property stored in the window object\r\nwindow.geoviewPlugins = window.geoviewPlugins || {};\r\nwindow.geoviewPlugins['time-slider'] = Cast<TimeSliderPlugin>(TimeSliderPlugin);\r\n"],"names":["FooterPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_inherits","_createClass","key","value","id","this","label","content","pluginProps","mapId","_this$map","_this$map2","map","footerBarApi","tabs","footerProps","onCreateContentProps","createTab","_this$map3","removeTab","logger","logTraceCore","AbstractPlugin","_excluded","_excluded2","defaultInput","Input","NativeSelect","inProps","ref","props","useThemeProps","name","className","children","classes","classesProp","IconComponent","ArrowDropDown","A","input","inputProps","other","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","useUtilityClasses","otherClasses","inputComponent","NativeSelectInput","variant","type","undefined","clsx","muiName","getSxClasses","theme","panelHeaders","fontSize","palette","geoViewFontSize","lg","fontWeight","marginBottom","rightPanelBtnHolder","marginTop","boxShadow","timeSliderInstructionsTitle","lineHeight","timeSliderInstructionsBody","TimeSlider","logTraceRender","cgpv","window","config","layerPath","api","react","ui","useState","useRef","useEffect","useCallback","_ui$elements","elements","Grid","Slider","Typography","Checkbox","Tooltip","IconButton","LockIcon","LockOpenIcon","ArrowLeftIcon","PlayArrowIcon","PauseIcon","ArrowRightIcon","SwitchRightIcon","SwitchLeftIcon","useTheme","sxClasses","_useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","playIntervalRef","sliderValueRef","sliderDeltaRef","_useTimeSliderStoreAc","useTimeSliderStoreActions","setTitle","setDefaultValue","setDescription","setValues","setLocked","setReversed","setDelay","setFiltering","displayLanguage","useAppDisplayLanguage","_useTimeSliderLayers$","useTimeSliderLayers","title","description","defaultValue","discreteValues","range","minAndMax","field","fieldAlias","filtering","singleHandle","values","delay","locked","reversed","_config$sliders","logTraceUseEffect","sliderConfig","sliders","find","o","layerPaths","includes","getLocalizedValue","_config$sliders2","isArray","Date","getTime","timeframe","timeStampRange","entry","timeDelta","dayDelta","getDate","yearDelta","getFullYear","timeMarks","interval","Math","round","sliderMarks","i","push","toTimeString","split","toISOString","slice","moveBack","newIndex","currentIndex","indexOf","newPosition","_values","leftHandle","rightHandle","current","moveForward","_values2","returnLockTooltip","utilities","core","getLocalizedMessage","setTimeout","handleSliderChange","newValues","logTraceUseCallback","clearTimeout","handleLabelFormat","theValue","replace","_jsx","_jsxs","container","sx","item","xs","component","_objectSpread","paddingLeft","paddingTop","toLocaleDateString","style","textAlign","marginRight","placement","enterDelay","checked","onChange","event","child","newValue","clearInterval","sliderId","width","color","min","max","marks","step","onChangeCommitted","onValueDisplay","tooltip","tooltipPlacement","onClick","disabled","_values3","FormControl","InputLabel","target","handleTimeChange","px","py","TimeSliderPanel","configObj","useMemo","selectedLayerPath","setSelectedLayerPath","visibleLayers","useMapVisibleLayers","timeSliderLayers","guide","useAppGuide","handleClickLayerList","layer","getFilterInfo","timeSliderLayerInfo","memoLayersList","logTraceUseMemo","filter","layerName","layerFeatures","Box","display","alignContent","height","layerStatus","queryStatus","Layout","onLayerListClicked","layerList","Markdown","options","wrapper","footerPanel","timeSlider","TimeSliderPlugin","_FooterPlugin","schema","toJsonObject","defaultConfig","en","panel","noLayers","slider","unlockRight","unlockLeft","lockRight","lockLeft","disableFilter","enableFilter","pauseAnimation","playAnimation","back","forward","changeDirection","timeDelay","fr","forEach","obj","temporalDimension","timeDimension","default","unitSymbol","nearestValues","date","createRangeOGC","MapEventProcessor","getMapViewerLayerAPI","geoviewLayer","setTemporalDimension","layerTemporalDimension","icon","TimeSliderIcon","geoviewPlugins","Cast"],"sourceRoot":""}