{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":";mNA2BO,SAASA,IA0Ed,OAAOC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,+BACd,C,gsCCrFA,IAAMC,EAAIC,OAKJC,EAAa,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,EAAAC,EAAAJ,GAIjB,SAAAA,EAAYK,EAAkBC,GAA0B,IAAAC,EAE9B,OAF8BC,EAAAA,EAAAA,GAAA,KAAAR,GACtDO,EAAAJ,EAAAM,KAAA,KAAMJ,EAAUC,IAIlBI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,UAKS,kBAAuBK,CAAM,KAEtCF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,iBAKgB,kBAAsBM,EAAAA,EAAAA,KAAaC,EAAc,KAEjEJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,gBAGeM,EAAAA,EAAAA,KAAa,CAC1BE,GAAI,CACFC,aAAc,UACdC,cAAe,gBACfC,UAAW,qCACXC,YAAa,QAEfC,GAAI,CACFJ,aAAc,UACdC,cAAe,iBACfC,UAAW,kDACXC,YAAa,aA/BfZ,EAAKc,YAAc,KAAKd,CAC1B,CAwFC,OAxFAe,EAAAA,EAAAA,GAAAtB,EAAA,EAAAuB,IAAA,QAAAC,MAqCD,WAAc,IAAAC,EACJC,EAAWC,KAAwBC,YAAnCF,MAGAG,EAAS/B,EAAT+B,KAGAC,EAAYD,EAAZC,IACAC,EADYF,EAAPG,GACcC,SAAnBF,YACAG,EAAoBJ,EAAIK,KAAKT,GAA7BQ,gBAGFE,EAA8B,CAClCC,GAAI,qBACJC,QAASX,KAAKY,aAAaL,GAAiBlB,aAC5CwB,iBAAkB,QAClB3C,UAAUD,EAAAA,EAAAA,KAACmC,EAAW,IACtBU,SAAS,GAILC,EAAwB,CAC5BC,MAAOhB,KAAKY,aAAaL,GAAiBlB,aAC1C4B,KAAM,wCACNC,MAAO,KAITlB,KAAKN,YAAcS,EAAIK,KAAKT,GAAOoB,cAAcC,kBAAkBX,EAAQM,EAAO,MAIlE,QAAhBjB,EAAAE,KAAKN,mBAAW,IAAAI,GAAO,QAAPA,EAAhBA,EAAkBiB,aAAK,IAAAjB,GAAvBA,EAAyBuB,eAAcpD,EAAAA,EAAAA,KAACD,EAAW,IAErD,GAEA,CAAA4B,IAAA,UAAAC,MAGA,WACE,IAAQE,EAAWC,KAAwBC,YAAnCF,MAMAI,EAHShC,EAAT+B,KAGAC,IAEJH,KAAKN,aACPS,EAAIK,KAAKT,GAAiBoB,cAAcG,kBAAkBtB,KAAKN,YAAY6B,cAE/E,KAAClD,CAAA,CA/FgB,CAASmD,EAAAA,KAoG5BrD,EAAEsD,QAAUtD,EAAEsD,SAAW,CAAC,EAC1BtD,EAAEsD,QAAQ,iBAAmBpD,C","sources":["webpack://geoview-core/../geoview-details-panel/src/details-item.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["// /* eslint-disable react/require-default-props */\r\n// import type React from 'react';\r\n// import { PayloadBaseClass } from 'geoview-core/src/api/events/payloads';\r\n// import {\r\n//   TypeAllQueriesDonePayload,\r\n//   MapMouseEventPayload,\r\n//   TypeWindow,\r\n//   payloadIsAMapMouseEvent,\r\n//   payloadIsAllQueriesDone,\r\n//   TypeArrayOfLayerData,\r\n//   getLocalizedValue,\r\n//   Coordinate,\r\n// } from 'geoview-core';\r\n\r\n// interface Props {\r\n//   mapId: string;\r\n//   buttonId?: string;\r\n// }\r\n\r\n// const w = window as TypeWindow;\r\n\r\n// /**\r\n//  * Create an element that displays the details component\r\n//  *\r\n//  * @returns {JSX.Element} created details component\r\n//  */\r\n// TODO line 28 is a duplication of line 29, but without the props as we don't need them for now to bypass lint error\r\nexport function DetailsItem(): JSX.Element {\r\n  // export function DetailsItem({ mapId, buttonId }: Props): JSX.Element {\r\n  //   const { cgpv } = w;\r\n  //   const { api, react } = cgpv;\r\n\r\n  //   const { useState, useEffect } = react;\r\n\r\n  //   const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\r\n  //   // eslint-disable-next-line @typescript-eslint/ban-types\r\n  //   const [list, setList] = useState<React.ReactElement>();\r\n  //   const [LngLat, setLngLat] = useState<Coordinate>([]);\r\n  //   const [handlerName, setHandlerName] = useState<string | null>(null);\r\n\r\n  //   const panel = api.maps[mapId].appBarButtons.getAppBarButtonPanelById(buttonId === undefined ? '' : buttonId)?.panel;\r\n\r\n  //   const allQueriesDoneListenerFunction = (payload: PayloadBaseClass) => {\r\n  //     if (payloadIsAllQueriesDone(payload)) {\r\n  //       const { resultSets } = payload as TypeAllQueriesDonePayload;\r\n  //       const newDetails: TypeArrayOfLayerData = [];\r\n  //       Object.keys(resultSets).forEach((layerPath) => {\r\n  //         const layerName = getLocalizedValue(api.maps[mapId].layer.registeredLayers[layerPath].layerName, mapId)!;\r\n  //         const features = resultSets[layerPath]!.data;\r\n  //         if (features.length > 0) {\r\n  //           newDetails.push({ layerPath, layerName, features });\r\n  //         }\r\n  //       });\r\n  //       if (newDetails.length > 0) {\r\n  //         setDetails(newDetails);\r\n  //         // open the details panel\r\n  //         panel?.open();\r\n  //       } else {\r\n  //         setDetails([]);\r\n  //       }\r\n  //     } else {\r\n  //       setDetails([]);\r\n  //     }\r\n  //   };\r\n\r\n  //   const eventMapSingleClickListenerFunction = (payload: PayloadBaseClass) => {\r\n  //     if (payloadIsAMapMouseEvent(payload)) {\r\n  //       const { coordinates } = payload as MapMouseEventPayload;\r\n  //       setHandlerName(payload.handlerName);\r\n  //       setLngLat(coordinates.lnglat);\r\n  //     } else {\r\n  //       setLngLat([]);\r\n  //     }\r\n  //   };\r\n\r\n  //   useEffect(() => {\r\n  //     // create the listener to return the details\r\n  //     api.event.on(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, allQueriesDoneListenerFunction, `${mapId}/FeatureInfoLayerSet`);\r\n  //     // get click info.\r\n  //     api.event.on(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, eventMapSingleClickListenerFunction, mapId);\r\n\r\n  //     return () => {\r\n  //       api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId, allQueriesDoneListenerFunction);\r\n  //       api.event.off(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, mapId, eventMapSingleClickListenerFunction);\r\n  //     };\r\n  //     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  //   }, []);\r\n\r\n  //   useEffect(() => {\r\n  //     setList(\r\n  //       api.maps[mapId].details.createDetails(mapId, details, {\r\n  //         mapId,\r\n  //         location: LngLat,\r\n  //         backgroundStyle: 'dark',\r\n  //         singleColumn: true,\r\n  //         handlerName,\r\n  //       })\r\n  //     );\r\n  //     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  //   }, [details, LngLat]);\r\n\r\n  return <div>This feature is deprecated.</div>;\r\n}\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  AbstractPlugin,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeWindow,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeIconButtonProps,\r\n  TypePanelProps,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\nimport { DetailsItem } from './details-item';\r\n\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-details-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass DetailsPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the schema that is defined for this package\r\n   *\r\n   * @returns {AnySchemaObject} returns the schema for this package\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      detailsPanel: 'Details',\r\n      nothing_found: 'Nothing found',\r\n      click_map: 'Choose a point on the map to start',\r\n      action_back: 'Back',\r\n    },\r\n    fr: {\r\n      detailsPanel: 'Détails',\r\n      nothing_found: 'Aucun résultat',\r\n      click_map: 'Choisissez un point sur la carte pour commencer',\r\n      action_back: 'Retour',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added(): void {\r\n    const { mapId } = (this as AbstractPlugin).pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api, ui } = cgpv;\r\n    const { DetailsIcon } = ui.elements;\r\n    const { displayLanguage } = api.maps[mapId];\r\n\r\n    // button props\r\n    const button: TypeIconButtonProps = {\r\n      id: 'detailsPanelButton',\r\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\r\n      tooltipPlacement: 'right',\r\n      children: <DetailsIcon />,\r\n      visible: true,\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[displayLanguage].detailsPanel,\r\n      icon: '<i class=\"material-icons\">details</i>',\r\n      width: 350,\r\n    };\r\n\r\n    // create a new button panel on the app-bar\r\n    this.buttonPanel = api.maps[mapId].appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    // TODO line 99 is duplication of line 100, but without the props of DetailsItem, to bypass lint error\r\n    this.buttonPanel?.panel?.changeContent(<DetailsItem />);\r\n    // this.buttonPanel?.panel?.changeContent(<DetailsItem mapId={mapId} buttonId={button.id} />);\r\n  }\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = (this as AbstractPlugin).pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.maps[mapId as string].appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\r\n    }\r\n  }\r\n}\r\n\r\nexport default DetailsPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['details-panel'] = DetailsPlugin as AbstractPlugin;\r\n"],"names":["DetailsItem","_jsx","children","w","window","DetailsPlugin","_AbstractPlugin","_inherits","_super","_createSuper","pluginId","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","schema","toJsonObject","defaultConfig","en","detailsPanel","nothing_found","click_map","action_back","fr","buttonPanel","_createClass","key","value","_this$buttonPanel","mapId","this","pluginProps","cgpv","api","DetailsIcon","ui","elements","displayLanguage","maps","button","id","tooltip","translations","tooltipPlacement","visible","panel","title","icon","width","appBarButtons","createAppbarPanel","changeContent","removeAppbarPanel","buttonPanelId","AbstractPlugin","plugins"],"sourceRoot":""}