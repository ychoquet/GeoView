{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":";4NAiBMA,EAAIC,OAOH,SAASC,EAAY,GAAyC,MAAvCC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAC3BC,EAASL,EAATK,KACAC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,MAELC,EAAwBD,EAAxBC,SAAUC,EAAcF,EAAdE,UAElB,EAA8BD,EAA+B,IAAG,eAAzDE,EAAO,KAAEC,EAAU,KAE1B,EAAwBH,IAAwB,eAAzCI,EAAI,KAAEC,EAAO,KACpB,EAA4BL,EAAqB,IAAG,eAA7CM,EAAM,KAAEC,EAAS,KACxB,EAAsCP,EAAwB,MAAK,eAA5DQ,EAAW,KAAEC,EAAc,KAE5BC,EAAqG,QAAhG,EAAGZ,EAAIa,IAAIhB,GAAOiB,cAAcC,8BAAsCC,IAAblB,EAAyB,GAAKA,UAAS,aAA7F,EAA+Fc,MA8D7G,OA5DAT,GAAU,WA4CR,OA1CAH,EAAIiB,MAAMC,GACRlB,EAAImB,WAAWC,iBAAiBC,kBAChC,SAACC,GACC,IAAIC,EAAAA,EAAAA,KAAwBD,GAAU,CACpC,IAAQE,EAAeF,EAAfE,WACFC,EAAmC,GACzCC,OAAOC,KAAKH,GAAYI,SAAQ,SAACC,GAC/B,IAAMC,GAAYC,EAAAA,EAAAA,KAAkB/B,EAAIa,IAAIhB,GAAOmC,MAAMC,iBAAiBJ,GAAWC,UAAWjC,GAC1FqC,EAAWV,EAAWK,GACxBK,EAASC,OAAS,GACpBV,EAAWW,KAAK,CAAEP,UAAAA,EAAWC,UAAAA,EAAWI,SAAAA,GAE5C,IACIT,EAAWU,OAAS,GACtB9B,EAAWoB,GAEXb,SAAAA,EAAOyB,QAEPhC,EAAW,GAEf,MACEA,EAAW,GAEf,GACAR,EAAK,UACFA,EAAK,gBAGVG,EAAIiB,MAAMC,GACRlB,EAAImB,WAAWmB,IAAIC,wBACnB,SAACjB,GACC,IAAIkB,EAAAA,EAAAA,KAAyBlB,GAAU,CACrC,IAAQmB,EAAgBnB,EAAhBmB,YACR9B,EAAeW,EAAQZ,aACvBD,EAAUgC,EAAYC,OACxB,MACEjC,EAAU,GAEd,GACAZ,GAGK,WACLG,EAAIiB,MAAM0B,IAAI3C,EAAImB,WAAWC,iBAAiBC,iBAAkBxB,GAChEG,EAAIiB,MAAM0B,IAAI3C,EAAImB,WAAWmB,IAAIC,uBAAwB1C,EAC3D,CAEF,GAAG,IAEHM,GAAU,WACRI,EACEP,EACGa,IAAIhB,GACJO,QAAQwC,cAAc/C,EAAOO,EAAS,CAAEP,MAAAA,EAAOgD,SAAUrC,EAAQsC,gBAAiB,OAAQC,cAAc,EAAMrC,YAAAA,IAGrH,GAAG,CAACN,EAASI,KAEN,yBAAMF,GACf,C,gsCCjFA,IAAMZ,EAAIC,OAKJqD,EAAa,oCAIjB,WAAYC,EAAkBC,GAA0B,MAE9B,OAF8B,eACtD,cAAMD,EAAUC,IAAO,4BAShB,kBAAuBC,CAAM,wCAOtB,kBAAsBC,EAAAA,EAAAA,KAAaC,EAAc,uCAKlDD,EAAAA,EAAAA,KAAa,CAC1BE,GAAI,CACFC,aAAc,UACdC,cAAe,gBACfC,UAAW,qCACXC,YAAa,QAEfC,GAAI,CACFJ,aAAc,UACdC,cAAe,iBACfC,UAAW,kDACXC,YAAa,cAEf,2BAKM,WAAY,QACV7D,EAAU,EAAK+D,YAAf/D,MAGAE,EAASL,EAATK,KAGAC,EAAYD,EAAZC,IACA6D,EADY9D,EAAP+D,GACcC,SAAnBF,YACAG,EAAoBhE,EAAIa,IAAIhB,GAA5BmE,gBAGFC,EAA8B,CAClCC,GAAI,qBACJC,QAAS,EAAKC,aAAaJ,GAAiBT,aAC5Cc,iBAAkB,QAClBC,UAAU,SAACT,EAAW,IACtBU,SAAS,GAIL3D,EAAwB,CAC5B4D,MAAO,EAAKJ,aAAaJ,GAAiBT,aAC1CkB,KAAM,wCACNC,MAAO,KAIT,EAAKC,YAAc3E,EAAIa,IAAIhB,GAAOiB,cAAc8D,kBAAkBX,EAAQrD,EAAO,MAGjE,QAAhB,IAAK+D,mBAAW,OAAO,QAAP,EAAhB,EAAkB/D,aAAK,OAAvB,EAAyBiE,eAAc,SAACjF,EAAW,CAACC,MAAOA,EAAOC,SAAUmE,EAAOC,KACrF,IAtEE,EAAKS,YAAc,KAAK,CAC1B,CAsFC,OApFD,+BAwEA,WACE,IAAQ9E,EAAUiF,KAAKlB,YAAf/D,MAMAG,EAHSN,EAATK,KAGAC,IAEJ8E,KAAKH,aACP3E,EAAIa,IAAIhB,GAAiBiB,cAAciE,kBAAkBD,KAAKH,YAAYK,cAE9E,KAAC,EA7FgB,CAASC,EAAAA,KAkG5BvF,EAAEwF,QAAUxF,EAAEwF,SAAW,CAAC,EAC1BxF,EAAEwF,QAAQ,kBAAmBC,EAAAA,EAAAA,KAAqBnC,E","sources":["webpack://geoview-core/../geoview-details-panel/src/details-item.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\r\nimport { ReactElement } from 'react';\r\n\r\nimport {\r\n  TypeWindow,\r\n  payloadIsAMapSingleClick,\r\n  payloadIsAllQueriesDone,\r\n  TypeArrayOfLayerData,\r\n  getLocalizedValue,\r\n  Coordinate,\r\n} from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n  buttonId?: string;\r\n}\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the details component\r\n *\r\n * @returns {JSX.Element} created details component\r\n */\r\nexport function DetailsItem({ mapId, buttonId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react } = cgpv;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [list, setList] = useState<ReactElement>();\r\n  const [latLng, setLatLng] = useState<Coordinate>([]);\r\n  const [handlerName, setHandlerName] = useState<string | null>(null);\r\n\r\n  const panel = api.map(mapId).appBarButtons.getAppBarButtonPanelById(buttonId === undefined ? '' : buttonId)?.panel;\r\n\r\n  useEffect(() => {\r\n    // create the listener to return the details\r\n    api.event.on(\r\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\r\n      (payload) => {\r\n        if (payloadIsAllQueriesDone(payload)) {\r\n          const { resultSets } = payload;\r\n          const newDetails: TypeArrayOfLayerData = [];\r\n          Object.keys(resultSets).forEach((layerPath) => {\r\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\r\n            const features = resultSets[layerPath]!;\r\n            if (features.length > 0) {\r\n              newDetails.push({ layerPath, layerName, features });\r\n            }\r\n          });\r\n          if (newDetails.length > 0) {\r\n            setDetails(newDetails);\r\n            // open the details panel\r\n            panel?.open();\r\n          } else {\r\n            setDetails([]);\r\n          }\r\n        } else {\r\n          setDetails([]);\r\n        }\r\n      },\r\n      mapId,\r\n      `${mapId}-DetailsAPI`\r\n    );\r\n    // get click info.\r\n    api.event.on(\r\n      api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK,\r\n      (payload) => {\r\n        if (payloadIsAMapSingleClick(payload)) {\r\n          const { coordinates } = payload;\r\n          setHandlerName(payload.handlerName);\r\n          setLatLng(coordinates.lnglat);\r\n        } else {\r\n          setLatLng([]);\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n\r\n    return () => {\r\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\r\n      api.event.off(api.eventNames.MAP.EVENT_MAP_SINGLE_CLICK, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setList(\r\n      api\r\n        .map(mapId)\r\n        .details.createDetails(mapId, details, { mapId, location: latLng, backgroundStyle: 'dark', singleColumn: true, handlerName })\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [details, latLng]);\r\n\r\n  return <div>{list}</div>;\r\n}\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  Cast,\r\n  AbstractPlugin,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeWindow,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeIconButtonProps,\r\n  TypePanelProps,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\nimport { DetailsItem } from './details-item';\r\n\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-details-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass DetailsPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the schema that is defined for this package\r\n   *\r\n   * @returns {AnySchemaObject} returns the schema for this package\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      detailsPanel: 'Details',\r\n      nothing_found: 'Nothing found',\r\n      click_map: 'Choose a point on the map to start',\r\n      action_back: 'Back',\r\n    },\r\n    fr: {\r\n      detailsPanel: 'Détails',\r\n      nothing_found: 'Aucun résultat',\r\n      click_map: 'Choisissez un point sur la carte pour commencer',\r\n      action_back: 'Retour',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api, ui } = cgpv;\r\n    const { DetailsIcon } = ui.elements;\r\n    const { displayLanguage } = api.map(mapId);\r\n\r\n    // button props\r\n    const button: TypeIconButtonProps = {\r\n      id: 'detailsPanelButton',\r\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\r\n      tooltipPlacement: 'right',\r\n      children: <DetailsIcon />,\r\n      visible: true,\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[displayLanguage].detailsPanel,\r\n      icon: '<i class=\"material-icons\">details</i>',\r\n      width: 300,\r\n    };\r\n\r\n    // create a new button panel on the app-bar\r\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    this.buttonPanel?.panel?.changeContent(<DetailsItem mapId={mapId} buttonId={button.id} />);\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.map(mapId as string).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\r\n    }\r\n  }\r\n}\r\n\r\nexport default DetailsPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['details-panel'] = Cast<AbstractPlugin>(DetailsPlugin);\r\n"],"names":["w","window","DetailsItem","mapId","buttonId","cgpv","api","react","useState","useEffect","details","setDetails","list","setList","latLng","setLatLng","handlerName","setHandlerName","panel","map","appBarButtons","getAppBarButtonPanelById","undefined","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","layer","registeredLayers","features","length","push","open","MAP","EVENT_MAP_SINGLE_CLICK","payloadIsAMapSingleClick","coordinates","lnglat","off","createDetails","location","backgroundStyle","singleColumn","DetailsPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","detailsPanel","nothing_found","click_map","action_back","fr","pluginProps","DetailsIcon","ui","elements","displayLanguage","button","id","tooltip","translations","tooltipPlacement","children","visible","title","icon","width","buttonPanel","createAppbarPanel","changeContent","this","removeAppbarPanel","buttonPanelId","AbstractPlugin","plugins","Cast"],"sourceRoot":""}