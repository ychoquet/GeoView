{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-details-panel/src/layers-list.tsx","webpack://geoview-core/../geoview-details-panel/src/features-list.tsx","webpack://geoview-core/../geoview-details-panel/src/feature-info.tsx","webpack://geoview-core/../geoview-details-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport { markerDefinitionPayload } from 'geoview-core/src/api/events/payloads/marker-definition-payload';\nimport { AbstractGeoViewLayer, TypeWindow, toJsonObject } from 'geoview-core';\nimport { TypeLayersListProps } from './details-panel-types';\n\n// get the window object\nconst w = window as TypeWindow;\n\n/**\n * A react component that will list the map server layers defined in the map config\n *\n * @param {TypeLayersListProps} props properties passed to the component\n * @returns a React JSX Element containing map server layers\n */\nfunction LayersList(props: TypeLayersListProps): JSX.Element {\n  const { layersData, selectFeature, selectLayer, getSymbol, clickPos, mapId } = props;\n\n  // access the cgpv object from the window object\n  const { cgpv } = w;\n\n  // access the api calls\n  const { api, ui } = cgpv;\n\n  // get event names\n  const EVENT_NAMES = api.eventNames;\n\n  // use material ui theming\n  const useStyles = ui.makeStyles(() => ({\n    layersContainer: {\n      overflow: 'hidden',\n      overflowY: 'auto',\n      width: '100%',\n    },\n    layerItem: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      margin: '5px 0',\n      padding: '10px 5px',\n      boxSizing: 'content-box',\n      '&:hover': {\n        cursor: 'pointer',\n        backgroundColor: '#c9c9c9',\n      },\n      zIndex: 1000,\n      border: 'none',\n      width: '100%',\n    },\n    layerParentText: {\n      fontSize: '16px',\n      fontWeight: 'bold',\n    },\n    layerCountTextContainer: {\n      display: 'flex',\n      // justifyContent: 'space-around',\n      alignItems: 'center',\n      width: '100%',\n    },\n    layerFeatureCount: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '32px',\n      minWidth: '32px',\n      height: '32px',\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\n      marginRight: '10px',\n      color: 'black',\n      fontSize: '16px',\n      fontWeight: 'bold',\n    },\n    layerItemText: {\n      fontSize: '14px',\n      // fontWeight: 'bold',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n  }));\n\n  const classes = useStyles();\n\n  /**\n   * Switch to the feature list / entries panel content\n   *\n   * @param {Object} data data object of all layers\n   * @param {number} layerKey the layer object to list it's entries\n   */\n  const goToFeatureList = (data: AbstractGeoViewLayer, layerKey: number) => {\n    const { layerData, displayField, fieldAliases, renderer } = data.listOfLayerEntryConfig[layerKey];\n\n    // set the layer entry data\n    selectLayer(data.listOfLayerEntryConfig[layerKey]);\n\n    // check if the layer has only one entry\n    if (layerData.length === 1) {\n      // go to the entry information skipping entry list\n      const attributes = layerData[0]?.attributes;\n      selectFeature(\n        toJsonObject({\n          attributes,\n          displayField,\n          fieldAliases,\n          symbol: getSymbol(renderer, attributes),\n          numOfEntries: 1,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={classes.layersContainer}>\n      {\n        // loop through each map server layer\n        Object.keys(layersData).map((dataKey) => {\n          const data = layersData[dataKey];\n\n          return (\n            <div key={data.id}>\n              {\n                // loop through each layer in the map server\n                Object.keys(data.layers).map((layerKey: string, index: number) => {\n                  const { layer, layerData, groupLayer } = data.layers[layerKey];\n\n                  return (\n                    <div\n                      key={index}\n                      tabIndex={layerData.length > 0 && !groupLayer ? 0 : -1}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          if (!groupLayer) {\n                            e.preventDefault();\n                            goToFeatureList(data, layerKey);\n                          }\n                        }\n                      }}\n                      role=\"button\"\n                    >\n                      {\n                        // if the map server is a group layer then display its title as a header of it's sub layers\n                        groupLayer ? (\n                          <div className={classes.layerParentText} title={layer.name}>\n                            {layer.name}\n                          </div>\n                        ) : (\n                          <button\n                            type=\"button\"\n                            tabIndex={-1}\n                            className={classes.layerItem}\n                            disabled={layerData.length === 0}\n                            onClick={\n                              layerData.length > 0\n                                ? () => {\n                                    // if a layer is clicked\n                                    goToFeatureList(data, layerKey);\n\n                                    api.event.emit(\n                                      markerDefinitionPayload(\n                                        EVENT_NAMES.MARKER_ICON.EVENT_MARKER_ICON_SHOW,\n                                        mapId,\n                                        clickPos!,\n                                        getSymbol(data.layers[layerKey].renderer, layerData[0].attributes)!\n                                      )\n                                    );\n                                  }\n                                : undefined\n                            }\n                          >\n                            <div className={classes.layerCountTextContainer}>\n                              <span className={classes.layerFeatureCount}>{layerData.length}</span>\n                              <div className={classes.layerItemText} title={layer.name}>\n                                {layer.name}\n                              </div>\n                            </div>\n                          </button>\n                        )\n                      }\n                    </div>\n                  );\n                })\n              }\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default LayersList;\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable jsx-a11y/interactive-supports-focus */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport { TypeJsonValue, TypeWindow, toJsonObject, TypeJsonObject } from 'geoview-core';\nimport { TypeLayersEntry, TypeFeaturesListProps } from './details-panel-types';\n\nconst w = window as TypeWindow;\n\n/**\n * A react component to display layer entries\n *\n * @param {TypeFeaturesListProps} props properties of the component\n * @returns A react JSX Element containing the entry list of a layer\n */\nfunction FeaturesList(props: TypeFeaturesListProps): JSX.Element {\n  const { selectedLayer, selectLayer, selectFeature, setPanel, getSymbol, buttonPanel } = props;\n\n  // access the cgpv object from the window object\n  const { cgpv } = w;\n\n  // access the api calls\n  const { react, ui, useTranslation } = cgpv;\n\n  const { useEffect } = react;\n\n  const { displayField, fieldAliases, layerData, renderer } = selectedLayer as TypeLayersEntry;\n\n  // use material ui theming\n  const useStyles = ui.makeStyles(() => ({\n    featuresContainer: {\n      overflow: 'hidden',\n      overflowY: 'auto',\n      width: '100%',\n    },\n    featureItem: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      margin: '5px 0',\n      padding: '10px 5px',\n      boxSizing: 'content-box',\n      '&:hover': {\n        cursor: 'pointer',\n        backgroundColor: '#c9c9c9',\n      },\n      zIndex: 1000,\n    },\n    featureIconTextContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n    },\n    featureItemIconContainer: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '32px',\n      minWidth: '32px',\n      height: '32px',\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\n    },\n    featureItemIcon: {},\n    featureItemText: {\n      display: 'inline-block',\n      width: '100%',\n      fontWeight: 400,\n      marginLeft: '10px',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      fontSize: '16px',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const { t } = useTranslation();\n\n  /**\n   * Switch to the feature / entry info panel content\n   *\n   * @param {Object} attributes attributes object for the layer attributes\n   * @param {Object} symbolImage symbology image data\n   */\n  const goToFeatureInfo = (attributes: TypeJsonValue, symbolImage: TypeJsonValue) => {\n    // add a back action button on the entry information panel to go back to the entry list\n    buttonPanel.panel?.addActionButton('back', t('action_back'), '<i class=\"material-icons\">keyboard_backspace</i>', () => {\n      if (layerData.length === 1) {\n        setPanel(true, false, false);\n      } else {\n        // go back to entry list when clicked\n        selectLayer();\n      }\n    });\n\n    // set panel content to the entry information\n    selectFeature(\n      toJsonObject({\n        attributes,\n        displayField,\n        fieldAliases,\n        symbol: symbolImage,\n        numOfEntries: layerData.length,\n      })\n    );\n  };\n\n  useEffect(() => {\n    // add new action button that goes back to the layers list\n    buttonPanel.panel?.addActionButton('back', t('action_back'), '<i class=\"material-icons\">keyboard_backspace</i>', () => {\n      // set the panel content back to the map server layer list\n      setPanel(true, false, false);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return layerData.length > 0 ? (\n    <div className={classes.featuresContainer}>\n      {\n        // loop through each entry\n        layerData.map((feature: TypeJsonObject, i: number) => {\n          const attributes = feature?.attributes;\n\n          // get symbol\n          const symbolImage = getSymbol(renderer, attributes);\n\n          // get the title from the attributes, if no title was defined in the layer then set it to the objectId\n          const attributesDisplayField = attributes[displayField] as string;\n          const title =\n            attributesDisplayField && attributesDisplayField.length > 0 ? `${attributesDisplayField}` : `${attributes.OBJECTID}`;\n\n          return (\n            <div\n              // eslint-disable-next-line react/no-array-index-key\n              key={i}\n              tabIndex={0}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  e.preventDefault();\n                  goToFeatureInfo(attributes, symbolImage);\n                }\n              }}\n              role=\"button\"\n            >\n              <div\n                className={classes.featureItem}\n                onClick={() => {\n                  goToFeatureInfo(attributes, symbolImage);\n                }}\n                role=\"button\"\n              >\n                <div className={classes.featureIconTextContainer}>\n                  <div className={classes.featureItemIconContainer}>\n                    {symbolImage!.imageData ? (\n                      <img\n                        className={classes.featureItemIcon}\n                        src={`data:${symbolImage!.contentType};base64, ${symbolImage!.imageData}`}\n                        alt=\"\"\n                      />\n                    ) : renderer.symbol.legendImageUrl ? (\n                      <img className={classes.featureItemIcon} src={renderer.symbol.legendImageUrl} alt=\"\" />\n                    ) : (\n                      <div className={classes.featureItemIcon} />\n                    )}\n                  </div>\n                  <span className={classes.featureItemText} title={title}>\n                    {title}\n                  </span>\n                </div>\n              </div>\n            </div>\n          );\n        })\n      }\n    </div>\n  ) : (\n    <div className={classes.featureItemText}>{t('nothing_found')}</div>\n  );\n}\n\nexport default FeaturesList;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n/* eslint-disable no-nested-ternary */\nimport { TypeJsonArray, TypeWindow } from 'geoview-core';\nimport { TypeFeatureInfoProps } from './details-panel-types';\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that will return entry / feature information\n *\n * @param {Object} props properties for the component\n * @returns A react JSX Element with the entry / feature information\n */\nfunction FeatureInfo(props: TypeFeatureInfoProps): JSX.Element {\n  const { buttonPanel, selectedFeature, setPanel } = props;\n\n  // access the cgpv object from the window object\n  const { cgpv } = w;\n\n  // access the api calls\n  const { react, ui, useTranslation } = cgpv;\n\n  const { ArrowBackIcon } = ui.elements;\n\n  const { useEffect } = react;\n\n  const { displayField, fieldAliases, attributes, symbol, numOfEntries } = selectedFeature;\n\n  // use material ui theming\n  const useStyles = ui.makeStyles(() => ({\n    featureInfoContainer: {\n      width: '100%',\n    },\n    featureInfoHeader: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    featureInfoHeaderIconContainer: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '32px',\n      minWidth: '32px',\n      height: '32px',\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\n    },\n    featureInfoHeaderIcon: {},\n    featureInfoHeaderText: {\n      marginLeft: '10px',\n      width: '100%',\n      fontSize: 18,\n    },\n    featureInfoItemsContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginTop: 20,\n    },\n    featureInfoItem: {\n      display: 'flex',\n      flexDirection: 'column',\n      margin: '5px 0',\n    },\n    featureInfoItemKey: {\n      fontWeight: 'bold',\n      fontSize: 16,\n    },\n    featureInfoItemValue: {\n      fontSize: 16,\n      backgroundColor: '#ddd',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    // add new action button that goes back to the entry / features list or layers list\n    buttonPanel.panel?.addActionButton('back', t('action_back'), <ArrowBackIcon />, () => {\n      if (numOfEntries === 1) {\n        // set panel back to layers list\n        setPanel(true, false, false);\n      } else {\n        // set panel back to entry / feature list\n        setPanel(false, true, false);\n      }\n    });\n  }, []);\n\n  return (\n    <div className={classes.featureInfoContainer}>\n      <div className={classes.featureInfoHeader}>\n        <div className={classes.featureInfoHeaderIconContainer}>\n          {symbol.imageData ? (\n            <img className={classes.featureInfoHeaderIcon} src={`data:${symbol.contentType};base64, ${symbol.imageData}`} alt=\"\" />\n          ) : symbol.legendImageUrl ? (\n            <img className={classes.featureInfoHeaderIcon} src={symbol.legendImageUrl as string} alt=\"\" />\n          ) : (\n            <div className={classes.featureInfoHeaderIcon} />\n          )}\n        </div>\n        <span className={classes.featureInfoHeaderText}>\n          {attributes[displayField as string] && (attributes[displayField as string] as TypeJsonArray).length > 0\n            ? `${attributes[displayField as string]}`\n            : `${attributes.OBJECTID}`}\n        </span>\n      </div>\n      <div className={classes.featureInfoItemsContainer}>\n        {\n          // loop through each attribute in the selected entry / feature\n          Object.keys(attributes).map((attrKey) => {\n            let attributeAlias = fieldAliases[attrKey] as string;\n            const attributeValue = attributes[attrKey] as string;\n\n            if (!attributeAlias) attributeAlias = attrKey;\n\n            return (\n              attributeValue.length > 0 &&\n              attributeAlias !== 'OBJECTID' &&\n              attributeAlias !== 'SHAPE' &&\n              attributeAlias !== 'SHAPE_Length' &&\n              attributeAlias !== 'SHAPE_Area' && (\n                <div className={classes.featureInfoItem} key={attrKey} tabIndex={0}>\n                  <span className={classes.featureInfoItemKey}>{attributeAlias}</span>\n                  <span className={classes.featureInfoItemValue}>{attributeValue}</span>\n                </div>\n              )\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default FeatureInfo;\n","import {\n  Cast,\n  TypeJsonValue,\n  AbstractGeoViewLayer,\n  TypeWindow,\n  toJsonObject,\n  TypeJsonObject,\n  TypeJsonArray,\n  geoviewLayerIsWMS,\n  geoviewLayerIsEsriDynamic,\n  geoviewLayerIsEsriFeature,\n  WMS,\n  EsriFeature,\n  EsriDynamic,\n  CONST_LAYER_TYPES,\n  payloadBaseClass,\n  payloadIsALngLat,\n  markerDefinitionPayload,\n  TypeButtonPanel,\n} from 'geoview-core';\n\nimport LayersList from './layers-list';\nimport FeaturesList from './features-list';\nimport FeatureInfo from './feature-info';\nimport {\n  TypeEntry,\n  TypeFoundLayers,\n  TypeFieldAlias,\n  TypeLayerInfo,\n  TypeSelectedFeature,\n  TypeRendererSymbol,\n  TypeLayersEntry,\n  TypeFieldNameAliasArray,\n} from './details-panel-types';\n\ntype TypePanelContentProps = {\n  buttonPanel: TypeButtonPanel;\n  mapId: string;\n};\n\n// get the window object\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @param {TypePanelContentProps} props the properties of the pane content\n * @returns A React JSX Element with the details panel\n */\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\n  const { buttonPanel, mapId } = props;\n\n  // access the cgpv object from the window object\n  const { cgpv } = w;\n\n  // access the api calls\n  const { api, react, ui, useTranslation } = cgpv;\n\n  // get event names\n  const EVENT_NAMES = api.eventNames;\n\n  const { useState, useCallback, useEffect } = react;\n\n  const [layersData, setLayersData] = useState<Record<string, AbstractGeoViewLayer>>({});\n  const [selectedLayer, setSelectedLayer] = useState({});\n  const [selectedFeature, setSelectedFeature] = useState({});\n\n  const [layersList, setLayersList] = useState(false);\n  const [featureList, setFeatureList] = useState(false);\n  const [featureInfo, setFeatureInfo] = useState(false);\n\n  const [clickPos, setClickPos] = useState<number[]>();\n\n  // use material ui theming\n  const useStyles = ui.makeStyles(() => ({\n    mainContainer: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const { t } = useTranslation();\n\n  // get the map instance\n  const mapInstance = api.map(mapId).map;\n\n  /**\n   * Get the symbology from the layer\n   *\n   * @param {TypeRendererSymbol} renderer the display renderer containing the symbol\n   * @param {TypeJsonObject} attributes the attributes of the selected layer features\n   *\n   * @returns {TypeJsonObject} the symbology containing the imageData\n   */\n  const getSymbol = useCallback((renderer: TypeRendererSymbol, attributes: TypeJsonObject): TypeJsonObject | null => {\n    let symbolImage: TypeJsonObject | null = null;\n\n    // check if a symbol object exists in the renderer\n    if (renderer && renderer.symbol) {\n      symbolImage = toJsonObject(renderer.symbol);\n    } else if (renderer && renderer.uniqueValueInfos && renderer.uniqueValueInfos.length > 0) {\n      // if symbol not found then check if there are multiple symbologies\n      symbolImage = renderer.uniqueValueInfos.filter((info) => {\n        // return the correct symbology matching the layer using the layer defined fields\n        return info.value === (attributes[renderer.field1] || attributes[renderer.field2] || attributes[renderer.field3]);\n      })[0].symbol;\n    }\n\n    return symbolImage;\n  }, []);\n\n  /**\n   * Fetch the json response from the map server\n   *\n   * @param {string} url the url of the map server\n   * @returns {Promise<TypeLayerInfo>} a json containing the result of the query\n   */\n  const queryServer = async (url: string): Promise<TypeLayerInfo> => {\n    // fetch the map server returning a json object\n    const response = await fetch(`${url}?f=json`);\n\n    const result = await response.json();\n\n    return result;\n  };\n\n  /**\n   * Set the content of the panel by toggling between the contents\n   *\n   * @param {boolean} showLayersList a boolean value to show the layers list content\n   * @param {boolean} showFeaturesList a boolean value to show the entry / feature list content\n   * @param {boolean} showFeaturesInfo a boolean value to show the entry / feature info content\n   */\n  const setPanel = useCallback(\n    (showLayersList: boolean, showFeaturesList: boolean, showFeaturesInfo: boolean) => {\n      // remove the back button if it exists\n      buttonPanel.panel?.removeActionButton('back');\n\n      // show the correct panel content\n      setLayersList(showLayersList);\n      setFeatureList(showFeaturesList);\n      setFeatureInfo(showFeaturesInfo);\n\n      // emit content change event so the panel can focus on close button\n      api.event.emit(payloadBaseClass(EVENT_NAMES.PANEL.EVENT_PANEL_CHANGE_CONTENT, mapId), buttonPanel.buttonPanelId);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [buttonPanel.panel, mapId]\n  );\n\n  /**\n   * Set the layers list as the panel content\n   */\n  const selectLayersList = useCallback(() => {\n    setPanel(true, false, false);\n  }, [setPanel]);\n\n  /**\n   * Set the entry / feature list as the panel content\n   */\n  const selectLayer = useCallback(\n    /**\n     * Set the entry / feature list object\n     *\n     * @param {TypeLayersEntry} layerData an object containing the entry / feature list\n     */\n    (layerData?: TypeLayersEntry) => {\n      // set the entry / feature list data\n      setSelectedLayer(layerData || {});\n\n      // set the panel to show the entry / feature list content\n      setPanel(false, true, false);\n    },\n    [setSelectedLayer, setPanel]\n  );\n\n  /**\n   * Set the entry / feature info object\n   *\n   * @param {TypeJsonValue} featureData an object containing the entry / feature data\n   */\n  const selectFeature = useCallback(\n    (featureData: TypeJsonValue) => {\n      // set the entry / feature data\n      setSelectedFeature(Cast<React.SetStateAction<TypeJsonObject>>(featureData));\n\n      // set the panel to show the entry / feature info content\n      setPanel(false, false, true);\n    },\n    [setSelectedFeature, setPanel]\n  );\n\n  /**\n   * Get all aliases from the defined layer list, will be used when displaying entry / feature info\n   *\n   * @param {TypeFieldNameAliasArray} fields a list of the fields defined in the layer\n   * @returns {TypeJsonValue} an object containing field name and it's alias\n   */\n  const getFieldAliases = (fields: TypeFieldNameAliasArray): TypeFieldAlias => {\n    const fieldAliases: TypeFieldAlias = {};\n\n    if (fields) {\n      fields.forEach((field: { name: string; alias: string }) => {\n        const { name, alias } = field;\n\n        fieldAliases[name] = alias;\n      });\n    }\n\n    return fieldAliases;\n  };\n\n  /**\n   * Add a layer to the panel layer list\n   *\n   * @param {AbstractGeoViewLayer} mapLayer the main object that contains added layers from the api\n   * @param {Record<string, AbstractGeoViewLayer>} data the data object that contains all layers\n   * @param {TypeLayerInfo} layerInfo the layer information\n   * @param {boolean} isGroupLayer a boolean value to check if this layer is a group layer\n   */\n  const addLayer = (\n    mapLayer: AbstractGeoViewLayer,\n    data: Record<string, AbstractGeoViewLayer>,\n    layerInfo: TypeLayerInfo,\n    isGroupLayer: boolean\n  ) => {\n    // get the layers object from the map, it begins with an empty object then adds each layer\n    const { layers } = data[mapLayer.mapId];\n\n    // add the layer to the layers object, the layer will have a key generated from the id and name of the layer seperated by dashes\n    layers[`${layerInfo.layerPath}-${layerInfo.name.replace(/\\s+/g, '-').toLowerCase()}`] = Cast<TypeLayersEntry>({\n      // the information about this layer\n      layer: layerInfo,\n      // is it a group layer or not\n      groupLayer: isGroupLayer,\n      // the layer entry / feature data, will be filled / reset when a click / crosshair event is triggered on an element\n      layerData: [],\n      // the default display field or field name defined in the layer\n      displayField: layerInfo.displayField || layerInfo.displayFieldName || '',\n      // the defined field aliases by the layer\n      fieldAliases: getFieldAliases(layerInfo.fields),\n      // the renderer object containing the symbology\n      renderer: layerInfo.drawingInfo?.renderer,\n    });\n\n    // save the layers back to the data object on the specified map server layer\n    // eslint-disable-next-line no-param-reassign\n    data[mapLayer.mapId].layers = layers;\n  };\n\n  /**\n   * Clear / Reset the layer data containing entries / features selected on a mouse click / crosshair events\n   */\n  const clearResults = useCallback(\n    /**\n     * Set the dataKey and layerKey to the selected layer to be cleared\n     *\n     * @param {string} dataKey the map server layer key / id\n     * @param {string} layerKey the layer key / id\n     */\n    (dataKey: string, layerKey: string) => {\n      const data = layersData[dataKey];\n\n      const { layers } = data;\n\n      // clear out previous results\n      layers[layerKey].layerData = [];\n\n      // save the new cleared out layerData\n      setLayersData((prevState) => ({\n        ...prevState,\n        [dataKey]: {\n          ...prevState[dataKey],\n          layers,\n        } as AbstractGeoViewLayer,\n      }));\n    },\n    [layersData]\n  );\n\n  /**\n   * Handle opening the details panel with correct panel content\n   * Identify the layers that matches the selected point from a mouse click / crosshair events\n   *\n   * @param {number[]} lnglat an array containing the longitude and latitude values from the event\n   */\n  const handleOpenDetailsPanel = useCallback(\n    async (lnglat: number[]) => {\n      // variable will be used later on as a counter to check which panel content should be selected\n      const layersFound: TypeFoundLayers[] = [];\n\n      // loop through all the map server layers\n      for (let i = 0; i < Object.keys(layersData).length; i++) {\n        const dataKey = Object.keys(layersData)[i];\n        const data = layersData[dataKey];\n\n        const { layer, layers, type } = data;\n\n        // loop through all layers in each map server\n        for (let j = 0; j < Object.keys(layers).length; j++) {\n          const layerKey = Object.keys(layers)[j];\n\n          // we don't want to query a group layer because we already added it's sub layers\n          if (!layers[layerKey].groupLayer) {\n            // clear previous entry data for this layer\n            clearResults(dataKey, layerKey);\n\n            // eslint-disable-next-line no-underscore-dangle\n            const layerMap = api.map(mapId).map;\n            // get map size\n            const size = layerMap.getSize()!;\n\n            // get extent\n            const bounds = layerMap.getView().calculateExtent();\n\n            const extent = {\n              xmin: bounds[0],\n              ymin: bounds[1],\n              xmax: bounds[2],\n              ymax: bounds[3],\n              spatialReference: {\n                wkid: 4326,\n              },\n            };\n\n            // check layer type if WMS then use getFeatureInfo to query the data\n            if (type === CONST_LAYER_TYPES.WMS) {\n              const ogcWMSLayer = Cast<WMS>(layer);\n              let getFeatureInfoResponse: TypeJsonArray | null = null;\n              // eslint-disable-next-line no-await-in-loop\n              getFeatureInfoResponse = await ogcWMSLayer.getFeatureInfo(lnglat);\n\n              if (getFeatureInfoResponse && getFeatureInfoResponse!.length > 0) {\n                layersFound.push(\n                  Cast<TypeFoundLayers>({\n                    layer: layers[layerKey],\n                    entries: getFeatureInfoResponse,\n                  })\n                );\n\n                // add the found entries to the array\n                layers[layerKey].layerData.push(...getFeatureInfoResponse);\n\n                // save the data\n                setLayersData((prevState) => ({\n                  ...prevState,\n                  [dataKey]: {\n                    ...prevState[dataKey],\n                    layers,\n                  } as AbstractGeoViewLayer,\n                }));\n              }\n            } else if (type === CONST_LAYER_TYPES.ESRI_FEATURE || type === CONST_LAYER_TYPES.ESRI_DYNAMIC) {\n              const ogcEsriLayer = Cast<EsriDynamic | EsriFeature>(layer);\n              // generate an identify query url\n              const identifyUrl =\n                `${ogcEsriLayer!.mapService.options.url}identify?` +\n                `f=json` +\n                `&tolerance=7` +\n                `&mapExtent=${extent.xmin},${extent.ymin},${extent.xmax},${extent.ymax}` +\n                `&imageDisplay=${size[0]},${size[1]},96` +\n                `&layers=visible:${layers[layerKey].layer.id}` +\n                `&returnFieldName=true` +\n                `&sr=4326` +\n                `&returnGeometry=true` +\n                `&geometryType=esriGeometryPoint&geometry=${lnglat[0]},${lnglat[1]}`;\n\n              // fetch the result from the map server\n              // eslint-disable-next-line no-await-in-loop\n              const response = await fetch(identifyUrl);\n\n              type TypeJsonResponse = { results: TypeEntry[] };\n              // eslint-disable-next-line no-await-in-loop\n              const jsonResponse = (await response.json()) as TypeJsonResponse;\n\n              if (jsonResponse && jsonResponse.results && jsonResponse.results.length > 0) {\n                layersFound.push(\n                  Cast<TypeFoundLayers>({\n                    layer: layers[layerKey],\n                    entries: jsonResponse.results,\n                  })\n                );\n\n                // add the found entries to the array\n                (layers[layerKey].layerData as TypeJsonArray).push(...jsonResponse.results);\n\n                // save the data\n                setLayersData((prevState) => ({\n                  ...prevState,\n                  [dataKey]: {\n                    ...prevState[dataKey],\n                    layers,\n                  } as AbstractGeoViewLayer,\n                }));\n              }\n            }\n          }\n        }\n      }\n\n      let symbology = null;\n\n      // if the found layers is only one check if we need to go directly to the entry / feature info\n      if (layersFound.length === 1) {\n        // set the entry data\n        selectLayer(layersFound[0].layer);\n\n        if (layersFound[0]) symbology = getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes);\n\n        // if there are only one entry found in this layer then go directly to the entry / feature info\n        if (layersFound[0].entries.length === 1) {\n          selectFeature(\n            toJsonObject({\n              attributes: layersFound[0].entries[0].attributes,\n              displayField: layersFound[0].layer.displayField,\n              fieldAliases: layersFound[0].layer.fieldAliases,\n              symbol: getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes),\n              numOfEntries: 1,\n            })\n          );\n        }\n      } else {\n        // if multiple layers contains entries then use the symbology of first layer\n        if (layersFound.length > 0) {\n          symbology = getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes);\n        }\n\n        // if there are multiple layers with entries then display the layer list panel content\n        selectLayersList();\n      }\n\n      // save click position\n      setClickPos(lnglat);\n\n      // open the details panel\n      buttonPanel.panel?.open();\n\n      const panelContainer = document.querySelectorAll(`[data-id=${buttonPanel.buttonPanelId}]`)[0];\n\n      // emit an event to display a marker on the click position\n      // if there is only one layer with entries the symbology will be of that layer\n      // if there is multiple layers with entries then symbology will be of the first layer\n      // ...in case of multiple layers with entries, if a user selects a layer it will show the symbology of selected layer\n      // if no layers contains any entry then the default symbology with crosshair will show\n      api.event.emit(markerDefinitionPayload(EVENT_NAMES.MARKER_ICON.EVENT_MARKER_ICON_SHOW, mapId, lnglat, symbology!));\n\n      // set focus to the close button of the panel\n      if (panelContainer) {\n        const closeBtn = panelContainer.querySelectorAll('.cgpv-panel-close')[0];\n        if (closeBtn) (closeBtn as HTMLElement).focus();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [mapId, buttonPanel.panel, buttonPanel.buttonPanelId, layersData, clearResults, selectLayer, getSymbol, selectFeature, selectLayersList]\n  );\n\n  useEffect(() => {\n    // get the map service layers from the API\n    const mapLayers = api.map(mapId).layer.layers;\n\n    // will be used to store the added map server layers, layers in the map server etc...\n    const data: Record<string, AbstractGeoViewLayer> = {};\n\n    // loop through each map server layer loaded from the map config and created using the API\n    const arrayOfgeoviewLayerId = Object.keys(mapLayers);\n\n    arrayOfgeoviewLayerId.forEach(async (geoviewLayerId: string) => {\n      const mapLayer = mapLayers[geoviewLayerId];\n      data[mapLayer.mapId] = mapLayer;\n\n      // check each map server layer type and add it to the layers object of the map server in the data array\n      if (geoviewLayerIsWMS(mapLayer)) {\n        // get layer ids / entries from the loaded WMS layer\n        const { entries } = mapLayer;\n\n        if (entries)\n          for (let i = 0; i < entries.length; i++) {\n            const layerId = entries[i];\n\n            // query the layer information\n            // eslint-disable-next-line no-await-in-loop\n            const layerInfo = await queryServer(mapLayer.mapService.options.url! + layerId);\n\n            // try to add the legend image url for the WMS layer\n            // const legendImageUrl = `${ogcWMSLayer.url}?request=GetLegendGraphic&version=1.0.0&Service=WMS&format=image/png&layer=${layerId}`;\n            const legendImageUrl = mapLayer.getLegendGraphic();\n\n            // assign the url to the renderer\n            if (layerInfo.drawingInfo && layerInfo.drawingInfo.renderer && layerInfo.drawingInfo.renderer.symbol) {\n              Object.defineProperties(layerInfo.drawingInfo.renderer.symbol, {\n                legendImageUrl: {\n                  value: legendImageUrl,\n                },\n              });\n            }\n\n            addLayer(mapLayer, data, layerInfo, false);\n          }\n      } else if (geoviewLayerIsEsriFeature(mapLayer)) {\n        // query the layer information, feature layer URL will end by a number provided in the map config\n        const layerInfo = await queryServer(mapLayer.url);\n\n        addLayer(mapLayer, data, layerInfo, false);\n      } else if (geoviewLayerIsEsriDynamic(mapLayer)) {\n        // get active layers\n        const { entries } = mapLayer;\n\n        const activeLayers: Record<number, number> = {};\n\n        // change active layers to keys so it can be compared with id in all layers\n        (entries as number[])?.forEach((entry: number) => {\n          activeLayers[entry] = entry;\n        });\n\n        // get the metadata of the dynamic layer\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        mapLayer.layer!.metadata(async (error: any, res: { layers: { id: string; subLayerIds: string[] }[] }) => {\n          if (error) return;\n\n          if (res.layers) {\n            // loop through each layer in the dynamic layer\n            for (let i = 0; i < res.layers.length; i++) {\n              const layerData = res.layers[i];\n\n              // if the index of the layer is one of the entries provided in the map config\n              if (layerData.id in activeLayers) {\n                // query the layer information from the map server by appending the index at the end of the URL\n                // eslint-disable-next-line no-await-in-loop\n                const layerInfo = await queryServer((mapLayer.layer!.options as L.esri.DynamicMapLayerOptions).url + layerData.id);\n\n                addLayer(mapLayer, data, layerInfo, layerData.subLayerIds !== null && layerData.subLayerIds !== undefined);\n\n                // if this layer is a group layer then loop through the sub layers and add them\n                if (layerData.subLayerIds) {\n                  for (let j = 0; j < layerData.subLayerIds.length; j++) {\n                    const subLayer = layerData.subLayerIds[j];\n\n                    // eslint-disable-next-line no-await-in-loop\n                    const subLayerInfo = await queryServer((mapLayer.layer!.options as L.esri.DynamicMapLayerOptions).url + subLayer);\n\n                    addLayer(mapLayer, data, subLayerInfo, false);\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    });\n\n    setLayersData(data);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Event when a click happens on the map\n   *\n   * @param e map browser event\n   */\n  const mapClickEvent = (e: { originalEvent: { shiftKey: unknown }; coordinate: number[] }) => {\n    if (!e.originalEvent.shiftKey) {\n      handleOpenDetailsPanel(e.coordinate);\n    }\n  };\n\n  useEffect(() => {\n    // handle map click\n    mapInstance.on('click', mapClickEvent);\n\n    // handle crosshair enter\n    api.event.on(\n      EVENT_NAMES.DETAILS_PANEL.EVENT_DETAILS_PANEL_CROSSHAIR_ENTER,\n      (payload) => {\n        if (payloadIsALngLat(payload)) {\n          if (payload.handlerName === mapId) {\n            handleOpenDetailsPanel(payload.lnglat);\n          }\n        }\n      },\n      mapId\n    );\n\n    return () => {\n      mapInstance.un('click', mapClickEvent);\n      api.event.off(EVENT_NAMES.DETAILS_PANEL.EVENT_DETAILS_PANEL_CROSSHAIR_ENTER, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [handleOpenDetailsPanel, mapId, mapInstance]);\n\n  // h is a reference to this.createElement\n  // createElement is a React function to create React HTML elements\n  // It takes 3 arguments, the tag element name, the attributes of the element and the content of the element\n  return (\n    <div className={classes.mainContainer}>\n      {!layersList && !featureList && !featureInfo && <div>{t('click_map')}</div>}\n      {layersList && (\n        <LayersList\n          clickPos={clickPos}\n          layersData={layersData}\n          selectFeature={selectFeature}\n          selectLayer={selectLayer}\n          getSymbol={getSymbol}\n          mapId={mapId}\n        />\n      )}\n      {featureList && (\n        <FeaturesList\n          getSymbol={getSymbol}\n          buttonPanel={buttonPanel}\n          selectLayer={selectLayer}\n          selectedLayer={selectedLayer}\n          selectFeature={selectFeature}\n          setPanel={setPanel}\n        />\n      )}\n      {featureInfo && (\n        <FeatureInfo buttonPanel={buttonPanel} selectedFeature={selectedFeature as TypeSelectedFeature} setPanel={setPanel} />\n      )}\n    </div>\n  );\n}\n\nexport default PanelContent;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  Cast,\n  AbstractPlugin,\n  TypePluginOptions,\n  TypeButtonPanel,\n  toJsonObject,\n  TypeIconButtonProps,\n  TypePanelProps,\n  TypeWindow,\n} from 'geoview-core';\nimport { payloadBaseClass } from 'geoview-core/src/api/events/payloads/payload-base-class';\nimport PanelContent from './panel-content';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass DetailsPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      detailsPanel: 'Details',\n      nothing_found: 'Nothing found',\n      click_map: 'Choose a point on the map to start',\n      action_back: 'Back',\n    },\n    fr: {\n      detailsPanel: 'Détails',\n      nothing_found: 'Aucun résultat',\n      click_map: 'Choisissez un point sur la carte pour commencer',\n      action_back: 'Retour',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { DetailsIcon } = ui.elements;\n    const { displayLanguage } = api.map(mapId);\n\n    // button props\n    const button: TypeIconButtonProps = {\n      // set ID to detailsPanel so that it can be accessed from the core viewer\n      id: 'detailsPanelButton',\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\n      tooltipPlacement: 'right',\n      children: <DetailsIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[displayLanguage].detailsPanel,\n      icon: '<i class=\"material-icons\">details</i>',\n      width: 300,\n    };\n\n    // create a new button panel on the app-bar\n    this.buttonPanel = api.map(mapId as string).appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId as string} />);\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.map(mapId as string).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n      api.event.emit(payloadBaseClass(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_HIDE, mapId));\n    }\n  }\n}\n\nexport default DetailsPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['details-panel'] = Cast<AbstractPlugin>(DetailsPlugin);\n"],"names":["w","window","props","layersData","selectFeature","selectLayer","getSymbol","clickPos","mapId","cgpv","api","ui","EVENT_NAMES","eventNames","classes","makeStyles","layersContainer","overflow","overflowY","width","layerItem","display","alignItems","justifyContent","margin","padding","boxSizing","cursor","backgroundColor","zIndex","border","layerParentText","fontSize","fontWeight","layerCountTextContainer","layerFeatureCount","minWidth","height","boxShadow","marginRight","color","layerItemText","whiteSpace","textOverflow","useStyles","goToFeatureList","data","layerKey","listOfLayerEntryConfig","layerData","displayField","fieldAliases","renderer","length","attributes","toJsonObject","symbol","numOfEntries","className","Object","keys","map","dataKey","layers","index","layer","groupLayer","tabIndex","onKeyDown","e","key","preventDefault","role","title","name","type","disabled","onClick","event","emit","markerDefinitionPayload","MARKER_ICON","EVENT_MARKER_ICON_SHOW","undefined","id","selectedLayer","setPanel","buttonPanel","react","useTranslation","useEffect","featuresContainer","featureItem","featureIconTextContainer","featureItemIconContainer","featureItemIcon","featureItemText","marginLeft","t","goToFeatureInfo","symbolImage","panel","addActionButton","feature","i","attributesDisplayField","OBJECTID","imageData","src","contentType","alt","legendImageUrl","selectedFeature","ArrowBackIcon","elements","featureInfoContainer","featureInfoHeader","featureInfoHeaderIconContainer","featureInfoHeaderIcon","featureInfoHeaderText","featureInfoItemsContainer","flexDirection","marginTop","featureInfoItem","featureInfoItemKey","featureInfoItemValue","attrKey","attributeAlias","attributeValue","useState","useCallback","setLayersData","setSelectedLayer","setSelectedFeature","layersList","setLayersList","featureList","setFeatureList","featureInfo","setFeatureInfo","setClickPos","mainContainer","mapInstance","uniqueValueInfos","filter","info","value","field1","field2","field3","queryServer","url","fetch","response","json","result","showLayersList","showFeaturesList","showFeaturesInfo","removeActionButton","payloadBaseClass","PANEL","EVENT_PANEL_CHANGE_CONTENT","buttonPanelId","selectLayersList","featureData","Cast","addLayer","mapLayer","layerInfo","isGroupLayer","fields","layerPath","replace","toLowerCase","displayFieldName","forEach","field","alias","drawingInfo","clearResults","prevState","handleOpenDetailsPanel","lnglat","layersFound","j","layerMap","size","getSize","bounds","getView","calculateExtent","extent","xmin","ymin","xmax","ymax","spatialReference","wkid","CONST_LAYER_TYPES","ogcWMSLayer","getFeatureInfoResponse","getFeatureInfo","push","entries","ogcEsriLayer","identifyUrl","mapService","options","jsonResponse","results","symbology","open","panelContainer","document","querySelectorAll","closeBtn","focus","mapLayers","geoviewLayerId","geoviewLayerIsWMS","layerId","getLegendGraphic","defineProperties","geoviewLayerIsEsriFeature","geoviewLayerIsEsriDynamic","activeLayers","entry","metadata","error","res","subLayerIds","subLayer","subLayerInfo","mapClickEvent","originalEvent","shiftKey","coordinate","on","DETAILS_PANEL","EVENT_DETAILS_PANEL_CROSSHAIR_ENTER","payload","payloadIsALngLat","handlerName","un","off","DetailsPlugin","pluginId","en","detailsPanel","nothing_found","click_map","action_back","fr","pluginProps","DetailsIcon","displayLanguage","button","tooltip","translations","tooltipPlacement","children","visible","icon","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","EVENT_MARKER_ICON_HIDE","AbstractPlugin","plugins"],"sourceRoot":""}