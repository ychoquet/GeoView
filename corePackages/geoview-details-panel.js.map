{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-details-panel/src/layers-list.tsx","webpack://geoview-core/../geoview-details-panel/src/features-list.tsx","webpack://geoview-core/../geoview-details-panel/src/feature-info.tsx","webpack://geoview-core/../geoview-details-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport { TypeLayersListProps, AbstractWebLayersClass, TypeWindow, toJsonObject } from 'geoview-core';\r\nimport { markerDefinitionPayload } from 'geoview-core/src/api/events/payloads/marker-definition-payload';\r\n\r\n// get the window object\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that will list the map server layers defined in the map config\r\n *\r\n * @param {TypeLayersListProps} props properties passed to the component\r\n * @returns a React JSX Element containing map server layers\r\n */\r\nfunction LayersList(props: TypeLayersListProps): JSX.Element {\r\n  const { layersData, selectFeature, selectLayer, getSymbol, clickPos, mapId } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { api, ui } = cgpv;\r\n\r\n  // get event names\r\n  const EVENT_NAMES = api.eventNames;\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    layersContainer: {\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n      width: '100%',\r\n    },\r\n    layerItem: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      margin: '5px 0',\r\n      padding: '10px 5px',\r\n      boxSizing: 'content-box',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n        backgroundColor: '#c9c9c9',\r\n      },\r\n      zIndex: 1000,\r\n      border: 'none',\r\n      width: '100%',\r\n    },\r\n    layerParentText: {\r\n      fontSize: '16px',\r\n      fontWeight: 'bold',\r\n    },\r\n    layerCountTextContainer: {\r\n      display: 'flex',\r\n      // justifyContent: 'space-around',\r\n      alignItems: 'center',\r\n      width: '100%',\r\n    },\r\n    layerFeatureCount: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '32px',\r\n      minWidth: '32px',\r\n      height: '32px',\r\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\r\n      marginRight: '10px',\r\n      color: 'black',\r\n      fontSize: '16px',\r\n      fontWeight: 'bold',\r\n    },\r\n    layerItemText: {\r\n      fontSize: '14px',\r\n      // fontWeight: 'bold',\r\n      whiteSpace: 'nowrap',\r\n      textOverflow: 'ellipsis',\r\n      overflow: 'hidden',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  /**\r\n   * Switch to the feature list / entries panel content\r\n   *\r\n   * @param {Object} data data object of all layers\r\n   * @param {string} layerKey the layer object to list it's entries\r\n   */\r\n  const goToFeatureList = (data: AbstractWebLayersClass, layerKey: string) => {\r\n    const { layerData, displayField, fieldAliases, renderer } = data.layers[layerKey];\r\n\r\n    // set the layer entry data\r\n    selectLayer(data.layers[layerKey]);\r\n\r\n    // check if the layer has only one entry\r\n    if (layerData.length === 1) {\r\n      // go to the entry information skipping entry list\r\n      const attributes = layerData[0]?.attributes;\r\n      selectFeature(\r\n        toJsonObject({\r\n          attributes,\r\n          displayField,\r\n          fieldAliases,\r\n          symbol: getSymbol(renderer, attributes),\r\n          numOfEntries: 1,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.layersContainer}>\r\n      {\r\n        // loop through each map server layer\r\n        Object.keys(layersData).map((dataKey) => {\r\n          const data = layersData[dataKey];\r\n\r\n          return (\r\n            <div key={data.id}>\r\n              {\r\n                // loop through each layer in the map server\r\n                Object.keys(data.layers).map((layerKey: string, index: number) => {\r\n                  const { layer, layerData, groupLayer } = data.layers[layerKey];\r\n\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      tabIndex={layerData.length > 0 && !groupLayer ? 0 : -1}\r\n                      onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                          if (!groupLayer) {\r\n                            e.preventDefault();\r\n                            goToFeatureList(data, layerKey);\r\n                          }\r\n                        }\r\n                      }}\r\n                      role=\"button\"\r\n                    >\r\n                      {\r\n                        // if the map server is a group layer then display its title as a header of it's sub layers\r\n                        groupLayer ? (\r\n                          <div className={classes.layerParentText} title={layer.name}>\r\n                            {layer.name}\r\n                          </div>\r\n                        ) : (\r\n                          <button\r\n                            type=\"button\"\r\n                            tabIndex={-1}\r\n                            className={classes.layerItem}\r\n                            disabled={layerData.length === 0}\r\n                            onClick={\r\n                              layerData.length > 0\r\n                                ? () => {\r\n                                    // if a layer is clicked\r\n                                    goToFeatureList(data, layerKey);\r\n\r\n                                    api.event.emit(\r\n                                      markerDefinitionPayload(\r\n                                        EVENT_NAMES.MARKER_ICON.EVENT_MARKER_ICON_SHOW,\r\n                                        mapId,\r\n                                        clickPos!,\r\n                                        getSymbol(data.layers[layerKey].renderer, layerData[0].attributes)!\r\n                                      )\r\n                                    );\r\n                                  }\r\n                                : undefined\r\n                            }\r\n                          >\r\n                            <div className={classes.layerCountTextContainer}>\r\n                              <span className={classes.layerFeatureCount}>{layerData.length}</span>\r\n                              <div className={classes.layerItemText} title={layer.name}>\r\n                                {layer.name}\r\n                              </div>\r\n                            </div>\r\n                          </button>\r\n                        )\r\n                      }\r\n                    </div>\r\n                  );\r\n                })\r\n              }\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LayersList;\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable jsx-a11y/interactive-supports-focus */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport { TypeJsonValue, TypeLayersEntry, TypeFeaturesListProps, TypeWindow, toJsonObject, TypeJsonObject } from 'geoview-core';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component to display layer entries\r\n *\r\n * @param {TypeFeaturesListProps} props properties of the component\r\n * @returns A react JSX Element containing the entry list of a layer\r\n */\r\nfunction FeaturesList(props: TypeFeaturesListProps): JSX.Element {\r\n  const { selectedLayer, selectLayer, selectFeature, setPanel, getSymbol, buttonPanel } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { react, ui, useTranslation } = cgpv;\r\n\r\n  const { useEffect } = react;\r\n\r\n  const { displayField, fieldAliases, layerData, renderer } = selectedLayer as TypeLayersEntry;\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    featuresContainer: {\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n      width: '100%',\r\n    },\r\n    featureItem: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      margin: '5px 0',\r\n      padding: '10px 5px',\r\n      boxSizing: 'content-box',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n        backgroundColor: '#c9c9c9',\r\n      },\r\n      zIndex: 1000,\r\n    },\r\n    featureIconTextContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      width: '100%',\r\n    },\r\n    featureItemIconContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '32px',\r\n      minWidth: '32px',\r\n      height: '32px',\r\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\r\n    },\r\n    featureItemIcon: {},\r\n    featureItemText: {\r\n      display: 'inline-block',\r\n      width: '100%',\r\n      fontWeight: 400,\r\n      marginLeft: '10px',\r\n      overflow: 'hidden',\r\n      whiteSpace: 'nowrap',\r\n      textOverflow: 'ellipsis',\r\n      fontSize: '16px',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const { t } = useTranslation();\r\n\r\n  /**\r\n   * Switch to the feature / entry info panel content\r\n   *\r\n   * @param {Object} attributes attributes object for the layer attributes\r\n   * @param {Object} symbolImage symbology image data\r\n   */\r\n  const goToFeatureInfo = (attributes: TypeJsonValue, symbolImage: TypeJsonValue) => {\r\n    // add a back action button on the entry information panel to go back to the entry list\r\n    buttonPanel.panel?.addActionButton('back', t('action_back'), '<i class=\"material-icons\">keyboard_backspace</i>', () => {\r\n      if (layerData.length === 1) {\r\n        setPanel(true, false, false);\r\n      } else {\r\n        // go back to entry list when clicked\r\n        selectLayer();\r\n      }\r\n    });\r\n\r\n    // set panel content to the entry information\r\n    selectFeature(\r\n      toJsonObject({\r\n        attributes,\r\n        displayField,\r\n        fieldAliases,\r\n        symbol: symbolImage,\r\n        numOfEntries: layerData.length,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // add new action button that goes back to the layers list\r\n    buttonPanel.panel?.addActionButton('back', t('action_back'), '<i class=\"material-icons\">keyboard_backspace</i>', () => {\r\n      // set the panel content back to the map server layer list\r\n      setPanel(true, false, false);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return layerData.length > 0 ? (\r\n    <div className={classes.featuresContainer}>\r\n      {\r\n        // loop through each entry\r\n        layerData.map((feature: TypeJsonObject, i: number) => {\r\n          const attributes = feature?.attributes;\r\n\r\n          // get symbol\r\n          const symbolImage = getSymbol(renderer, attributes);\r\n\r\n          // get the title from the attributes, if no title was defined in the layer then set it to the objectId\r\n          const attributesDisplayField = attributes[displayField] as string;\r\n          const title =\r\n            attributesDisplayField && attributesDisplayField.length > 0 ? `${attributesDisplayField}` : `${attributes.OBJECTID}`;\r\n\r\n          return (\r\n            <div\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              key={i}\r\n              tabIndex={0}\r\n              onKeyDown={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  e.preventDefault();\r\n                  goToFeatureInfo(attributes, symbolImage);\r\n                }\r\n              }}\r\n              role=\"button\"\r\n            >\r\n              <div\r\n                className={classes.featureItem}\r\n                onClick={() => {\r\n                  goToFeatureInfo(attributes, symbolImage);\r\n                }}\r\n                role=\"button\"\r\n              >\r\n                <div className={classes.featureIconTextContainer}>\r\n                  <div className={classes.featureItemIconContainer}>\r\n                    {symbolImage!.imageData ? (\r\n                      <img\r\n                        className={classes.featureItemIcon}\r\n                        src={`data:${symbolImage!.contentType};base64, ${symbolImage!.imageData}`}\r\n                        alt=\"\"\r\n                      />\r\n                    ) : renderer.symbol.legendImageUrl ? (\r\n                      <img className={classes.featureItemIcon} src={renderer.symbol.legendImageUrl} alt=\"\" />\r\n                    ) : (\r\n                      <div className={classes.featureItemIcon} />\r\n                    )}\r\n                  </div>\r\n                  <span className={classes.featureItemText} title={title}>\r\n                    {title}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  ) : (\r\n    <div className={classes.featureItemText}>{t('nothing_found')}</div>\r\n  );\r\n}\r\n\r\nexport default FeaturesList;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\r\n/* eslint-disable no-nested-ternary */\r\nimport { TypeJsonArray, TypeFeatureInfoProps, TypeWindow } from 'geoview-core';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that will return entry / feature information\r\n *\r\n * @param {Object} props properties for the component\r\n * @returns A react JSX Element with the entry / feature information\r\n */\r\nfunction FeatureInfo(props: TypeFeatureInfoProps): JSX.Element {\r\n  const { buttonPanel, selectedFeature, setPanel } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { react, ui, useTranslation } = cgpv;\r\n\r\n  const { useEffect } = react;\r\n\r\n  const { displayField, fieldAliases, attributes, symbol, numOfEntries } = selectedFeature;\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    featureInfoContainer: {\r\n      width: '100%',\r\n    },\r\n    featureInfoHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    featureInfoHeaderIconContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '32px',\r\n      minWidth: '32px',\r\n      height: '32px',\r\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\r\n    },\r\n    featureInfoHeaderIcon: {},\r\n    featureInfoHeaderText: {\r\n      marginLeft: '10px',\r\n      width: '100%',\r\n      fontSize: 18,\r\n    },\r\n    featureInfoItemsContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      marginTop: 20,\r\n    },\r\n    featureInfoItem: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      margin: '5px 0',\r\n    },\r\n    featureInfoItemKey: {\r\n      fontWeight: 'bold',\r\n      fontSize: 16,\r\n    },\r\n    featureInfoItemValue: {\r\n      fontSize: 16,\r\n      backgroundColor: '#ddd',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    // add new action button that goes back to the entry / features list or layers list\r\n    buttonPanel.panel?.addActionButton('back', t('action_back'), '<i class=\"material-icons\">keyboard_backspace</i>', () => {\r\n      if (numOfEntries === 1) {\r\n        // set panel back to layers list\r\n        setPanel(true, false, false);\r\n      } else {\r\n        // set panel back to entry / feature list\r\n        setPanel(false, true, false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.featureInfoContainer}>\r\n      <div className={classes.featureInfoHeader}>\r\n        <div className={classes.featureInfoHeaderIconContainer}>\r\n          {symbol.imageData ? (\r\n            <img className={classes.featureInfoHeaderIcon} src={`data:${symbol.contentType};base64, ${symbol.imageData}`} alt=\"\" />\r\n          ) : symbol.legendImageUrl ? (\r\n            <img className={classes.featureInfoHeaderIcon} src={symbol.legendImageUrl as string} alt=\"\" />\r\n          ) : (\r\n            <div className={classes.featureInfoHeaderIcon} />\r\n          )}\r\n        </div>\r\n        <span className={classes.featureInfoHeaderText}>\r\n          {attributes[displayField as string] && (attributes[displayField as string] as TypeJsonArray).length > 0\r\n            ? `${attributes[displayField as string]}`\r\n            : `${attributes.OBJECTID}`}\r\n        </span>\r\n      </div>\r\n      <div className={classes.featureInfoItemsContainer}>\r\n        {\r\n          // loop through each attribute in the selected entry / feature\r\n          Object.keys(attributes).map((attrKey) => {\r\n            let attributeAlias = fieldAliases[attrKey] as string;\r\n            const attributeValue = attributes[attrKey] as string;\r\n\r\n            if (!attributeAlias) attributeAlias = attrKey;\r\n\r\n            return (\r\n              attributeValue.length > 0 &&\r\n              attributeAlias !== 'OBJECTID' &&\r\n              attributeAlias !== 'SHAPE' &&\r\n              attributeAlias !== 'SHAPE_Length' &&\r\n              attributeAlias !== 'SHAPE_Area' && (\r\n                <div className={classes.featureInfoItem} key={attrKey} tabIndex={0}>\r\n                  <span className={classes.featureInfoItemKey}>{attributeAlias}</span>\r\n                  <span className={classes.featureInfoItemValue}>{attributeValue}</span>\r\n                </div>\r\n              )\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FeatureInfo;\r\n","import {\r\n  Cast,\r\n  TypeJsonValue,\r\n  TypeRendererSymbol,\r\n  TypeSelectedFeature,\r\n  AbstractWebLayersClass,\r\n  TypeLayerInfo,\r\n  TypeFieldNameAliasArray,\r\n  TypeFieldAlias,\r\n  TypeFoundLayers,\r\n  TypeLayersEntry,\r\n  TypeEntry,\r\n  TypePanelContentProps,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeJsonArray,\r\n  webLayerIsWMS,\r\n  webLayerIsEsriDynamic,\r\n  webLayerIsEsriFeature,\r\n  WMS,\r\n  EsriFeature,\r\n  EsriDynamic,\r\n  CONST_LAYER_TYPES,\r\n  payloadIsALatLng,\r\n  payloadBaseClass,\r\n  markerDefinitionPayload,\r\n} from 'geoview-core';\r\n\r\nimport LayersList from './layers-list';\r\nimport FeaturesList from './features-list';\r\nimport FeatureInfo from './feature-info';\r\n\r\n// get the window object\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @param {TypePanelContentProps} props the properties of the pane content\r\n * @returns A React JSX Element with the details panel\r\n */\r\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\r\n  const { buttonPanel, mapId } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { api, react, ui, useTranslation } = cgpv;\r\n\r\n  // get event names\r\n  const EVENT_NAMES = api.eventNames;\r\n\r\n  const { useState, useCallback, useEffect } = react;\r\n\r\n  const [layersData, setLayersData] = useState<Record<string, AbstractWebLayersClass>>({});\r\n  const [selectedLayer, setSelectedLayer] = useState({});\r\n  const [selectedFeature, setSelectedFeature] = useState({});\r\n\r\n  const [layersList, setLayersList] = useState(false);\r\n  const [featureList, setFeatureList] = useState(false);\r\n  const [featureInfo, setFeatureInfo] = useState(false);\r\n\r\n  const [clickPos, setClickPos] = useState<L.LatLng>();\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    mainContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const { t } = useTranslation();\r\n\r\n  // get the map instance\r\n  const mapInstance = api.map(mapId).map;\r\n\r\n  /**\r\n   * Get the symbology from the layer\r\n   *\r\n   * @param {TypeRendererSymbol} renderer the display renderer containing the symbol\r\n   * @param {TypeJsonObject} attributes the attributes of the selected layer features\r\n   *\r\n   * @returns {TypeJsonObject} the symbology containing the imageData\r\n   */\r\n  const getSymbol = useCallback((renderer: TypeRendererSymbol, attributes: TypeJsonObject): TypeJsonObject | null => {\r\n    let symbolImage: TypeJsonObject | null = null;\r\n\r\n    // check if a symbol object exists in the renderer\r\n    if (renderer && renderer.symbol) {\r\n      symbolImage = toJsonObject(renderer.symbol);\r\n    } else if (renderer && renderer.uniqueValueInfos && renderer.uniqueValueInfos.length > 0) {\r\n      // if symbol not found then check if there are multiple symbologies\r\n      symbolImage = renderer.uniqueValueInfos.filter((info) => {\r\n        // return the correct symbology matching the layer using the layer defined fields\r\n        return info.value === (attributes[renderer.field1] || attributes[renderer.field2] || attributes[renderer.field3]);\r\n      })[0].symbol;\r\n    }\r\n\r\n    return symbolImage;\r\n  }, []);\r\n\r\n  /**\r\n   * Fetch the json response from the map server\r\n   *\r\n   * @param {string} url the url of the map server\r\n   * @returns {Promise<TypeLayerInfo>} a json containing the result of the query\r\n   */\r\n  const queryServer = async (url: string): Promise<TypeLayerInfo> => {\r\n    // fetch the map server returning a json object\r\n    const response = await fetch(`${url}?f=json`);\r\n\r\n    const result = await response.json();\r\n\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Set the content of the panel by toggling between the contents\r\n   *\r\n   * @param {boolean} showLayersList a boolean value to show the layers list content\r\n   * @param {boolean} showFeaturesList a boolean value to show the entry / feature list content\r\n   * @param {boolean} showFeaturesInfo a boolean value to show the entry / feature info content\r\n   */\r\n  const setPanel = useCallback(\r\n    (showLayersList: boolean, showFeaturesList: boolean, showFeaturesInfo: boolean) => {\r\n      // remove the back button if it exists\r\n      buttonPanel.panel?.removeActionButton('back');\r\n\r\n      // show the correct panel content\r\n      setLayersList(showLayersList);\r\n      setFeatureList(showFeaturesList);\r\n      setFeatureInfo(showFeaturesInfo);\r\n\r\n      // emit content change event so the panel can focus on close button\r\n      api.event.emit(payloadBaseClass(EVENT_NAMES.PANEL.EVENT_PANEL_CHANGE_CONTENT, mapId), buttonPanel.id);\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [buttonPanel.panel, mapId]\r\n  );\r\n\r\n  /**\r\n   * Set the layers list as the panel content\r\n   */\r\n  const selectLayersList = useCallback(() => {\r\n    setPanel(true, false, false);\r\n  }, [setPanel]);\r\n\r\n  /**\r\n   * Set the entry / feature list as the panel content\r\n   */\r\n  const selectLayer = useCallback(\r\n    /**\r\n     * Set the entry / feature list object\r\n     *\r\n     * @param {TypeLayersEntry} layerData an object containing the entry / feature list\r\n     */\r\n    (layerData?: TypeLayersEntry) => {\r\n      // set the entry / feature list data\r\n      setSelectedLayer(layerData || {});\r\n\r\n      // set the panel to show the entry / feature list content\r\n      setPanel(false, true, false);\r\n    },\r\n    [setSelectedLayer, setPanel]\r\n  );\r\n\r\n  /**\r\n   * Set the entry / feature info object\r\n   *\r\n   * @param {TypeJsonValue} featureData an object containing the entry / feature data\r\n   */\r\n  const selectFeature = useCallback(\r\n    (featureData: TypeJsonValue) => {\r\n      // set the entry / feature data\r\n      setSelectedFeature(Cast<React.SetStateAction<TypeJsonObject>>(featureData));\r\n\r\n      // set the panel to show the entry / feature info content\r\n      setPanel(false, false, true);\r\n    },\r\n    [setSelectedFeature, setPanel]\r\n  );\r\n\r\n  /**\r\n   * Get all aliases from the defined layer list, will be used when displaying entry / feature info\r\n   *\r\n   * @param {TypeFieldNameAliasArray} fields a list of the fields defined in the layer\r\n   * @returns {TypeJsonValue} an object containing field name and it's alias\r\n   */\r\n  const getFieldAliases = (fields: TypeFieldNameAliasArray): TypeFieldAlias => {\r\n    const fieldAliases: TypeFieldAlias = {};\r\n\r\n    if (fields) {\r\n      fields.forEach((field: { name: string; alias: string }) => {\r\n        const { name, alias } = field;\r\n\r\n        fieldAliases[name] = alias;\r\n      });\r\n    }\r\n\r\n    return fieldAliases;\r\n  };\r\n\r\n  /**\r\n   * Add a layer to the panel layer list\r\n   *\r\n   * @param {AbstractWebLayersClass} mapLayer the main object that contains added layers from the api\r\n   * @param {Record<string, AbstractWebLayersClass>} data the data object that contains all layers\r\n   * @param {TypeLayerInfo} layerInfo the layer information\r\n   * @param {boolean} isGroupLayer a boolean value to check if this layer is a group layer\r\n   */\r\n  const addLayer = (\r\n    mapLayer: AbstractWebLayersClass,\r\n    data: Record<string, AbstractWebLayersClass>,\r\n    layerInfo: TypeLayerInfo,\r\n    isGroupLayer: boolean\r\n  ) => {\r\n    // get the layers object from the map, it begins with an empty object then adds each layer\r\n    const { layers } = data[mapLayer.id];\r\n\r\n    // add the layer to the layers object, the layer will have a key generated from the id and name of the layer seperated by dashes\r\n    layers[`${layerInfo.id}-${layerInfo.name.replace(/\\s+/g, '-').toLowerCase()}`] = Cast<TypeLayersEntry>({\r\n      // the information about this layer\r\n      layer: layerInfo,\r\n      // is it a group layer or not\r\n      groupLayer: isGroupLayer,\r\n      // the layer entry / feature data, will be filled / reset when a click / crosshair event is triggered on an element\r\n      layerData: [],\r\n      // the default display field or field name defined in the layer\r\n      displayField: layerInfo.displayField || layerInfo.displayFieldName || '',\r\n      // the defined field aliases by the layer\r\n      fieldAliases: getFieldAliases(layerInfo.fields),\r\n      // the renderer object containing the symbology\r\n      renderer: layerInfo.drawingInfo && layerInfo.drawingInfo.renderer,\r\n    });\r\n\r\n    // save the layers back to the data object on the specified map server layer\r\n    // eslint-disable-next-line no-param-reassign\r\n    data[mapLayer.id].layers = layers;\r\n  };\r\n\r\n  /**\r\n   * Clear / Reset the layer data containing entries / features selected on a mouse click / crosshair events\r\n   */\r\n  const clearResults = useCallback(\r\n    /**\r\n     * Set the dataKey and layerKey to the selected layer to be cleared\r\n     *\r\n     * @param {string} dataKey the map server layer key / id\r\n     * @param {string} layerKey the layer key / id\r\n     */\r\n    (dataKey: string, layerKey: string) => {\r\n      const data = layersData[dataKey];\r\n\r\n      const { layers } = data;\r\n\r\n      // clear out previous results\r\n      layers[layerKey].layerData = [];\r\n\r\n      // save the new cleared out layerData\r\n      setLayersData((prevState) => ({\r\n        ...prevState,\r\n        [dataKey]: {\r\n          ...prevState[dataKey],\r\n          layers,\r\n        } as AbstractWebLayersClass,\r\n      }));\r\n    },\r\n    [layersData]\r\n  );\r\n\r\n  /**\r\n   * Handle opening the details panel with correct panel content\r\n   * Identify the layers that matches the selected point from a mouse click / crosshair events\r\n   *\r\n   * @param {L.LatLng} latlng a LatLng object containing the latitude and longitude values from the event\r\n   */\r\n  const handleOpenDetailsPanel = useCallback(\r\n    async (latlng: L.LatLng) => {\r\n      // variable will be used later on as a counter to check which panel content should be selected\r\n      const layersFound: TypeFoundLayers[] = [];\r\n\r\n      // loop through all the map server layers\r\n      for (let i = 0; i < Object.keys(layersData).length; i++) {\r\n        const dataKey = Object.keys(layersData)[i];\r\n        const data = layersData[dataKey];\r\n\r\n        const { layer, layers } = data;\r\n\r\n        // loop through all layers in each map server\r\n        for (let j = 0; j < Object.keys(layers).length; j++) {\r\n          const layerKey = Object.keys(layers)[j];\r\n\r\n          // we don't want to query a group layer because we already added it's sub layers\r\n          if (!layers[layerKey].groupLayer) {\r\n            // clear previous entry data for this layer\r\n            clearResults(dataKey, layerKey);\r\n\r\n            // eslint-disable-next-line no-underscore-dangle\r\n            const layerMap = Cast<{ _map: L.Map }>(toJsonObject(layer).layer)._map;\r\n            // get map size\r\n            const size = layerMap.getSize();\r\n\r\n            // get extent\r\n            const bounds = layerMap.getBounds();\r\n\r\n            const extent = {\r\n              xmin: bounds.getSouthWest().lng,\r\n              ymin: bounds.getSouthWest().lat,\r\n              xmax: bounds.getNorthEast().lng,\r\n              ymax: bounds.getNorthEast().lat,\r\n              spatialReference: {\r\n                wkid: 4326,\r\n              },\r\n            };\r\n\r\n            // check layer type if WMS then use getFeatureInfo to query the data\r\n            if (layer!.type === CONST_LAYER_TYPES.WMS) {\r\n              const ogcWMSLayer = Cast<WMS>(layer);\r\n              let getFeatureInfoResponse: TypeJsonArray | null = null;\r\n              // eslint-disable-next-line no-await-in-loop\r\n              getFeatureInfoResponse = await ogcWMSLayer.getFeatureInfo(latlng, layerMap);\r\n\r\n              if (getFeatureInfoResponse && getFeatureInfoResponse!.length > 0) {\r\n                layersFound.push(\r\n                  Cast<TypeFoundLayers>({\r\n                    layer: layers[layerKey],\r\n                    entries: getFeatureInfoResponse,\r\n                  })\r\n                );\r\n\r\n                // add the found entries to the array\r\n                layers[layerKey].layerData.push(...getFeatureInfoResponse);\r\n\r\n                // save the data\r\n                setLayersData((prevState) => ({\r\n                  ...prevState,\r\n                  [dataKey]: {\r\n                    ...prevState[dataKey],\r\n                    layers,\r\n                  } as AbstractWebLayersClass,\r\n                }));\r\n              }\r\n            } else if (layer!.type === CONST_LAYER_TYPES.ESRI_FEATURE || layer!.type === CONST_LAYER_TYPES.ESRI_DYNAMIC) {\r\n              const ogcEsriLayer = Cast<EsriDynamic | EsriFeature>(layer);\r\n              // generate an identify query url\r\n              const identifyUrl =\r\n                `${ogcEsriLayer!.mapService.options.url}identify?` +\r\n                `f=json` +\r\n                `&tolerance=7` +\r\n                `&mapExtent=${extent.xmin},${extent.ymin},${extent.xmax},${extent.ymax}` +\r\n                `&imageDisplay=${size.x},${size.y},96` +\r\n                `&layers=visible:${layers[layerKey].layer.id}` +\r\n                `&returnFieldName=true` +\r\n                `&sr=4326` +\r\n                `&returnGeometry=true` +\r\n                `&geometryType=esriGeometryPoint&geometry=${latlng.lng},${latlng.lat}`;\r\n\r\n              // fetch the result from the map server\r\n              // eslint-disable-next-line no-await-in-loop\r\n              const response = await fetch(identifyUrl);\r\n\r\n              type TypeJsonResponse = { results: TypeEntry[] };\r\n              // eslint-disable-next-line no-await-in-loop\r\n              const jsonResponse = (await response.json()) as TypeJsonResponse;\r\n\r\n              if (jsonResponse && jsonResponse.results && jsonResponse.results.length > 0) {\r\n                layersFound.push(\r\n                  Cast<TypeFoundLayers>({\r\n                    layer: layers[layerKey],\r\n                    entries: jsonResponse.results,\r\n                  })\r\n                );\r\n\r\n                // add the found entries to the array\r\n                (layers[layerKey].layerData as TypeJsonArray).push(...jsonResponse.results);\r\n\r\n                // save the data\r\n                setLayersData((prevState) => ({\r\n                  ...prevState,\r\n                  [dataKey]: {\r\n                    ...prevState[dataKey],\r\n                    layers,\r\n                  } as AbstractWebLayersClass,\r\n                }));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      let symbology = null;\r\n\r\n      // if the found layers is only one check if we need to go directly to the entry / feature info\r\n      if (layersFound.length === 1) {\r\n        // set the entry data\r\n        selectLayer(layersFound[0].layer);\r\n\r\n        if (layersFound[0]) symbology = getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes);\r\n\r\n        // if there are only one entry found in this layer then go directly to the entry / feature info\r\n        if (layersFound[0].entries.length === 1) {\r\n          selectFeature(\r\n            toJsonObject({\r\n              attributes: layersFound[0].entries[0].attributes,\r\n              displayField: layersFound[0].layer.displayField,\r\n              fieldAliases: layersFound[0].layer.fieldAliases,\r\n              symbol: getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes),\r\n              numOfEntries: 1,\r\n            })\r\n          );\r\n        }\r\n      } else {\r\n        // if multiple layers contains entries then use the symbology of first layer\r\n        if (layersFound.length > 0) {\r\n          symbology = getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes);\r\n        }\r\n\r\n        // if there are multiple layers with entries then display the layer list panel content\r\n        selectLayersList();\r\n      }\r\n\r\n      // save click position\r\n      setClickPos(latlng);\r\n\r\n      // open the details panel\r\n      buttonPanel.panel?.open();\r\n\r\n      const panelContainer = document.querySelectorAll(`[data-id=${buttonPanel.id}]`)[0];\r\n\r\n      // emit an event to display a marker on the click position\r\n      // if there is only one layer with entries the symbology will be of that layer\r\n      // if there is multiple layers with entries then symbology will be of the first layer\r\n      // ...in case of multiple layers with entries, if a user selects a layer it will show the symbology of selected layer\r\n      // if no layers contains any entry then the default symbology with crosshair will show\r\n      api.event.emit(markerDefinitionPayload(EVENT_NAMES.MARKER_ICON.EVENT_MARKER_ICON_SHOW, mapId, latlng, symbology!));\r\n\r\n      // set focus to the close button of the panel\r\n      if (panelContainer) {\r\n        const closeBtn = panelContainer.querySelectorAll('.cgpv-panel-close')[0];\r\n        if (closeBtn) (closeBtn as HTMLElement).focus();\r\n      }\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [mapId, buttonPanel.panel, buttonPanel.id, layersData, clearResults, selectLayer, getSymbol, selectFeature, selectLayersList]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // get the map service layers from the API\r\n    const mapLayers = api.map(mapId).layer.layers;\r\n\r\n    // will be used to store the added map server layers, layers in the map server etc...\r\n    const data: Record<string, AbstractWebLayersClass> = {};\r\n\r\n    // loop through each map server layer loaded from the map config and created using the API\r\n    const layerIds = Object.keys(mapLayers);\r\n\r\n    layerIds.forEach(async (id: string) => {\r\n      const mapLayer = mapLayers[id];\r\n      data[mapLayer.id] = Cast<AbstractWebLayersClass>({\r\n        // the map server layer id\r\n        id: mapLayer.id,\r\n        name: mapLayer.name,\r\n        // the type of the map server layer (WMS, Dynamic, Feature)\r\n        type: mapLayer.type,\r\n        // the layer class\r\n        layer: mapLayer,\r\n        // an object that will contains added layers from the map server layer\r\n        layers: {},\r\n      });\r\n\r\n      // check each map server layer type and add it to the layers object of the map server in the data array\r\n      if (webLayerIsWMS(mapLayer)) {\r\n        // get layer ids / entries from the loaded WMS layer\r\n        const { entries } = mapLayer;\r\n\r\n        if (entries)\r\n          for (let i = 0; i < entries.length; i++) {\r\n            const layerId = entries[i];\r\n\r\n            // query the layer information\r\n            // eslint-disable-next-line no-await-in-loop\r\n            const layerInfo = await queryServer(mapLayer.mapService.options.url! + layerId);\r\n\r\n            // try to add the legend image url for the WMS layer\r\n            // const legendImageUrl = `${ogcWMSLayer.url}?request=GetLegendGraphic&version=1.0.0&Service=WMS&format=image/png&layer=${layerId}`;\r\n            const legendImageUrl = mapLayer.getLegendGraphic();\r\n\r\n            // assign the url to the renderer\r\n            if (layerInfo.drawingInfo && layerInfo.drawingInfo.renderer && layerInfo.drawingInfo.renderer.symbol) {\r\n              Object.defineProperties(layerInfo.drawingInfo.renderer.symbol, {\r\n                legendImageUrl: {\r\n                  value: legendImageUrl,\r\n                },\r\n              });\r\n            }\r\n\r\n            addLayer(mapLayer, data, layerInfo, false);\r\n          }\r\n      } else if (webLayerIsEsriFeature(mapLayer)) {\r\n        // query the layer information, feature layer URL will end by a number provided in the map config\r\n        const layerInfo = await queryServer(mapLayer.url);\r\n\r\n        addLayer(mapLayer, data, layerInfo, false);\r\n      } else if (webLayerIsEsriDynamic(mapLayer)) {\r\n        // get active layers\r\n        const entries = mapLayer.layer!.getLayers();\r\n\r\n        const activeLayers: Record<number, number> = {};\r\n\r\n        // change active layers to keys so it can be compared with id in all layers\r\n        entries.forEach((entry: number) => {\r\n          activeLayers[entry] = entry;\r\n        });\r\n\r\n        // get the metadata of the dynamic layer\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        mapLayer.layer!.metadata(async (error: any, res: { layers: { id: string; subLayerIds: string[] }[] }) => {\r\n          if (error) return;\r\n\r\n          if (res.layers) {\r\n            // loop through each layer in the dynamic layer\r\n            for (let i = 0; i < res.layers.length; i++) {\r\n              const layerData = res.layers[i];\r\n\r\n              // if the index of the layer is one of the entries provided in the map config\r\n              if (layerData.id in activeLayers) {\r\n                // query the layer information from the map server by appending the index at the end of the URL\r\n                // eslint-disable-next-line no-await-in-loop\r\n                const layerInfo = await queryServer((mapLayer.layer!.options as L.esri.DynamicMapLayerOptions).url + layerData.id);\r\n\r\n                addLayer(mapLayer, data, layerInfo, layerData.subLayerIds !== null && layerData.subLayerIds !== undefined);\r\n\r\n                // if this layer is a group layer then loop through the sub layers and add them\r\n                if (layerData.subLayerIds) {\r\n                  for (let j = 0; j < layerData.subLayerIds.length; j++) {\r\n                    const subLayer = layerData.subLayerIds[j];\r\n\r\n                    // eslint-disable-next-line no-await-in-loop\r\n                    const subLayerInfo = await queryServer((mapLayer.layer!.options as L.esri.DynamicMapLayerOptions).url + subLayer);\r\n\r\n                    addLayer(mapLayer, data, subLayerInfo, false);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    setLayersData(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // handle map click\r\n    mapInstance.on('click', async (e: L.LeafletMouseEvent) => {\r\n      if (!e.originalEvent.shiftKey) {\r\n        handleOpenDetailsPanel(e.latlng);\r\n      }\r\n    });\r\n\r\n    // handle crosshair enter\r\n    api.event.on(\r\n      EVENT_NAMES.DETAILS_PANEL.EVENT_DETAILS_PANEL_CROSSHAIR_ENTER,\r\n      (payload) => {\r\n        if (payloadIsALatLng(payload)) {\r\n          if (payload.handlerName === mapId) {\r\n            handleOpenDetailsPanel(payload.latLng);\r\n          }\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n\r\n    return () => {\r\n      mapInstance.off('click');\r\n      api.event.off(EVENT_NAMES.DETAILS_PANEL.EVENT_DETAILS_PANEL_CROSSHAIR_ENTER, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [handleOpenDetailsPanel, mapId, mapInstance]);\r\n\r\n  // h is a reference to this.createElement\r\n  // createElement is a React function to create React HTML elements\r\n  // It takes 3 arguments, the tag element name, the attributes of the element and the content of the element\r\n  return (\r\n    <div className={classes.mainContainer}>\r\n      {!layersList && !featureList && !featureInfo && <div>{t('click_map')}</div>}\r\n      {layersList && (\r\n        <LayersList\r\n          clickPos={clickPos}\r\n          layersData={layersData}\r\n          selectFeature={selectFeature}\r\n          selectLayer={selectLayer}\r\n          getSymbol={getSymbol}\r\n          mapId={mapId}\r\n        />\r\n      )}\r\n      {featureList && (\r\n        <FeaturesList\r\n          getSymbol={getSymbol}\r\n          buttonPanel={buttonPanel}\r\n          selectLayer={selectLayer}\r\n          selectedLayer={selectedLayer}\r\n          selectFeature={selectFeature}\r\n          setPanel={setPanel}\r\n        />\r\n      )}\r\n      {featureInfo && (\r\n        <FeatureInfo buttonPanel={buttonPanel} selectedFeature={selectedFeature as TypeSelectedFeature} setPanel={setPanel} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PanelContent;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  Cast,\r\n  AbstractPluginClass,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  toJsonObject,\r\n  TypeButtonProps,\r\n  TypePanelProps,\r\n  TypeWindow,\r\n} from 'geoview-core';\r\nimport { payloadBaseClass } from 'geoview-core/src/api/events/payloads/payload-base-class';\r\n\r\nimport PanelContent from './panel-content';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass DetailsPlugin extends AbstractPluginClass {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(id: string, props: TypePluginOptions) {\r\n    super(id, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    'en-CA': {\r\n      detailsPanel: 'Details',\r\n      nothing_found: 'Nothing found',\r\n      click_map: 'Choose a point on the map to start',\r\n      action_back: 'Back',\r\n    },\r\n    'fr-CA': {\r\n      detailsPanel: 'Détails',\r\n      nothing_found: 'Aucun résultat',\r\n      click_map: 'Choisissez un point sur la carte pour commencer',\r\n      action_back: 'Retour',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    const { language } = api.map(mapId);\r\n\r\n    // button props\r\n    const button: TypeButtonProps = {\r\n      // set ID to detailsPanel so that it can be accessed from the core viewer\r\n      id: 'detailsPanelButton',\r\n      tooltip: this.translations[language].detailsPanel as string,\r\n      tooltipPlacement: 'right',\r\n      icon: '<i class=\"material-icons\">details</i>',\r\n      visible: true,\r\n      type: 'icon',\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[language].detailsPanel,\r\n      icon: '<i class=\"material-icons\">details</i>',\r\n      width: 300,\r\n    };\r\n\r\n    // create a new button panel on the appbar\r\n    this.buttonPanel = api.map(mapId as string).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId as string} />);\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.map(mapId as string).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\r\n      api.event.emit(payloadBaseClass(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_HIDE, mapId));\r\n    }\r\n  }\r\n}\r\n\r\nexport default DetailsPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['details-panel'] = Cast<AbstractPluginClass>(DetailsPlugin);\r\n"],"names":["w","window","props","layersData","selectFeature","selectLayer","getSymbol","clickPos","mapId","cgpv","api","ui","EVENT_NAMES","eventNames","classes","makeStyles","layersContainer","overflow","overflowY","width","layerItem","display","alignItems","justifyContent","margin","padding","boxSizing","cursor","backgroundColor","zIndex","border","layerParentText","fontSize","fontWeight","layerCountTextContainer","layerFeatureCount","minWidth","height","boxShadow","marginRight","color","layerItemText","whiteSpace","textOverflow","useStyles","goToFeatureList","data","layerKey","layers","layerData","displayField","fieldAliases","renderer","length","attributes","toJsonObject","symbol","numOfEntries","className","Object","keys","map","dataKey","index","layer","groupLayer","tabIndex","onKeyDown","e","key","preventDefault","role","title","name","type","disabled","onClick","event","emit","markerDefinitionPayload","MARKER_ICON","EVENT_MARKER_ICON_SHOW","undefined","id","selectedLayer","setPanel","buttonPanel","react","useTranslation","useEffect","featuresContainer","featureItem","featureIconTextContainer","featureItemIconContainer","featureItemIcon","featureItemText","marginLeft","t","goToFeatureInfo","symbolImage","panel","addActionButton","feature","i","attributesDisplayField","OBJECTID","imageData","src","contentType","alt","legendImageUrl","selectedFeature","featureInfoContainer","featureInfoHeader","featureInfoHeaderIconContainer","featureInfoHeaderIcon","featureInfoHeaderText","featureInfoItemsContainer","flexDirection","marginTop","featureInfoItem","featureInfoItemKey","featureInfoItemValue","attrKey","attributeAlias","attributeValue","useState","useCallback","setLayersData","setSelectedLayer","setSelectedFeature","layersList","setLayersList","featureList","setFeatureList","featureInfo","setFeatureInfo","setClickPos","mainContainer","mapInstance","uniqueValueInfos","filter","info","value","field1","field2","field3","queryServer","url","fetch","response","json","result","showLayersList","showFeaturesList","showFeaturesInfo","removeActionButton","payloadBaseClass","PANEL","EVENT_PANEL_CHANGE_CONTENT","selectLayersList","featureData","Cast","addLayer","mapLayer","layerInfo","isGroupLayer","fields","replace","toLowerCase","displayFieldName","forEach","field","alias","drawingInfo","clearResults","prevState","handleOpenDetailsPanel","latlng","layersFound","j","layerMap","_map","size","getSize","bounds","getBounds","extent","xmin","getSouthWest","lng","ymin","lat","xmax","getNorthEast","ymax","spatialReference","wkid","CONST_LAYER_TYPES","ogcWMSLayer","getFeatureInfoResponse","getFeatureInfo","push","entries","ogcEsriLayer","identifyUrl","mapService","options","x","y","jsonResponse","results","symbology","open","panelContainer","document","querySelectorAll","closeBtn","focus","mapLayers","webLayerIsWMS","layerId","getLegendGraphic","defineProperties","webLayerIsEsriFeature","webLayerIsEsriDynamic","getLayers","activeLayers","entry","metadata","error","res","subLayerIds","subLayer","subLayerInfo","on","originalEvent","shiftKey","DETAILS_PANEL","EVENT_DETAILS_PANEL_CROSSHAIR_ENTER","payload","payloadIsALatLng","handlerName","latLng","off","DetailsPlugin","detailsPanel","nothing_found","click_map","action_back","pluginProps","language","button","tooltip","translations","tooltipPlacement","icon","visible","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","EVENT_MARKER_ICON_HIDE","AbstractPluginClass","plugins"],"sourceRoot":""}