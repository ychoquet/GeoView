{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-details-panel/src/layers-list.tsx","webpack://geoview-core/../geoview-details-panel/src/features-list.tsx","webpack://geoview-core/../geoview-details-panel/src/feature-info.tsx","webpack://geoview-core/../geoview-details-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport { markerDefinitionPayload } from 'geoview-core/src/api/events/payloads/marker-definition-payload';\r\nimport { AbstractGeoViewLayer, TypeWindow, toJsonObject } from 'geoview-core';\r\nimport { TypeLayersListProps } from './details-panel-types';\r\n\r\n// get the window object\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that will list the map server layers defined in the map config\r\n *\r\n * @param {TypeLayersListProps} props properties passed to the component\r\n * @returns a React JSX Element containing map server layers\r\n */\r\nfunction LayersList(props: TypeLayersListProps): JSX.Element {\r\n  const { layersData, selectFeature, selectLayer, getSymbol, clickPos, mapId } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { api, ui } = cgpv;\r\n\r\n  // get event names\r\n  const EVENT_NAMES = api.eventNames;\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    layersContainer: {\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n      width: '100%',\r\n    },\r\n    layerItem: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      margin: '5px 0',\r\n      padding: '10px 5px',\r\n      boxSizing: 'content-box',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n        backgroundColor: '#c9c9c9',\r\n      },\r\n      zIndex: 1000,\r\n      border: 'none',\r\n      width: '100%',\r\n    },\r\n    layerParentText: {\r\n      fontSize: '16px',\r\n      fontWeight: 'bold',\r\n    },\r\n    layerCountTextContainer: {\r\n      display: 'flex',\r\n      // justifyContent: 'space-around',\r\n      alignItems: 'center',\r\n      width: '100%',\r\n    },\r\n    layerFeatureCount: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '32px',\r\n      minWidth: '32px',\r\n      height: '32px',\r\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\r\n      marginRight: '10px',\r\n      color: 'black',\r\n      fontSize: '16px',\r\n      fontWeight: 'bold',\r\n    },\r\n    layerItemText: {\r\n      fontSize: '14px',\r\n      // fontWeight: 'bold',\r\n      whiteSpace: 'nowrap',\r\n      textOverflow: 'ellipsis',\r\n      overflow: 'hidden',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  /**\r\n   * Switch to the feature list / entries panel content\r\n   *\r\n   * @param {Object} data data object of all layers\r\n   * @param {number} layerKey the layer object to list it's entries\r\n   */\r\n  const goToFeatureList = (data: AbstractGeoViewLayer, layerKey: number) => {\r\n    const { layerData, displayField, fieldAliases, renderer } = data.listOfLayerEntryConfig[layerKey];\r\n\r\n    // set the layer entry data\r\n    selectLayer(data.listOfLayerEntryConfig[layerKey]);\r\n\r\n    // check if the layer has only one entry\r\n    if (layerData.length === 1) {\r\n      // go to the entry information skipping entry list\r\n      const attributes = layerData[0]?.attributes;\r\n      selectFeature(\r\n        toJsonObject({\r\n          attributes,\r\n          displayField,\r\n          fieldAliases,\r\n          symbol: getSymbol(renderer, attributes),\r\n          numOfEntries: 1,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.layersContainer}>\r\n      {\r\n        // loop through each map server layer\r\n        Object.keys(layersData).map((dataKey) => {\r\n          const data = layersData[dataKey];\r\n\r\n          return (\r\n            <div key={data.id}>\r\n              {\r\n                // loop through each layer in the map server\r\n                Object.keys(data.layers).map((layerKey: string, index: number) => {\r\n                  const { layer, layerData, groupLayer } = data.layers[layerKey];\r\n\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      tabIndex={layerData.length > 0 && !groupLayer ? 0 : -1}\r\n                      onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                          if (!groupLayer) {\r\n                            e.preventDefault();\r\n                            goToFeatureList(data, layerKey);\r\n                          }\r\n                        }\r\n                      }}\r\n                      role=\"button\"\r\n                    >\r\n                      {\r\n                        // if the map server is a group layer then display its title as a header of it's sub layers\r\n                        groupLayer ? (\r\n                          <div className={classes.layerParentText} title={layer.name}>\r\n                            {layer.name}\r\n                          </div>\r\n                        ) : (\r\n                          <button\r\n                            type=\"button\"\r\n                            tabIndex={-1}\r\n                            className={classes.layerItem}\r\n                            disabled={layerData.length === 0}\r\n                            onClick={\r\n                              layerData.length > 0\r\n                                ? () => {\r\n                                    // if a layer is clicked\r\n                                    goToFeatureList(data, layerKey);\r\n\r\n                                    api.event.emit(\r\n                                      markerDefinitionPayload(\r\n                                        EVENT_NAMES.MARKER_ICON.EVENT_MARKER_ICON_SHOW,\r\n                                        mapId,\r\n                                        clickPos!,\r\n                                        getSymbol(data.layers[layerKey].renderer, layerData[0].attributes)!\r\n                                      )\r\n                                    );\r\n                                  }\r\n                                : undefined\r\n                            }\r\n                          >\r\n                            <div className={classes.layerCountTextContainer}>\r\n                              <span className={classes.layerFeatureCount}>{layerData.length}</span>\r\n                              <div className={classes.layerItemText} title={layer.name}>\r\n                                {layer.name}\r\n                              </div>\r\n                            </div>\r\n                          </button>\r\n                        )\r\n                      }\r\n                    </div>\r\n                  );\r\n                })\r\n              }\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LayersList;\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable jsx-a11y/interactive-supports-focus */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport { TypeJsonValue, TypeWindow, toJsonObject, TypeJsonObject } from 'geoview-core';\r\nimport { TypeLayersEntry, TypeFeaturesListProps } from './details-panel-types';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component to display layer entries\r\n *\r\n * @param {TypeFeaturesListProps} props properties of the component\r\n * @returns A react JSX Element containing the entry list of a layer\r\n */\r\nfunction FeaturesList(props: TypeFeaturesListProps): JSX.Element {\r\n  const { selectedLayer, selectLayer, selectFeature, setPanel, getSymbol, buttonPanel } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { react, ui, useTranslation } = cgpv;\r\n\r\n  const { useEffect } = react;\r\n\r\n  const { displayField, fieldAliases, layerData, renderer } = selectedLayer as TypeLayersEntry;\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    featuresContainer: {\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n      width: '100%',\r\n    },\r\n    featureItem: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      margin: '5px 0',\r\n      padding: '10px 5px',\r\n      boxSizing: 'content-box',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n        backgroundColor: '#c9c9c9',\r\n      },\r\n      zIndex: 1000,\r\n    },\r\n    featureIconTextContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      width: '100%',\r\n    },\r\n    featureItemIconContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '32px',\r\n      minWidth: '32px',\r\n      height: '32px',\r\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\r\n    },\r\n    featureItemIcon: {},\r\n    featureItemText: {\r\n      display: 'inline-block',\r\n      width: '100%',\r\n      fontWeight: 400,\r\n      marginLeft: '10px',\r\n      overflow: 'hidden',\r\n      whiteSpace: 'nowrap',\r\n      textOverflow: 'ellipsis',\r\n      fontSize: '16px',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const { t } = useTranslation();\r\n\r\n  /**\r\n   * Switch to the feature / entry info panel content\r\n   *\r\n   * @param {Object} attributes attributes object for the layer attributes\r\n   * @param {Object} symbolImage symbology image data\r\n   */\r\n  const goToFeatureInfo = (attributes: TypeJsonValue, symbolImage: TypeJsonValue) => {\r\n    // add a back action button on the entry information panel to go back to the entry list\r\n    buttonPanel.panel?.addActionButton('back', t('action_back'), '<i class=\"material-icons\">keyboard_backspace</i>', () => {\r\n      if (layerData.length === 1) {\r\n        setPanel(true, false, false);\r\n      } else {\r\n        // go back to entry list when clicked\r\n        selectLayer();\r\n      }\r\n    });\r\n\r\n    // set panel content to the entry information\r\n    selectFeature(\r\n      toJsonObject({\r\n        attributes,\r\n        displayField,\r\n        fieldAliases,\r\n        symbol: symbolImage,\r\n        numOfEntries: layerData.length,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // add new action button that goes back to the layers list\r\n    buttonPanel.panel?.addActionButton('back', t('action_back'), '<i class=\"material-icons\">keyboard_backspace</i>', () => {\r\n      // set the panel content back to the map server layer list\r\n      setPanel(true, false, false);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return layerData.length > 0 ? (\r\n    <div className={classes.featuresContainer}>\r\n      {\r\n        // loop through each entry\r\n        layerData.map((feature: TypeJsonObject, i: number) => {\r\n          const attributes = feature?.attributes;\r\n\r\n          // get symbol\r\n          const symbolImage = getSymbol(renderer, attributes);\r\n\r\n          // get the title from the attributes, if no title was defined in the layer then set it to the objectId\r\n          const attributesDisplayField = attributes[displayField] as string;\r\n          const title =\r\n            attributesDisplayField && attributesDisplayField.length > 0 ? `${attributesDisplayField}` : `${attributes.OBJECTID}`;\r\n\r\n          return (\r\n            <div\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              key={i}\r\n              tabIndex={0}\r\n              onKeyDown={(e) => {\r\n                if (e.key === 'Enter') {\r\n                  e.preventDefault();\r\n                  goToFeatureInfo(attributes, symbolImage);\r\n                }\r\n              }}\r\n              role=\"button\"\r\n            >\r\n              <div\r\n                className={classes.featureItem}\r\n                onClick={() => {\r\n                  goToFeatureInfo(attributes, symbolImage);\r\n                }}\r\n                role=\"button\"\r\n              >\r\n                <div className={classes.featureIconTextContainer}>\r\n                  <div className={classes.featureItemIconContainer}>\r\n                    {symbolImage!.imageData ? (\r\n                      <img\r\n                        className={classes.featureItemIcon}\r\n                        src={`data:${symbolImage!.contentType};base64, ${symbolImage!.imageData}`}\r\n                        alt=\"\"\r\n                      />\r\n                    ) : renderer.symbol.legendImageUrl ? (\r\n                      <img className={classes.featureItemIcon} src={renderer.symbol.legendImageUrl} alt=\"\" />\r\n                    ) : (\r\n                      <div className={classes.featureItemIcon} />\r\n                    )}\r\n                  </div>\r\n                  <span className={classes.featureItemText} title={title}>\r\n                    {title}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  ) : (\r\n    <div className={classes.featureItemText}>{t('nothing_found')}</div>\r\n  );\r\n}\r\n\r\nexport default FeaturesList;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\r\n/* eslint-disable no-nested-ternary */\r\nimport { TypeJsonArray, TypeWindow } from 'geoview-core';\r\nimport { TypeFeatureInfoProps } from './details-panel-types';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that will return entry / feature information\r\n *\r\n * @param {Object} props properties for the component\r\n * @returns A react JSX Element with the entry / feature information\r\n */\r\nfunction FeatureInfo(props: TypeFeatureInfoProps): JSX.Element {\r\n  const { buttonPanel, selectedFeature, setPanel } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { react, ui, useTranslation } = cgpv;\r\n\r\n  const { ArrowBackIcon } = ui.elements;\r\n\r\n  const { useEffect } = react;\r\n\r\n  const { displayField, fieldAliases, attributes, symbol, numOfEntries } = selectedFeature;\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    featureInfoContainer: {\r\n      width: '100%',\r\n    },\r\n    featureInfoHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    featureInfoHeaderIconContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '32px',\r\n      minWidth: '32px',\r\n      height: '32px',\r\n      boxShadow: '0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%)',\r\n    },\r\n    featureInfoHeaderIcon: {},\r\n    featureInfoHeaderText: {\r\n      marginLeft: '10px',\r\n      width: '100%',\r\n      fontSize: 18,\r\n    },\r\n    featureInfoItemsContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      marginTop: 20,\r\n    },\r\n    featureInfoItem: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      margin: '5px 0',\r\n    },\r\n    featureInfoItemKey: {\r\n      fontWeight: 'bold',\r\n      fontSize: 16,\r\n    },\r\n    featureInfoItemValue: {\r\n      fontSize: 16,\r\n      backgroundColor: '#ddd',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    // add new action button that goes back to the entry / features list or layers list\r\n    buttonPanel.panel?.addActionButton('back', t('action_back'), <ArrowBackIcon />, () => {\r\n      if (numOfEntries === 1) {\r\n        // set panel back to layers list\r\n        setPanel(true, false, false);\r\n      } else {\r\n        // set panel back to entry / feature list\r\n        setPanel(false, true, false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.featureInfoContainer}>\r\n      <div className={classes.featureInfoHeader}>\r\n        <div className={classes.featureInfoHeaderIconContainer}>\r\n          {symbol.imageData ? (\r\n            <img className={classes.featureInfoHeaderIcon} src={`data:${symbol.contentType};base64, ${symbol.imageData}`} alt=\"\" />\r\n          ) : symbol.legendImageUrl ? (\r\n            <img className={classes.featureInfoHeaderIcon} src={symbol.legendImageUrl as string} alt=\"\" />\r\n          ) : (\r\n            <div className={classes.featureInfoHeaderIcon} />\r\n          )}\r\n        </div>\r\n        <span className={classes.featureInfoHeaderText}>\r\n          {attributes[displayField as string] && (attributes[displayField as string] as TypeJsonArray).length > 0\r\n            ? `${attributes[displayField as string]}`\r\n            : `${attributes.OBJECTID}`}\r\n        </span>\r\n      </div>\r\n      <div className={classes.featureInfoItemsContainer}>\r\n        {\r\n          // loop through each attribute in the selected entry / feature\r\n          Object.keys(attributes).map((attrKey) => {\r\n            let attributeAlias = fieldAliases[attrKey] as string;\r\n            const attributeValue = attributes[attrKey] as string;\r\n\r\n            if (!attributeAlias) attributeAlias = attrKey;\r\n\r\n            return (\r\n              attributeValue.length > 0 &&\r\n              attributeAlias !== 'OBJECTID' &&\r\n              attributeAlias !== 'SHAPE' &&\r\n              attributeAlias !== 'SHAPE_Length' &&\r\n              attributeAlias !== 'SHAPE_Area' && (\r\n                <div className={classes.featureInfoItem} key={attrKey} tabIndex={0}>\r\n                  <span className={classes.featureInfoItemKey}>{attributeAlias}</span>\r\n                  <span className={classes.featureInfoItemValue}>{attributeValue}</span>\r\n                </div>\r\n              )\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FeatureInfo;\r\n","import {\r\n  Cast,\r\n  TypeJsonValue,\r\n  AbstractGeoViewLayer,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeJsonArray,\r\n  geoviewLayerIsWMS,\r\n  geoviewLayerIsEsriDynamic,\r\n  geoviewLayerIsEsriFeature,\r\n  WMS,\r\n  EsriFeature,\r\n  EsriDynamic,\r\n  CONST_LAYER_TYPES,\r\n  payloadBaseClass,\r\n  payloadIsALngLat,\r\n  markerDefinitionPayload,\r\n  TypeButtonPanel,\r\n} from 'geoview-core';\r\n\r\nimport LayersList from './layers-list';\r\nimport FeaturesList from './features-list';\r\nimport FeatureInfo from './feature-info';\r\nimport {\r\n  TypeEntry,\r\n  TypeFoundLayers,\r\n  TypeFieldAlias,\r\n  TypeLayerInfo,\r\n  TypeSelectedFeature,\r\n  TypeRendererSymbol,\r\n  TypeLayersEntry,\r\n  TypeFieldNameAliasArray,\r\n} from './details-panel-types';\r\n\r\ntype TypePanelContentProps = {\r\n  buttonPanel: TypeButtonPanel;\r\n  mapId: string;\r\n};\r\n\r\n// get the window object\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @param {TypePanelContentProps} props the properties of the pane content\r\n * @returns A React JSX Element with the details panel\r\n */\r\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\r\n  const { buttonPanel, mapId } = props;\r\n\r\n  // access the cgpv object from the window object\r\n  const { cgpv } = w;\r\n\r\n  // access the api calls\r\n  const { api, react, ui, useTranslation } = cgpv;\r\n\r\n  // get event names\r\n  const EVENT_NAMES = api.eventNames;\r\n\r\n  const { useState, useCallback, useEffect } = react;\r\n\r\n  const [layersData, setLayersData] = useState<Record<string, AbstractGeoViewLayer>>({});\r\n  const [selectedLayer, setSelectedLayer] = useState({});\r\n  const [selectedFeature, setSelectedFeature] = useState({});\r\n\r\n  const [layersList, setLayersList] = useState(false);\r\n  const [featureList, setFeatureList] = useState(false);\r\n  const [featureInfo, setFeatureInfo] = useState(false);\r\n\r\n  const [clickPos, setClickPos] = useState<number[]>();\r\n\r\n  // use material ui theming\r\n  const useStyles = ui.makeStyles(() => ({\r\n    mainContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const { t } = useTranslation();\r\n\r\n  // get the map instance\r\n  const mapInstance = api.map(mapId).map;\r\n\r\n  /**\r\n   * Get the symbology from the layer\r\n   *\r\n   * @param {TypeRendererSymbol} renderer the display renderer containing the symbol\r\n   * @param {TypeJsonObject} attributes the attributes of the selected layer features\r\n   *\r\n   * @returns {TypeJsonObject} the symbology containing the imageData\r\n   */\r\n  const getSymbol = useCallback((renderer: TypeRendererSymbol, attributes: TypeJsonObject): TypeJsonObject | null => {\r\n    let symbolImage: TypeJsonObject | null = null;\r\n\r\n    // check if a symbol object exists in the renderer\r\n    if (renderer && renderer.symbol) {\r\n      symbolImage = toJsonObject(renderer.symbol);\r\n    } else if (renderer && renderer.uniqueValueInfos && renderer.uniqueValueInfos.length > 0) {\r\n      // if symbol not found then check if there are multiple symbologies\r\n      symbolImage = renderer.uniqueValueInfos.filter((info) => {\r\n        // return the correct symbology matching the layer using the layer defined fields\r\n        return info.value === (attributes[renderer.field1] || attributes[renderer.field2] || attributes[renderer.field3]);\r\n      })[0].symbol;\r\n    }\r\n\r\n    return symbolImage;\r\n  }, []);\r\n\r\n  /**\r\n   * Fetch the json response from the map server\r\n   *\r\n   * @param {string} url the url of the map server\r\n   * @returns {Promise<TypeLayerInfo>} a json containing the result of the query\r\n   */\r\n  const queryServer = async (url: string): Promise<TypeLayerInfo> => {\r\n    // fetch the map server returning a json object\r\n    const response = await fetch(`${url}?f=json`);\r\n\r\n    const result = await response.json();\r\n\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Set the content of the panel by toggling between the contents\r\n   *\r\n   * @param {boolean} showLayersList a boolean value to show the layers list content\r\n   * @param {boolean} showFeaturesList a boolean value to show the entry / feature list content\r\n   * @param {boolean} showFeaturesInfo a boolean value to show the entry / feature info content\r\n   */\r\n  const setPanel = useCallback(\r\n    (showLayersList: boolean, showFeaturesList: boolean, showFeaturesInfo: boolean) => {\r\n      // remove the back button if it exists\r\n      buttonPanel.panel?.removeActionButton('back');\r\n\r\n      // show the correct panel content\r\n      setLayersList(showLayersList);\r\n      setFeatureList(showFeaturesList);\r\n      setFeatureInfo(showFeaturesInfo);\r\n\r\n      // emit content change event so the panel can focus on close button\r\n      api.event.emit(payloadBaseClass(EVENT_NAMES.PANEL.EVENT_PANEL_CHANGE_CONTENT, mapId), buttonPanel.buttonPanelId);\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [buttonPanel.panel, mapId]\r\n  );\r\n\r\n  /**\r\n   * Set the layers list as the panel content\r\n   */\r\n  const selectLayersList = useCallback(() => {\r\n    setPanel(true, false, false);\r\n  }, [setPanel]);\r\n\r\n  /**\r\n   * Set the entry / feature list as the panel content\r\n   */\r\n  const selectLayer = useCallback(\r\n    /**\r\n     * Set the entry / feature list object\r\n     *\r\n     * @param {TypeLayersEntry} layerData an object containing the entry / feature list\r\n     */\r\n    (layerData?: TypeLayersEntry) => {\r\n      // set the entry / feature list data\r\n      setSelectedLayer(layerData || {});\r\n\r\n      // set the panel to show the entry / feature list content\r\n      setPanel(false, true, false);\r\n    },\r\n    [setSelectedLayer, setPanel]\r\n  );\r\n\r\n  /**\r\n   * Set the entry / feature info object\r\n   *\r\n   * @param {TypeJsonValue} featureData an object containing the entry / feature data\r\n   */\r\n  const selectFeature = useCallback(\r\n    (featureData: TypeJsonValue) => {\r\n      // set the entry / feature data\r\n      setSelectedFeature(Cast<React.SetStateAction<TypeJsonObject>>(featureData));\r\n\r\n      // set the panel to show the entry / feature info content\r\n      setPanel(false, false, true);\r\n    },\r\n    [setSelectedFeature, setPanel]\r\n  );\r\n\r\n  /**\r\n   * Get all aliases from the defined layer list, will be used when displaying entry / feature info\r\n   *\r\n   * @param {TypeFieldNameAliasArray} fields a list of the fields defined in the layer\r\n   * @returns {TypeJsonValue} an object containing field name and it's alias\r\n   */\r\n  const getFieldAliases = (fields: TypeFieldNameAliasArray): TypeFieldAlias => {\r\n    const fieldAliases: TypeFieldAlias = {};\r\n\r\n    if (fields) {\r\n      fields.forEach((field: { name: string; alias: string }) => {\r\n        const { name, alias } = field;\r\n\r\n        fieldAliases[name] = alias;\r\n      });\r\n    }\r\n\r\n    return fieldAliases;\r\n  };\r\n\r\n  /**\r\n   * Add a layer to the panel layer list\r\n   *\r\n   * @param {AbstractGeoViewLayer} mapLayer the main object that contains added layers from the api\r\n   * @param {Record<string, AbstractGeoViewLayer>} data the data object that contains all layers\r\n   * @param {TypeLayerInfo} layerInfo the layer information\r\n   * @param {boolean} isGroupLayer a boolean value to check if this layer is a group layer\r\n   */\r\n  const addLayer = (\r\n    mapLayer: AbstractGeoViewLayer,\r\n    data: Record<string, AbstractGeoViewLayer>,\r\n    layerInfo: TypeLayerInfo,\r\n    isGroupLayer: boolean\r\n  ) => {\r\n    // get the layers object from the map, it begins with an empty object then adds each layer\r\n    const { layers } = data[mapLayer.mapId];\r\n\r\n    // add the layer to the layers object, the layer will have a key generated from the id and name of the layer seperated by dashes\r\n    layers[`${layerInfo.layerPath}-${layerInfo.name.replace(/\\s+/g, '-').toLowerCase()}`] = Cast<TypeLayersEntry>({\r\n      // the information about this layer\r\n      layer: layerInfo,\r\n      // is it a group layer or not\r\n      groupLayer: isGroupLayer,\r\n      // the layer entry / feature data, will be filled / reset when a click / crosshair event is triggered on an element\r\n      layerData: [],\r\n      // the default display field or field name defined in the layer\r\n      displayField: layerInfo.displayField || layerInfo.displayFieldName || '',\r\n      // the defined field aliases by the layer\r\n      fieldAliases: getFieldAliases(layerInfo.fields),\r\n      // the renderer object containing the symbology\r\n      renderer: layerInfo.drawingInfo?.renderer,\r\n    });\r\n\r\n    // save the layers back to the data object on the specified map server layer\r\n    // eslint-disable-next-line no-param-reassign\r\n    data[mapLayer.mapId].layers = layers;\r\n  };\r\n\r\n  /**\r\n   * Clear / Reset the layer data containing entries / features selected on a mouse click / crosshair events\r\n   */\r\n  const clearResults = useCallback(\r\n    /**\r\n     * Set the dataKey and layerKey to the selected layer to be cleared\r\n     *\r\n     * @param {string} dataKey the map server layer key / id\r\n     * @param {string} layerKey the layer key / id\r\n     */\r\n    (dataKey: string, layerKey: string) => {\r\n      const data = layersData[dataKey];\r\n\r\n      const { layers } = data;\r\n\r\n      // clear out previous results\r\n      layers[layerKey].layerData = [];\r\n\r\n      // save the new cleared out layerData\r\n      setLayersData((prevState) => ({\r\n        ...prevState,\r\n        [dataKey]: {\r\n          ...prevState[dataKey],\r\n          layers,\r\n        } as AbstractGeoViewLayer,\r\n      }));\r\n    },\r\n    [layersData]\r\n  );\r\n\r\n  /**\r\n   * Handle opening the details panel with correct panel content\r\n   * Identify the layers that matches the selected point from a mouse click / crosshair events\r\n   *\r\n   * @param {number[]} lnglat an array containing the longitude and latitude values from the event\r\n   */\r\n  const handleOpenDetailsPanel = useCallback(\r\n    async (lnglat: number[]) => {\r\n      // variable will be used later on as a counter to check which panel content should be selected\r\n      const layersFound: TypeFoundLayers[] = [];\r\n\r\n      // loop through all the map server layers\r\n      for (let i = 0; i < Object.keys(layersData).length; i++) {\r\n        const dataKey = Object.keys(layersData)[i];\r\n        const data = layersData[dataKey];\r\n\r\n        const { layer, layers, type } = data;\r\n\r\n        // loop through all layers in each map server\r\n        for (let j = 0; j < Object.keys(layers).length; j++) {\r\n          const layerKey = Object.keys(layers)[j];\r\n\r\n          // we don't want to query a group layer because we already added it's sub layers\r\n          if (!layers[layerKey].groupLayer) {\r\n            // clear previous entry data for this layer\r\n            clearResults(dataKey, layerKey);\r\n\r\n            // eslint-disable-next-line no-underscore-dangle\r\n            const layerMap = api.map(mapId).map;\r\n            // get map size\r\n            const size = layerMap.getSize()!;\r\n\r\n            // get extent\r\n            const bounds = layerMap.getView().calculateExtent();\r\n\r\n            const extent = {\r\n              xmin: bounds[0],\r\n              ymin: bounds[1],\r\n              xmax: bounds[2],\r\n              ymax: bounds[3],\r\n              spatialReference: {\r\n                wkid: 4326,\r\n              },\r\n            };\r\n\r\n            // check layer type if WMS then use getFeatureInfo to query the data\r\n            if (type === CONST_LAYER_TYPES.WMS) {\r\n              const ogcWMSLayer = Cast<WMS>(layer);\r\n              let getFeatureInfoResponse: TypeJsonArray | null = null;\r\n              // eslint-disable-next-line no-await-in-loop\r\n              getFeatureInfoResponse = await ogcWMSLayer.getFeatureInfo(lnglat);\r\n\r\n              if (getFeatureInfoResponse && getFeatureInfoResponse!.length > 0) {\r\n                layersFound.push(\r\n                  Cast<TypeFoundLayers>({\r\n                    layer: layers[layerKey],\r\n                    entries: getFeatureInfoResponse,\r\n                  })\r\n                );\r\n\r\n                // add the found entries to the array\r\n                layers[layerKey].layerData.push(...getFeatureInfoResponse);\r\n\r\n                // save the data\r\n                setLayersData((prevState) => ({\r\n                  ...prevState,\r\n                  [dataKey]: {\r\n                    ...prevState[dataKey],\r\n                    layers,\r\n                  } as AbstractGeoViewLayer,\r\n                }));\r\n              }\r\n            } else if (type === CONST_LAYER_TYPES.ESRI_FEATURE || type === CONST_LAYER_TYPES.ESRI_DYNAMIC) {\r\n              const ogcEsriLayer = Cast<EsriDynamic | EsriFeature>(layer);\r\n              // generate an identify query url\r\n              const identifyUrl =\r\n                `${ogcEsriLayer!.mapService.options.url}identify?` +\r\n                `f=json` +\r\n                `&tolerance=7` +\r\n                `&mapExtent=${extent.xmin},${extent.ymin},${extent.xmax},${extent.ymax}` +\r\n                `&imageDisplay=${size[0]},${size[1]},96` +\r\n                `&layers=visible:${layers[layerKey].layer.id}` +\r\n                `&returnFieldName=true` +\r\n                `&sr=4326` +\r\n                `&returnGeometry=true` +\r\n                `&geometryType=esriGeometryPoint&geometry=${lnglat[0]},${lnglat[1]}`;\r\n\r\n              // fetch the result from the map server\r\n              // eslint-disable-next-line no-await-in-loop\r\n              const response = await fetch(identifyUrl);\r\n\r\n              type TypeJsonResponse = { results: TypeEntry[] };\r\n              // eslint-disable-next-line no-await-in-loop\r\n              const jsonResponse = (await response.json()) as TypeJsonResponse;\r\n\r\n              if (jsonResponse && jsonResponse.results && jsonResponse.results.length > 0) {\r\n                layersFound.push(\r\n                  Cast<TypeFoundLayers>({\r\n                    layer: layers[layerKey],\r\n                    entries: jsonResponse.results,\r\n                  })\r\n                );\r\n\r\n                // add the found entries to the array\r\n                (layers[layerKey].layerData as TypeJsonArray).push(...jsonResponse.results);\r\n\r\n                // save the data\r\n                setLayersData((prevState) => ({\r\n                  ...prevState,\r\n                  [dataKey]: {\r\n                    ...prevState[dataKey],\r\n                    layers,\r\n                  } as AbstractGeoViewLayer,\r\n                }));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      let symbology = null;\r\n\r\n      // if the found layers is only one check if we need to go directly to the entry / feature info\r\n      if (layersFound.length === 1) {\r\n        // set the entry data\r\n        selectLayer(layersFound[0].layer);\r\n\r\n        if (layersFound[0]) symbology = getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes);\r\n\r\n        // if there are only one entry found in this layer then go directly to the entry / feature info\r\n        if (layersFound[0].entries.length === 1) {\r\n          selectFeature(\r\n            toJsonObject({\r\n              attributes: layersFound[0].entries[0].attributes,\r\n              displayField: layersFound[0].layer.displayField,\r\n              fieldAliases: layersFound[0].layer.fieldAliases,\r\n              symbol: getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes),\r\n              numOfEntries: 1,\r\n            })\r\n          );\r\n        }\r\n      } else {\r\n        // if multiple layers contains entries then use the symbology of first layer\r\n        if (layersFound.length > 0) {\r\n          symbology = getSymbol(layersFound[0].layer.renderer, layersFound[0].entries[0].attributes);\r\n        }\r\n\r\n        // if there are multiple layers with entries then display the layer list panel content\r\n        selectLayersList();\r\n      }\r\n\r\n      // save click position\r\n      setClickPos(lnglat);\r\n\r\n      // open the details panel\r\n      buttonPanel.panel?.open();\r\n\r\n      const panelContainer = document.querySelectorAll(`[data-id=${buttonPanel.buttonPanelId}]`)[0];\r\n\r\n      // emit an event to display a marker on the click position\r\n      // if there is only one layer with entries the symbology will be of that layer\r\n      // if there is multiple layers with entries then symbology will be of the first layer\r\n      // ...in case of multiple layers with entries, if a user selects a layer it will show the symbology of selected layer\r\n      // if no layers contains any entry then the default symbology with crosshair will show\r\n      api.event.emit(markerDefinitionPayload(EVENT_NAMES.MARKER_ICON.EVENT_MARKER_ICON_SHOW, mapId, lnglat, symbology!));\r\n\r\n      // set focus to the close button of the panel\r\n      if (panelContainer) {\r\n        const closeBtn = panelContainer.querySelectorAll('.cgpv-panel-close')[0];\r\n        if (closeBtn) (closeBtn as HTMLElement).focus();\r\n      }\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [mapId, buttonPanel.panel, buttonPanel.buttonPanelId, layersData, clearResults, selectLayer, getSymbol, selectFeature, selectLayersList]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // get the map service layers from the API\r\n    const mapLayers = api.map(mapId).layer.geoviewLayers;\r\n\r\n    // will be used to store the added map server layers, layers in the map server etc...\r\n    const data: Record<string, AbstractGeoViewLayer> = {};\r\n\r\n    // loop through each map server layer loaded from the map config and created using the API\r\n    const arrayOfgeoviewLayerId = Object.keys(mapLayers);\r\n\r\n    arrayOfgeoviewLayerId.forEach(async (geoviewLayerId: string) => {\r\n      const mapLayer = mapLayers[geoviewLayerId];\r\n      data[mapLayer.mapId] = mapLayer;\r\n\r\n      // check each map server layer type and add it to the layers object of the map server in the data array\r\n      if (geoviewLayerIsWMS(mapLayer)) {\r\n        // get layer ids / entries from the loaded WMS layer\r\n        const { entries } = mapLayer;\r\n\r\n        if (entries)\r\n          for (let i = 0; i < entries.length; i++) {\r\n            const layerId = entries[i];\r\n\r\n            // query the layer information\r\n            // eslint-disable-next-line no-await-in-loop\r\n            const layerInfo = await queryServer(mapLayer.mapService.options.url! + layerId);\r\n\r\n            // try to add the legend image url for the WMS layer\r\n            // const legendImageUrl = `${ogcWMSLayer.url}?request=GetLegendGraphic&version=1.0.0&Service=WMS&format=image/png&layer=${layerId}`;\r\n            const legendImageUrl = mapLayer.getLegendGraphic();\r\n\r\n            // assign the url to the renderer\r\n            if (layerInfo.drawingInfo && layerInfo.drawingInfo.renderer && layerInfo.drawingInfo.renderer.symbol) {\r\n              Object.defineProperties(layerInfo.drawingInfo.renderer.symbol, {\r\n                legendImageUrl: {\r\n                  value: legendImageUrl,\r\n                },\r\n              });\r\n            }\r\n\r\n            addLayer(mapLayer, data, layerInfo, false);\r\n          }\r\n      } else if (geoviewLayerIsEsriFeature(mapLayer)) {\r\n        // query the layer information, feature layer URL will end by a number provided in the map config\r\n        const layerInfo = await queryServer(mapLayer.url);\r\n\r\n        addLayer(mapLayer, data, layerInfo, false);\r\n      } else if (geoviewLayerIsEsriDynamic(mapLayer)) {\r\n        // get active layers\r\n        const { entries } = mapLayer;\r\n\r\n        const activeLayers: Record<number, number> = {};\r\n\r\n        // change active layers to keys so it can be compared with id in all layers\r\n        (entries as number[])?.forEach((entry: number) => {\r\n          activeLayers[entry] = entry;\r\n        });\r\n\r\n        // get the metadata of the dynamic layer\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        mapLayer.layer!.metadata(async (error: any, res: { layers: { id: string; subLayerIds: string[] }[] }) => {\r\n          if (error) return;\r\n\r\n          if (res.layers) {\r\n            // loop through each layer in the dynamic layer\r\n            for (let i = 0; i < res.layers.length; i++) {\r\n              const layerData = res.layers[i];\r\n\r\n              // if the index of the layer is one of the entries provided in the map config\r\n              if (layerData.id in activeLayers) {\r\n                // query the layer information from the map server by appending the index at the end of the URL\r\n                // eslint-disable-next-line no-await-in-loop\r\n                const layerInfo = await queryServer((mapLayer.layer!.options as L.esri.DynamicMapLayerOptions).url + layerData.id);\r\n\r\n                addLayer(mapLayer, data, layerInfo, layerData.subLayerIds !== null && layerData.subLayerIds !== undefined);\r\n\r\n                // if this layer is a group layer then loop through the sub layers and add them\r\n                if (layerData.subLayerIds) {\r\n                  for (let j = 0; j < layerData.subLayerIds.length; j++) {\r\n                    const subLayer = layerData.subLayerIds[j];\r\n\r\n                    // eslint-disable-next-line no-await-in-loop\r\n                    const subLayerInfo = await queryServer((mapLayer.layer!.options as L.esri.DynamicMapLayerOptions).url + subLayer);\r\n\r\n                    addLayer(mapLayer, data, subLayerInfo, false);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    setLayersData(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  /**\r\n   * Event when a click happens on the map\r\n   *\r\n   * @param e map browser event\r\n   */\r\n  const mapClickEvent = (e: { originalEvent: { shiftKey: unknown }; coordinate: number[] }) => {\r\n    if (!e.originalEvent.shiftKey) {\r\n      handleOpenDetailsPanel(e.coordinate);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // handle map click\r\n    mapInstance.on('click', mapClickEvent);\r\n\r\n    // handle crosshair enter\r\n    api.event.on(\r\n      EVENT_NAMES.DETAILS_PANEL.EVENT_DETAILS_PANEL_CROSSHAIR_ENTER,\r\n      (payload) => {\r\n        if (payloadIsALngLat(payload)) {\r\n          if (payload.handlerName === mapId) {\r\n            handleOpenDetailsPanel(payload.lnglat);\r\n          }\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n\r\n    return () => {\r\n      mapInstance.un('click', mapClickEvent);\r\n      api.event.off(EVENT_NAMES.DETAILS_PANEL.EVENT_DETAILS_PANEL_CROSSHAIR_ENTER, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [handleOpenDetailsPanel, mapId, mapInstance]);\r\n\r\n  // h is a reference to this.createElement\r\n  // createElement is a React function to create React HTML elements\r\n  // It takes 3 arguments, the tag element name, the attributes of the element and the content of the element\r\n  return (\r\n    <div className={classes.mainContainer}>\r\n      {!layersList && !featureList && !featureInfo && <div>{t('click_map')}</div>}\r\n      {layersList && (\r\n        <LayersList\r\n          clickPos={clickPos}\r\n          layersData={layersData}\r\n          selectFeature={selectFeature}\r\n          selectLayer={selectLayer}\r\n          getSymbol={getSymbol}\r\n          mapId={mapId}\r\n        />\r\n      )}\r\n      {featureList && (\r\n        <FeaturesList\r\n          getSymbol={getSymbol}\r\n          buttonPanel={buttonPanel}\r\n          selectLayer={selectLayer}\r\n          selectedLayer={selectedLayer}\r\n          selectFeature={selectFeature}\r\n          setPanel={setPanel}\r\n        />\r\n      )}\r\n      {featureInfo && (\r\n        <FeatureInfo buttonPanel={buttonPanel} selectedFeature={selectedFeature as TypeSelectedFeature} setPanel={setPanel} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PanelContent;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  Cast,\r\n  AbstractPlugin,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  toJsonObject,\r\n  TypeIconButtonProps,\r\n  TypePanelProps,\r\n  TypeWindow,\r\n} from 'geoview-core';\r\nimport { payloadBaseClass } from 'geoview-core/src/api/events/payloads/payload-base-class';\r\nimport PanelContent from './panel-content';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass DetailsPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      detailsPanel: 'Details',\r\n      nothing_found: 'Nothing found',\r\n      click_map: 'Choose a point on the map to start',\r\n      action_back: 'Back',\r\n    },\r\n    fr: {\r\n      detailsPanel: 'Détails',\r\n      nothing_found: 'Aucun résultat',\r\n      click_map: 'Choisissez un point sur la carte pour commencer',\r\n      action_back: 'Retour',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api, ui } = cgpv;\r\n    const { DetailsIcon } = ui.elements;\r\n    const { displayLanguage } = api.map(mapId);\r\n\r\n    // button props\r\n    const button: TypeIconButtonProps = {\r\n      // set ID to detailsPanel so that it can be accessed from the core viewer\r\n      id: 'detailsPanelButton',\r\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\r\n      tooltipPlacement: 'right',\r\n      children: <DetailsIcon />,\r\n      visible: true,\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[displayLanguage].detailsPanel,\r\n      icon: '<i class=\"material-icons\">details</i>',\r\n      width: 300,\r\n    };\r\n\r\n    // create a new button panel on the app-bar\r\n    this.buttonPanel = api.map(mapId as string).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId as string} />);\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.map(mapId as string).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\r\n      api.event.emit(payloadBaseClass(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_HIDE, mapId));\r\n    }\r\n  }\r\n}\r\n\r\nexport default DetailsPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['details-panel'] = Cast<AbstractPlugin>(DetailsPlugin);\r\n"],"names":["w","window","props","layersData","selectFeature","selectLayer","getSymbol","clickPos","mapId","cgpv","api","ui","EVENT_NAMES","eventNames","classes","makeStyles","layersContainer","overflow","overflowY","width","layerItem","display","alignItems","justifyContent","margin","padding","boxSizing","cursor","backgroundColor","zIndex","border","layerParentText","fontSize","fontWeight","layerCountTextContainer","layerFeatureCount","minWidth","height","boxShadow","marginRight","color","layerItemText","whiteSpace","textOverflow","useStyles","goToFeatureList","data","layerKey","listOfLayerEntryConfig","layerData","displayField","fieldAliases","renderer","length","attributes","toJsonObject","symbol","numOfEntries","className","Object","keys","map","dataKey","layers","index","layer","groupLayer","tabIndex","onKeyDown","e","key","preventDefault","role","title","name","type","disabled","onClick","event","emit","markerDefinitionPayload","MARKER_ICON","EVENT_MARKER_ICON_SHOW","undefined","id","selectedLayer","setPanel","buttonPanel","react","useTranslation","useEffect","featuresContainer","featureItem","featureIconTextContainer","featureItemIconContainer","featureItemIcon","featureItemText","marginLeft","t","goToFeatureInfo","symbolImage","panel","addActionButton","feature","i","attributesDisplayField","OBJECTID","imageData","src","contentType","alt","legendImageUrl","selectedFeature","ArrowBackIcon","elements","featureInfoContainer","featureInfoHeader","featureInfoHeaderIconContainer","featureInfoHeaderIcon","featureInfoHeaderText","featureInfoItemsContainer","flexDirection","marginTop","featureInfoItem","featureInfoItemKey","featureInfoItemValue","attrKey","attributeAlias","attributeValue","useState","useCallback","setLayersData","setSelectedLayer","setSelectedFeature","layersList","setLayersList","featureList","setFeatureList","featureInfo","setFeatureInfo","setClickPos","mainContainer","mapInstance","uniqueValueInfos","filter","info","value","field1","field2","field3","queryServer","url","fetch","response","json","result","showLayersList","showFeaturesList","showFeaturesInfo","removeActionButton","payloadBaseClass","PANEL","EVENT_PANEL_CHANGE_CONTENT","buttonPanelId","selectLayersList","featureData","Cast","addLayer","mapLayer","layerInfo","isGroupLayer","fields","layerPath","replace","toLowerCase","displayFieldName","forEach","field","alias","drawingInfo","clearResults","prevState","handleOpenDetailsPanel","lnglat","layersFound","j","layerMap","size","getSize","bounds","getView","calculateExtent","extent","xmin","ymin","xmax","ymax","spatialReference","wkid","CONST_LAYER_TYPES","ogcWMSLayer","getFeatureInfoResponse","getFeatureInfo","push","entries","ogcEsriLayer","identifyUrl","mapService","options","jsonResponse","results","symbology","open","panelContainer","document","querySelectorAll","closeBtn","focus","mapLayers","geoviewLayers","geoviewLayerId","geoviewLayerIsWMS","layerId","getLegendGraphic","defineProperties","geoviewLayerIsEsriFeature","geoviewLayerIsEsriDynamic","activeLayers","entry","metadata","error","res","subLayerIds","subLayer","subLayerInfo","mapClickEvent","originalEvent","shiftKey","coordinate","on","DETAILS_PANEL","EVENT_DETAILS_PANEL_CROSSHAIR_ENTER","payload","payloadIsALngLat","handlerName","un","off","DetailsPlugin","pluginId","en","detailsPanel","nothing_found","click_map","action_back","fr","pluginProps","DetailsIcon","displayLanguage","button","tooltip","translations","tooltipPlacement","children","visible","icon","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","EVENT_MARKER_ICON_HIDE","AbstractPlugin","plugins"],"sourceRoot":""}