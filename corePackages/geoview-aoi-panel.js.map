{"version":3,"file":"corePackages/geoview-aoi-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-aoi-panel/src/aoi-panel.tsx","webpack://geoview-core/../geoview-aoi-panel/src/index.tsx","webpack://geoview-core/./src/api/plugin/appbar-plugin.ts"],"sourcesContent":["// import { TypeBasemapProps } from 'geoview-core/src/geo/layer/basemap/basemap-types';\n// import { TypeJsonObject } from 'geoview-core/src/core/types/global-types';\n// import { useMapProjection } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\n// import { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\n// import { TypeValidMapProjectionCodes, TypeDisplayLanguage } from 'geoview-core/src/api/config/types/map-schema-types';\n// import { logger } from 'geoview-core/src/core/utils/logger';\n// import { getLocalizedMessage } from 'geoview-core/src/core/utils/utilities';\n// import { getSxClasses } from './area-of-interest-style';\n\n/*\ninterface AoiPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n*/\n\nexport function AoiPanel(/* props: AoiPanelProps */): JSX.Element {\n  // const { mapId, config } = props;\n\n  // const { cgpv } = window;\n  // const myMap = cgpv.api.maps[mapId];\n\n  // const { api, ui, react } = cgpv;\n  //  const { Select, Card, Box } = ui.elements;\n\n  // const { useState } = react;\n\n  // const theme = ui.useTheme();\n  // const sxClasses = getSxClasses(theme);\n\n  // internal state and store values\n  // const language = useAppDisplayLanguage();\n\n  // #region PRIVATE UTILITY FUNCTIONS\n  // #endregion\n\n  return <div />;\n}\n","import { TypeJsonObject, toJsonObject, AnySchemaObject, Cast } from 'geoview-core/src/core/types/global-types';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\nimport { AoiIcon } from 'geoview-core/src/ui/icons';\nimport { TypeIconButtonProps } from 'geoview-core/src/ui/icon-button/icon-button-types';\nimport { TypePanelProps } from 'geoview-core/src/ui/panel/panel-types';\nimport { AoiPanel } from './aoi-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-area-of-interest.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass AoiPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      AoiPanel: {\n        title: 'Area of Interest',\n      },\n    },\n    fr: {\n      AoiPanel: {\n        title: \"Région d'intérêt\",\n      },\n    },\n  });\n\n  override onCreateButtonProps(): TypeIconButtonProps {\n    // Button props\n    return {\n      id: `${this.pluginProps.mapId}-AoiPanelButton`,\n      tooltip: 'AoiPanel.title',\n      tooltipPlacement: 'right',\n      children: <AoiIcon />,\n      visible: true,\n    };\n  }\n\n  override onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: 'AoiPanel.title',\n      icon: <AoiIcon />,\n      width: 350,\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  override onCreateContent = (): JSX.Element => {\n    return <AoiPanel /* mapId={this.pluginProps.mapId} config={this.configObj || {}} */ />;\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  override onRemoved(): void {}\n}\n\nexport default AoiPanelPlugin;\n\n// Keep a reference to the AOI Panel Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['aoi-panel'] = Cast<AoiPanelPlugin>(AoiPanelPlugin);\n","import { TypeButtonPanel, TypePanelProps } from '@/ui/panel/panel-types';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { TypeWindow } from '@/core/types/global-types';\nimport { TypeIconButtonProps } from '@/ui/icon-button/icon-button-types';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  // Store the button props\n  buttonProps?: TypeIconButtonProps;\n\n  // Store the panel props\n  panelProps?: TypePanelProps;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypeIconButtonProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns JSX.Element The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    this.buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    this.panelProps = this.onCreateContentProps();\n\n    // Create content\n    this.panelProps.content = this.onCreateContent();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.mapViewer().appBarApi.createAppbarPanel(this.buttonProps!, this.panelProps, null) || undefined;\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.mapViewer().appBarApi.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n"],"names":["AoiPanel","_jsx","AoiPanelPlugin","_AppBarPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","toJsonObject","en","title","fr","_inherits","_createClass","key","value","schema","defaultConfig","id","this","pluginProps","mapId","tooltip","tooltipPlacement","children","AoiIcon","visible","_this$configObj","icon","width","status","configObj","isOpen","AppBarPlugin","window","geoviewPlugins","Cast","_AbstractPlugin","MapIcon","cgpv","ui","elements","react","createElement","undefined","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","content","onCreateContent","buttonPanel","mapViewer","appBarApi","createAppbarPanel","api","removeAppbarPanel","buttonPanelId","AbstractPlugin"],"sourceRoot":""}