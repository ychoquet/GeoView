{"version":3,"file":"corePackages/geoview-overview-map.js","mappings":"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","sources":["webpack://geoview-core/../geoview-overview-map/src/minimap-bounds.tsx","webpack://geoview-core/../geoview-overview-map/src/minimap-toggle.tsx","webpack://geoview-core/../geoview-overview-map/src/overview-map.tsx","webpack://geoview-core/../geoview-overview-map/src/index.tsx"],"sourcesContent":["import { TypeWindow } from 'geoview-core';\r\nimport { payloadIsABoolean } from 'geoview-core/src/api/events/payloads/boolean-payload';\r\n\r\n// get window object\r\nconst w = window as TypeWindow;\r\n\r\n// access the cgpv object from the window object\r\nconst { cgpv } = w;\r\n\r\n// access the api calls\r\nconst { api, react, reactLeaflet, reactLeafletCore } = cgpv;\r\n\r\n// get event names\r\nconst EVENT_NAMES = api.eventNames;\r\n\r\n// get react functions\r\nconst { useState, useEffect, useCallback, useMemo } = react;\r\n\r\n// get react-leaflet events\r\nconst { useMapEvent } = reactLeaflet;\r\n\r\n// get react-leaflet/core events\r\nconst { useEventHandlers } = reactLeafletCore;\r\n\r\n/**\r\n * Interface for bound polygon properties\r\n */\r\ninterface MiniboundProps {\r\n  parentId: string;\r\n  parentMap: L.Map;\r\n  zoomFactor: number;\r\n  minimap: L.Map;\r\n}\r\n\r\n/**\r\n * Create and update the bound polygon of the parent's map extent\r\n * @param {MiniboundProps} props bound properties\r\n */\r\nexport function MinimapBounds(props: MiniboundProps): JSX.Element {\r\n  const { parentId, parentMap, zoomFactor, minimap } = props;\r\n\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  // Clicking a point on the minimap sets the parent's map center\r\n  const onClick = useCallback(\r\n    (e) => {\r\n      parentMap.setView(e.latlng, parentMap.getZoom());\r\n    },\r\n    [parentMap]\r\n  );\r\n  useMapEvent('click', onClick);\r\n\r\n  // Keep track of bounds in state to trigger renders\r\n  const [bounds, setBounds] = useState({\r\n    height: 0,\r\n    width: 0,\r\n    top: 0,\r\n    left: 0,\r\n  });\r\n\r\n  // Update the minimap's view to match the parent map's center and zoom\r\n  function updateMap(): void {\r\n    // Only perform an update if the minimap exist (has panes)\r\n    if (Object.keys(minimap.getPanes()).length) {\r\n      const newZoom = parentMap.getZoom() - zoomFactor > 0 ? parentMap.getZoom() - zoomFactor : 0;\r\n\r\n      minimap.flyTo(parentMap.getCenter(), newZoom);\r\n\r\n      // Set in timeout the calculation to create the bound so parentMap getBounds has the updated bounds\r\n      setTimeout(() => {\r\n        // Only run the function if the minimap exist (has panes)\r\n        if (Object.keys(minimap.getPanes()).length) {\r\n          minimap.invalidateSize();\r\n          const pMin = minimap.latLngToContainerPoint(parentMap.getBounds().getSouthWest());\r\n          const pMax = minimap.latLngToContainerPoint(parentMap.getBounds().getNorthEast());\r\n          setBounds({\r\n            height: pMin.y - pMax.y,\r\n            width: pMax.x - pMin.x,\r\n            top: pMax.y,\r\n            left: pMin.x,\r\n          });\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateMap();\r\n\r\n    // listen to API event when the overview map is toggled\r\n    api.event.on(\r\n      EVENT_NAMES.OVERVIEW_MAP.EVENT_OVERVIEW_MAP_TOGGLE,\r\n      (payload) => {\r\n        if (payloadIsABoolean(payload)) {\r\n          if (parentId === payload.handlerName) {\r\n            updateMap();\r\n            setToggle(payload.status);\r\n          }\r\n        }\r\n      },\r\n      parentId\r\n    );\r\n\r\n    // remove the listener when the component unmounts\r\n    return () => {\r\n      api.event.off(EVENT_NAMES.OVERVIEW_MAP.EVENT_OVERVIEW_MAP_TOGGLE, parentId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onChange = useCallback(() => {\r\n    updateMap();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [minimap, parentMap, zoomFactor]);\r\n\r\n  // Listen to events on the parent map\r\n  const handlers = useMemo(() => ({ moveend: onChange, zoomend: onChange }), [onChange]);\r\n  const context = { __version: 1, map: parentMap };\r\n  const leafletElement = {\r\n    instance: parentMap,\r\n    context,\r\n  };\r\n  useEventHandlers(leafletElement, handlers);\r\n\r\n  return !toggle ? (\r\n    <div\r\n      style={{\r\n        left: `${bounds.left}px`,\r\n        top: `${bounds.top}px`,\r\n        width: `${bounds.width}px`,\r\n        height: `${bounds.height}px`,\r\n        display: 'block',\r\n        opacity: 0.5,\r\n        position: 'absolute',\r\n        border: '1px solid rgb(0, 0, 0)',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        zIndex: 1000,\r\n      }}\r\n    />\r\n  ) : (\r\n    <div />\r\n  );\r\n}\r\n","import { TypeWindow } from 'geoview-core';\r\nimport { booleanPayload } from 'geoview-core/src/api/events/payloads/boolean-payload';\r\n\r\nimport { MINIMAP_SIZE } from './overview-map';\r\n\r\n// access window object\r\nconst w = window as TypeWindow;\r\n\r\n// access the cgpv object from the window object\r\nconst { cgpv } = w;\r\n\r\n// access the api calls\r\nconst { api, react, leaflet, ui, constants, useTranslation } = cgpv;\r\n\r\n// get event names\r\nconst EVENT_NAMES = api.eventNames;\r\n\r\n// get react functions\r\nconst { useState, useEffect, useRef } = react;\r\n\r\n// get leaflet events\r\nconst { DomEvent } = leaflet;\r\n\r\n// get available elements\r\nconst { IconButton, ChevronLeftIcon } = ui.elements;\r\n\r\n// get leaflet positions\r\nconst { leafletPositionClasses } = constants;\r\n\r\nconst useStyles = ui.makeStyles((theme) => ({\r\n  toggleBtn: {\r\n    transform: 'rotate(45deg)',\r\n    color: theme.palette.primary.contrastText,\r\n    zIndex: theme.zIndex.tooltip,\r\n    '&:hover': {\r\n      cursor: 'pointer',\r\n    },\r\n  },\r\n  toggleBtnContainer: {\r\n    zIndex: theme.zIndex.tooltip,\r\n  },\r\n  minimapOpen: {\r\n    transform: 'rotate(-45deg)',\r\n  },\r\n  minimapClosed: {\r\n    transform: 'rotate(135deg)',\r\n  },\r\n}));\r\n\r\n/**\r\n * Interface for the minimap toggle properties\r\n */\r\ninterface MinimapToggleProps {\r\n  parentId: string;\r\n  minimap: L.Map;\r\n}\r\n\r\n/**\r\n * Create a toggle element to expand/collapse the overview map\r\n * @param {MinimapToggleProps} props toggle properties\r\n * @return {JSX.Element} the toggle control\r\n */\r\nexport function MinimapToggle(props: MinimapToggleProps): JSX.Element {\r\n  const { parentId, minimap } = props;\r\n\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const [status, setStatus] = useState(true);\r\n\r\n  const classes = useStyles();\r\n\r\n  const theme = ui.useTheme();\r\n\r\n  /**\r\n   * Toggle overview map to show or hide it\r\n   * @param e the event being triggered on click\r\n   */\r\n  function toggleMinimap(): void {\r\n    setStatus(!status);\r\n\r\n    if (status) {\r\n      const buttonSize = theme.overrides.button?.size;\r\n      // decrease size of overview map to the size of the toggle btn\r\n      minimap.getContainer().style.width = buttonSize.width;\r\n      minimap.getContainer().style.height = buttonSize.height;\r\n    } else {\r\n      // restore the size of the overview map\r\n      minimap.getContainer().style.width = MINIMAP_SIZE.width;\r\n      minimap.getContainer().style.height = MINIMAP_SIZE.height;\r\n    }\r\n\r\n    // trigger a new event when overview map is toggled\r\n    api.event.emit(booleanPayload(EVENT_NAMES.OVERVIEW_MAP.EVENT_OVERVIEW_MAP_TOGGLE, parentId, status));\r\n  }\r\n\r\n  useEffect(() => {\r\n    DomEvent.disableClickPropagation(divRef.current!);\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={divRef} className={`${leafletPositionClasses.topright} ${classes.toggleBtnContainer}`}>\r\n      <IconButton\r\n        className={`leaflet-control ${classes.toggleBtn} ${!status ? classes.minimapOpen : classes.minimapClosed}`}\r\n        style={{\r\n          margin: `-${theme.spacing(3)}`,\r\n          padding: 0,\r\n          height: 'initial',\r\n          minWidth: 'initial',\r\n        }}\r\n        aria-label={t('mapctrl.overviewmap.toggle')}\r\n        onClick={() => toggleMinimap()}\r\n        size=\"large\"\r\n      >\r\n        <ChevronLeftIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n","import { TypeWindow } from 'geoview-core';\r\n\r\nimport { MinimapBounds } from './minimap-bounds';\r\nimport { MinimapToggle } from './minimap-toggle';\r\n\r\nexport const MINIMAP_SIZE = {\r\n  width: '150px',\r\n  height: '150px',\r\n};\r\n\r\n// get the window object\r\nconst w = window as TypeWindow;\r\n\r\n// access the cgpv object from the window object\r\nconst { cgpv } = w;\r\n\r\n// access the api calls\r\nconst { api, react, leaflet, reactLeaflet, ui, constants } = cgpv;\r\n\r\nconst { useState, useEffect, useRef, useMemo } = react;\r\n\r\nconst { DomEvent } = leaflet;\r\n\r\nconst { MapContainer, TileLayer } = reactLeaflet;\r\n\r\nconst { useMediaQuery, useTheme, makeStyles } = ui;\r\n\r\nconst { leafletPositionClasses } = constants;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  minimap: {\r\n    width: MINIMAP_SIZE.width,\r\n    height: MINIMAP_SIZE.height,\r\n    '-webkit-transition': '300ms linear',\r\n    '-moz-transition': '300ms linear',\r\n    '-o-transition': '300ms linear',\r\n    '-ms-transition': '300ms linear',\r\n    transition: '300ms linear',\r\n    '&::before': {\r\n      content: '\"\"',\r\n      display: 'block',\r\n      position: 'absolute',\r\n      width: 0,\r\n      height: 0,\r\n      borderTop: '32px solid hsla(0,0%,98%,0.9)',\r\n      borderLeft: '32px solid transparent',\r\n      zIndex: theme.zIndex.appBar,\r\n      right: 0,\r\n      top: 0,\r\n    },\r\n  },\r\n}));\r\n\r\n/**\r\n * Interface for overview map properties\r\n */\r\ninterface OverviewMapProps {\r\n  id: string;\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  language: string;\r\n  crs: L.CRS;\r\n  zoomFactor: number;\r\n}\r\n\r\n/**\r\n * Create the overview map component\r\n * @param {OverviewMapProps} props the overview map properties\r\n * @return {JSX.Element} the overview map component\r\n */\r\nexport function OverviewMap(props: OverviewMapProps): JSX.Element {\r\n  const { id, crs, zoomFactor } = props;\r\n\r\n  const [minimap, setMinimap] = useState<L.Map>();\r\n\r\n  const classes = useStyles();\r\n\r\n  const theme = useTheme();\r\n\r\n  // if screen size is medium and up\r\n  const deviceSizeMedUp = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const parentMap = api.map(id).map;\r\n  const mapZoom = parentMap.getZoom() - zoomFactor > 0 ? parentMap.getZoom() - zoomFactor : 0;\r\n\r\n  const { activeBasemap } = api.map(id).basemap;\r\n\r\n  const overviewRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    // disable events on container\r\n    const overviewHTMLElement = overviewRef.current;\r\n    if (overviewHTMLElement) {\r\n      DomEvent.disableClickPropagation(overviewHTMLElement);\r\n      DomEvent.disableScrollPropagation(overviewHTMLElement);\r\n    }\r\n\r\n    // remove ability to tab to the overview map\r\n    // overviewHTMLElement.children[0].setAttribute(\"tabIndex\", \"-1\");\r\n  }, []);\r\n\r\n  // Memorize the minimap so it's not affected by position changes\r\n  const minimapContainer = useMemo(\r\n    () => (\r\n      <MapContainer\r\n        // tabIndex={-1}\r\n        className={classes.minimap}\r\n        center={parentMap.getCenter()}\r\n        zoom={mapZoom}\r\n        crs={crs}\r\n        dragging={false}\r\n        doubleClickZoom={false}\r\n        scrollWheelZoom={false}\r\n        attributionControl={false}\r\n        zoomControl={false}\r\n        whenCreated={(cgpMap: L.Map) => {\r\n          const cgpMapContainer = cgpMap.getContainer();\r\n          DomEvent.disableScrollPropagation(cgpMapContainer);\r\n          const cgpMapContainerParentElement = cgpMapContainer.parentElement as HTMLElement;\r\n          cgpMapContainerParentElement.style.margin = theme.spacing(3);\r\n\r\n          setMinimap(cgpMap);\r\n        }}\r\n      >\r\n        {minimap ? (\r\n          <>\r\n            {activeBasemap.layers.map((base: { id: string | number | null | undefined; url: string }) => (\r\n              <TileLayer key={base.id} url={base.url} />\r\n            ))}\r\n            <MinimapBounds parentId={id} parentMap={parentMap} zoomFactor={zoomFactor} minimap={minimap} />\r\n            <MinimapToggle parentId={id} minimap={minimap} />\r\n          </>\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </MapContainer>\r\n    ),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [parentMap, crs, mapZoom, zoomFactor, minimap]\r\n  );\r\n\r\n  return deviceSizeMedUp ? (\r\n    <div\r\n      style={{\r\n        zIndex: 1100,\r\n      }}\r\n      className={leafletPositionClasses.topright}\r\n    >\r\n      <div ref={overviewRef} className=\"leaflet-control leaflet-bar\">\r\n        {minimapContainer}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div />\r\n  );\r\n}\r\n","import { Cast, AbstractPluginClass, TypeJsonObject, TypeWindow } from 'geoview-core';\r\nimport { OverviewMap } from './overview-map';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass OverviewMapPlugin extends AbstractPluginClass {\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations: TypeJsonObject = {\r\n    'en-CA': {},\r\n    'fr-CA': {},\r\n  };\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    const { language, projection, getMapOptions, currentProjection } = api.map(mapId);\r\n\r\n    api\r\n      .map(mapId)\r\n      .addComponent(\r\n        'overviewMap',\r\n        <OverviewMap id={mapId} language={language} crs={projection.getCRS()} zoomFactor={getMapOptions(currentProjection).zoomFactor!} />\r\n      );\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    api.map(mapId).removeComponent('overviewMap');\r\n  }\r\n}\r\n\r\nexport default OverviewMapPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['overview-map'] = Cast<AbstractPluginClass>(OverviewMapPlugin);\r\n"],"names":["cgpv","window","api","react","reactLeaflet","reactLeafletCore","EVENT_NAMES","eventNames","useState","useEffect","useCallback","useMemo","useMapEvent","useEventHandlers","MinimapBounds","props","parentId","parentMap","zoomFactor","minimap","toggle","setToggle","onClick","e","setView","latlng","getZoom","height","width","top","left","bounds","setBounds","updateMap","Object","keys","getPanes","length","newZoom","flyTo","getCenter","setTimeout","invalidateSize","pMin","latLngToContainerPoint","getBounds","getSouthWest","pMax","getNorthEast","y","x","event","on","OVERVIEW_MAP","EVENT_OVERVIEW_MAP_TOGGLE","payload","payloadIsABoolean","handlerName","status","off","onChange","handlers","moveend","zoomend","instance","context","__version","map","style","display","opacity","position","border","backgroundColor","zIndex","leaflet","ui","constants","useTranslation","useRef","DomEvent","elements","IconButton","ChevronLeftIcon","leafletPositionClasses","useStyles","makeStyles","theme","toggleBtn","transform","color","palette","primary","contrastText","tooltip","cursor","toggleBtnContainer","minimapOpen","minimapClosed","MinimapToggle","divRef","t","setStatus","classes","useTheme","disableClickPropagation","current","ref","className","topright","margin","spacing","padding","minWidth","buttonSize","overrides","button","size","getContainer","MINIMAP_SIZE","emit","booleanPayload","toggleMinimap","MapContainer","TileLayer","useMediaQuery","transition","content","borderTop","borderLeft","appBar","right","OverviewMap","id","crs","setMinimap","deviceSizeMedUp","breakpoints","up","mapZoom","activeBasemap","basemap","overviewRef","overviewHTMLElement","disableScrollPropagation","minimapContainer","center","zoom","dragging","doubleClickZoom","scrollWheelZoom","attributionControl","zoomControl","whenCreated","cgpMap","cgpMapContainer","parentElement","layers","base","url","w","OverviewMapPlugin","mapId","pluginProps","language","projection","getMapOptions","currentProjection","addComponent","getCRS","this","removeComponent","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}