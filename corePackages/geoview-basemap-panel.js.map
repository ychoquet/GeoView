{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import {\r\n  toJsonObject,\r\n  TypeBasemapProps,\r\n  TypeJsonObject,\r\n  SelectChangeEvent,\r\n  TypeWindow,\r\n  TypeViewSettings,\r\n  mapViewProjectionPayload,\r\n  TypeBasemapOptions,\r\n  TypeProjectionCodes,\r\n} from 'geoview-core';\r\n\r\nconst w = window as TypeWindow;\r\n\r\ninterface BaseMapPanelProps {\r\n  mapId: string;\r\n  config: TypeJsonObject;\r\n}\r\n\r\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\r\n  const { mapId, config } = props;\r\n\r\n  const { cgpv } = w;\r\n  const myMap = cgpv.api.map(mapId);\r\n\r\n  const { api, react, ui } = cgpv;\r\n  const { Select } = ui.elements;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    listContainer: {\r\n      marginTop: '10px',\r\n      height: '95%',\r\n    },\r\n    active: {\r\n      boxShadow: '0 8px 16px 0 rgba(255, 255, 255, 0.8) !important',\r\n    },\r\n    card: {\r\n      transition: '0.3s',\r\n      borderRadius: '5px',\r\n      '&:hover': {\r\n        boxShadow: '0 8px 16px 0 rgba(255, 255, 255, 0.4)',\r\n      },\r\n      marginBottom: 10,\r\n      height: '250px',\r\n      width: '100%',\r\n      display: 'block',\r\n      position: 'relative',\r\n    },\r\n    thumbnail: {\r\n      borderRadius: '5px',\r\n      position: 'absolute',\r\n      height: '100%',\r\n      width: '100%',\r\n      opacity: 0.8,\r\n      objectFit: 'cover',\r\n    },\r\n    container: {\r\n      background: 'rgba(0,0,0,.68)',\r\n      color: '#fff',\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis',\r\n      height: '40px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: '0 5px',\r\n      boxSizing: 'border-box',\r\n      position: 'absolute',\r\n      left: 0,\r\n      bottom: 0,\r\n      width: 'inherit',\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\r\n  const [activeBasemapId, setActiveBasemapId] = useState<string>('');\r\n  const [canSwichProjection] = useState(config.canSwichProjection);\r\n\r\n  // TODO: change the path for getting projection on schema refactor\r\n  const projections: number[] =\r\n    (config.supportedProjections as Array<TypeJsonObject>).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\r\n  const [mapProjection, setMapProjection] = useState(myMap.mapFeaturesConfig.map.viewSettings.projection);\r\n\r\n  /**\r\n   * Update the basemap with the layers on the map\r\n   *\r\n   * @param {string} id update the basemap on the map\r\n   */\r\n  const setBasemap = (id: string) => {\r\n    // set the new basemap and update the active basemap variable\r\n    myMap.basemap.setBasemap(id);\r\n    setActiveBasemapId(id);\r\n  };\r\n\r\n  /**\r\n   *  Add basemaps from configuration for selected projection\r\n   *\r\n   * @param {number} projection the projection to create basemaps for\r\n   */\r\n  const createBasemapArray = async (projection: TypeProjectionCodes) => {\r\n    const basemapsArray = toJsonObject(\r\n      (config.supportedProjections as Array<TypeJsonObject>).find((obj: TypeJsonObject) => obj.projectionCode === projection)\r\n    );\r\n    let isInit = false;\r\n\r\n    // reset the basemaps array\r\n    api.map(mapId).basemap.basemaps = [];\r\n    setBasemapList([]);\r\n\r\n    // create the custom config basemap\r\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.customBasemaps.length; basemapIndex++) {\r\n      const customBasemap = basemapsArray.customBasemaps[basemapIndex] as TypeJsonObject;\r\n      const basemap = api.map(mapId).basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\r\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\r\n\r\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\r\n      if (basemap && basemapIndex === 0 && activeBasemapId === '') {\r\n        setBasemap(basemap.id!);\r\n        isInit = true;\r\n      }\r\n    }\r\n\r\n    // create the core basemap\r\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.coreBasemaps.length; basemapIndex++) {\r\n      const basemapOptions = basemapsArray.coreBasemaps[basemapIndex] as TypeJsonObject;\r\n      // eslint-disable-next-line no-await-in-loop\r\n      const basemap = await api.map(mapId).basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions, projection);\r\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\r\n\r\n      // set basemap if previously selected in previous projection\r\n      const id = `${basemapOptions.shaded ? 'shaded' : ''}${basemapOptions.id}${basemapOptions.labeled ? 'label' : ''}`;\r\n      if (basemap && id === activeBasemapId && !isInit) {\r\n        setBasemap(activeBasemapId);\r\n        isInit = true;\r\n      }\r\n    }\r\n\r\n    // if previous basemap does not exist in previous projection, init first one\r\n    if (!isInit) setBasemap(myMap.basemap.basemaps[0].id as string);\r\n  };\r\n\r\n  /**\r\n   * Set new projection view and basemap array\r\n   *\r\n   * @param {SelectChangeEvent} event select change element event\r\n   */\r\n  const setSelectedProjection = (event: SelectChangeEvent<unknown>) => {\r\n    const projection = event.target.value as TypeProjectionCodes;\r\n\r\n    // set basemap to no geom to clean up the view\r\n    setBasemap('nogeom');\r\n    setMapProjection(projection as TypeProjectionCodes);\r\n\r\n    // get view status (center and projection) to calculate new center\r\n    const currentView = myMap.getView();\r\n    const currentCenter = currentView.getCenter();\r\n    const currentProjection = currentView.getProjection().getCode();\r\n    const newCenter = api.projection.transformPoints(currentCenter, currentProjection, 'EPSG:4326')[0];\r\n    const newProjection = event.target.value as TypeProjectionCodes;\r\n\r\n    const newView: TypeViewSettings = {\r\n      zoom: currentView.getZoom() as number,\r\n      minZoom: currentView.getMinZoom(),\r\n      maxZoom: currentView.getMaxZoom(),\r\n      center: newCenter as [number, number],\r\n      projection: newProjection,\r\n    };\r\n\r\n    // set new view and basemaps array (with selected basemap)\r\n    myMap.setView(newView);\r\n    createBasemapArray(projection);\r\n\r\n    // emit an event to let know map view projection as changed\r\n    api.event.emit(mapViewProjectionPayload(api.eventNames.MAP.EVENT_MAP_VIEW_PROJECTION_CHANGE, mapId, projection));\r\n  };\r\n\r\n  /**\r\n   * load existing basemaps and create new basemaps\r\n   */\r\n  useEffect(() => {\r\n    createBasemapArray(mapProjection);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {canSwichProjection && (\r\n        <Select\r\n          fullWidth\r\n          labelId=\"projection-label\"\r\n          value={mapProjection}\r\n          onChange={setSelectedProjection}\r\n          label=\"Projection\"\r\n          style={{\r\n            display: config.canSwichProjection ? 'flex' : 'none',\r\n          }}\r\n          inputLabel={{\r\n            id: 'projection-label',\r\n          }}\r\n          menuItems={projections.map((value: number) => ({\r\n            key: value,\r\n            item: {\r\n              value,\r\n              children: `EPSG:${value}`,\r\n            },\r\n          }))}\r\n        />\r\n      )}\r\n      <div className={classes.listContainer}>\r\n        {basemapList.map((basemap: TypeBasemapProps) => {\r\n          return (\r\n            <div\r\n              role=\"button\"\r\n              tabIndex={0}\r\n              className={`${classes.card} ${basemap.id === activeBasemapId ? classes.active : ''}`}\r\n              onClick={() => setBasemap(basemap.id as string)}\r\n              onKeyPress={() => setBasemap(basemap.id as string)}\r\n              key={basemap.id}\r\n            >\r\n              {typeof basemap.thumbnailUrl === 'string' && (\r\n                <img src={basemap.thumbnailUrl} alt={basemap.altText} className={classes.thumbnail} />\r\n              )}\r\n              {Array.isArray(basemap.thumbnailUrl) &&\r\n                basemap.thumbnailUrl.map((thumbnail, index) => {\r\n                  // eslint-disable-next-line react/no-array-index-key\r\n                  return <img key={index} src={thumbnail} alt={basemap.altText} className={classes.thumbnail} />;\r\n                })}\r\n              <div className={classes.container}>{basemap.name}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Cast,\r\n  AbstractPlugin,\r\n  TypePluginOptions,\r\n  TypeIconButtonProps,\r\n  TypeButtonPanel,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypePanelProps,\r\n  TypeJsonObject,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\n\r\nimport { BasemapPanel } from './basemap-panel';\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-basemap-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass BasemapPanelPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(id: string, props: TypePluginOptions) {\r\n    super(id, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the package schema\r\n   *\r\n   * @returns {AnySchemaObject} the package schema\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    'en-CA': {\r\n      basemapPanel: 'Basemaps',\r\n    },\r\n    'fr-CA': {\r\n      basemapPanel: 'Fond de carte',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { configObj, pluginProps } = this;\r\n\r\n    const { mapId } = pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api, ui } = cgpv;\r\n      const { MapIcon } = ui.elements;\r\n      const { displayLanguage } = api.map(mapId);\r\n      // button props\r\n      const button: TypeIconButtonProps = {\r\n        id: 'basemapPanelButton',\r\n        tooltip: this.translations[displayLanguage].basemapPanel as string,\r\n        tooltipPlacement: 'right',\r\n        children: <MapIcon />,\r\n        visible: true,\r\n      };\r\n\r\n      // panel props\r\n      const panel: TypePanelProps = {\r\n        title: this.translations[displayLanguage].basemapPanel,\r\n        icon: '<i class=\"material-icons\">map</i>',\r\n        width: 200,\r\n        status: configObj?.isOpen as boolean,\r\n      };\r\n\r\n      // create a new button panel on the appbar\r\n      this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n      // set panel content\r\n      this.buttonPanel?.panel?.changeContent(<BasemapPanel mapId={mapId} config={configObj || {}} />);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api } = cgpv;\r\n\r\n      if (this.buttonPanel) {\r\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\r\n\r\n        // reset basemaps array\r\n        api.map(mapId).basemap.basemaps = [];\r\n        // reload default basemap\r\n        api.map(mapId).basemap.loadDefaultBasemaps();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BasemapPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['basemap-panel'] = Cast<AbstractPlugin>(BasemapPanelPlugin);\r\n"],"names":["w","window","BasemapPanel","props","mapId","config","cgpv","myMap","api","map","react","ui","Select","elements","useState","useEffect","classes","makeStyles","listContainer","marginTop","height","active","boxShadow","card","transition","borderRadius","marginBottom","width","display","position","thumbnail","opacity","objectFit","container","background","color","overflow","textOverflow","alignItems","padding","boxSizing","left","bottom","useStyles","basemapList","setBasemapList","activeBasemapId","setActiveBasemapId","canSwichProjection","projections","supportedProjections","obj","projectionCode","mapFeaturesConfig","viewSettings","projection","mapProjection","setMapProjection","setBasemap","id","basemap","createBasemapArray","basemapsArray","toJsonObject","find","isInit","basemaps","basemapIndex","customBasemap","customBasemaps","createCustomBasemap","prevArray","length","basemapOptions","coreBasemaps","createCoreBasemap","shaded","labeled","fullWidth","labelId","value","onChange","event","target","currentView","getView","currentCenter","getCenter","currentProjection","getProjection","getCode","newCenter","transformPoints","newProjection","newView","zoom","getZoom","minZoom","getMinZoom","maxZoom","getMaxZoom","center","setView","emit","mapViewProjectionPayload","eventNames","MAP","EVENT_MAP_VIEW_PROJECTION_CHANGE","label","style","inputLabel","menuItems","key","item","children","className","role","tabIndex","onClick","onKeyPress","thumbnailUrl","src","alt","altText","Array","isArray","index","name","BasemapPanelPlugin","schema","defaultConfig","basemapPanel","configObj","pluginProps","MapIcon","displayLanguage","button","tooltip","translations","tooltipPlacement","visible","panel","title","icon","status","isOpen","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","loadDefaultBasemaps","AbstractPlugin","plugins","Cast"],"sourceRoot":""}