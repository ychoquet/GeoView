{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"sQAYMA,EAAIC,OAOH,SAASC,EAAaC,GAC3B,IAAQC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OAEPC,EAASN,EAATM,KACFC,EAAQD,EAAKE,IAAIC,IAAIL,GAEnBI,EAAmBF,EAAnBE,IAAKE,EAAcJ,EAAdI,MAAOC,EAAOL,EAAPK,GACpB,EAAyBA,EAAGC,SAApBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KAERC,EAAwBL,EAAxBK,SAAUC,EAAcN,EAAdM,UAElB,EAAsCD,EAA6B,IAAnE,eAAOE,EAAP,KAAoBC,EAApB,KACA,EAA8CH,EAAiB,IAA/D,eAAOI,EAAP,KAAwBC,EAAxB,KACA,EAA6BL,EAASV,EAAOgB,oBAAtCA,GAAP,eAgFMC,EA9EYX,EAAGY,YAAW,SAACC,GAAD,MAAY,CAC1CC,YAAa,CACXC,gBAAiBF,EAAMG,QAAQC,QAAQC,KACvCC,MAAON,EAAMG,QAAQC,QAAQG,MAC7BC,QAAS,OACTC,cAAe,SACfC,eAAgB,cAChBC,OAAQ,aAAF,OAAeX,EAAMY,aAAaC,eACxCC,aAAc,EACdC,UAAW,OACXC,aAAc,GACdC,WAAY,uBACZ,eAAgB,CACdD,aAAc,GAEhB,wBAAyB,CACvBd,gBAAiBF,EAAMG,QAAQC,QAAQC,KACvCC,MAAON,EAAMY,aAAaM,OAC1BC,SAAU,GACVC,WAAY,IACZC,OAAQ,EACRC,QAAS,SACTC,OAAQ,GACRC,MAAO,OACPC,MAAO,GAET,yBAA0B,CACxBA,MAAO,EACPF,OAAQ,IACRG,SAAU,WACVJ,QAAS,EACT,eAAgB,CACdA,QAAS,GAEX,0BAA2B,CACzBI,SAAU,WACVH,OAAQ,OACRC,MAAO,OACPG,UAAW,QACXC,IAAK,EACLC,KAAM,GAER,iCAAkC,CAChCrB,QAAS,QACTe,OAAQ,OACRC,MAAO,OACPE,SAAU,WACVxB,gBAAiBF,EAAMY,aAAakB,eACpCb,WAAY,yBAGhB,UAAW,CACTc,OAAQ,UACRC,YAAahC,EAAMY,aAAaqB,YAChC,yBAA0B,CACxB,iCAAkC,CAChC/B,gBAAiBF,EAAMY,aAAasB,gBAI1C,WAAY,CACVF,YAAahC,EAAMY,aAAauB,aAChC,yBAA0B,CACxB,iCAAkC,CAChCjC,gBAAiBF,EAAMY,aAAawB,gBAGxC,UAAW,CACTJ,YAAa,yBACb,yBAA0B,CACxB,iCAAkC,CAChC9B,gBAAiB,wBAObmC,GAGVC,EACHzD,EAAO0D,qBAA+CtD,KAAI,SAACuD,GAAD,OAAyBA,MAAAA,OAAzB,EAAyBA,EAAKC,mBAA6B,GACxH,EAA0ClD,EAASR,EAAM2D,kBAAkBzD,IAAI0D,aAAaC,YAA5F,eAAOC,EAAP,KAAsBC,EAAtB,KAOMC,EAAa,SAACC,GAElBjE,EAAMkE,QAAQF,WAAWC,GACzBpD,EAAmBoD,IAQfE,EAAkB,mCAAG,WAAON,GAAP,iFAWzB,IAVMO,GAAgBC,EAAAA,EAAAA,KACnBvE,EAAO0D,qBAA+Cc,MAAK,SAACb,GAAD,OAAyBA,EAAIC,iBAAmBG,MAE1GU,GAAS,EAGbtE,EAAIC,IAAIL,GAAOqE,QAAQM,SAAW,GAClC7D,EAAe,IARU,WAWhB8D,GACP,IAAMC,EAAgBN,EAAcO,eAAeF,GAC7CP,EAAUjE,EAAIC,IAAIL,GAAOqE,QAAQU,oBAAoBF,GACvDR,GAASvD,GAAe,SAACkE,GAAD,wBAAmBA,GAAnB,CAA8BX,OAGtDA,GAA4B,IAAjBO,GAA0C,KAApB7D,IACnCoD,EAAWE,EAAQD,IACnBM,GAAS,IARJE,EAAe,EAAGA,EAAeL,EAAcO,eAAeG,OAAQL,IAAgB,EAAtFA,GAXgB,uBAwBhBA,GAxBgB,kFAyBjBM,EAAiBX,EAAcY,aAAaP,GAzB3B,SA2BDxE,EAAIC,IAAIL,GAAOqE,QAAQe,kBAAkBF,EAAiDlB,GA3BzF,QA2BjBK,EA3BiB,SA4BVvD,GAAe,SAACkE,GAAD,wBAAmBA,GAAnB,CAA8BX,OAGpDD,EA/BiB,UA+BTc,EAAeG,OAAS,SAAW,IA/B1B,OA+B+BH,EAAed,IA/B9C,OA+BmDc,EAAeI,QAAU,QAAU,IACzGjB,GAAWD,IAAOrD,IAAoB2D,IACxCP,EAAWpD,GACX2D,GAAS,GAlCY,0CAwBhBE,EAAe,EAxBC,YAwBEA,EAAeL,EAAcY,aAAaF,QAxB5C,0CAwBhBL,GAxBgB,iBAwBoDA,IAxBpD,uBAuCpBF,GAAQP,EAAWhE,EAAMkE,QAAQM,SAAS,GAAGP,IAvCzB,4CAAH,sDAqFxB,OALAxD,GAAU,WACR0D,EAAmBL,KAElB,KAGD,2BACGhD,IACC,SAACR,EAAD,CACE8E,WAAS,EACTC,QAAQ,mBACRC,MAAOxB,EACPyB,SA7CsB,SAACC,GAC7B,IAAM3B,EAAa2B,EAAMC,OAAOH,MAGhCtB,EAAW,UACXD,EAAiBF,GAGjB,IAAM6B,EAAc1F,EAAM2F,UACpBC,EAAgBF,EAAYG,YAC5BC,EAAoBJ,EAAYK,gBAAgBC,UAChDC,EAAYhG,EAAI4D,WAAWqC,gBAAgBN,EAAeE,EAAmB,aAAa,GAC1FK,EAAgBX,EAAMC,OAAOH,MAE7Bc,EAA4B,CAChCC,KAAMX,EAAYY,UAClBC,QAASb,EAAYc,aACrBC,QAASf,EAAYgB,aACrBC,OAAQV,EACRpC,WAAYsC,GAIdnG,EAAM4G,QAAQR,GACdjC,EAAmBN,GAGnB5D,EAAIuF,MAAMqB,MAAKC,EAAAA,EAAAA,KAAyB7G,EAAI8G,WAAWC,IAAIC,iCAAkCpH,EAAOgE,KAmB9FqD,MAAM,aACNC,MAAO,CACL1F,QAAS3B,EAAOgB,mBAAqB,OAAS,QAEhDsG,WAAY,CACVnD,GAAI,oBAENoD,UAAW9D,EAAYrD,KAAI,SAACoF,GAAD,MAAoB,CAC7CgC,IAAKhC,EACLiC,KAAM,CACJjC,MAAAA,EACAkC,SAAU,QAAF,OAAUlC,UAKzB5E,EAAYR,KAAI,SAACgE,GAChB,OACE,SAAC3D,EAAD,CACEkH,SAAU,EACV1G,QAAS,CAAE2G,KAAM3G,EAAQG,aACzByG,UAAS,UAAKzD,EAAQD,KAAOrD,EAAkB,SAAW,IAC1DgH,QAAS,kBAAM5D,EAAWE,EAAQD,KAClC4D,WAAY,kBAAM7D,EAAWE,EAAQD,KAErC6D,MAAO5D,EAAQ6D,KACfC,SACE,gCACmC,iBAAzB9D,EAAQ+D,eACd,gBAAKC,IAAKhE,EAAQ+D,aAAcE,IAAKjE,EAAQkE,QAAST,UAAU,yBAEjEU,MAAMC,QAAQpE,EAAQ+D,eACrB/D,EAAQ+D,aAAa/H,KAAI,SAACqI,EAAWC,GAEnC,OAAO,gBAAiBN,IAAKK,EAAWJ,IAAKjE,EAAQkE,QAAST,UAAU,wBAAvDa,OAErB,gBAAKb,UAAU,oCAZdzD,EAAQD,U,0lKC3OzB,IAAMxE,EAAIC,OAKJ+I,EAAAA,SAAAA,I,uBAIJ,WAAYxE,EAAYrE,GAA0B,4BAChD,cAAMqE,EAAIrE,IADsC,4BAUzC,kBAAuB8I,MAVkB,mCAiBlC,kBAAsBrE,EAAAA,EAAAA,KAAasE,OAjBD,kCAsBnCtE,EAAAA,EAAAA,KAAa,CAC1B,QAAS,CACPxC,aAAc,YAEhB,QAAS,CACPA,aAAc,qBA3BgC,2BAkC1C,WACN,iBAAQ+G,EAAR,EAAQA,UAEA/I,EAFR,EAAmBgJ,YAEXhJ,MAGAE,EAASN,EAATM,KAER,GAAIA,EAAM,SAEAE,EAAYF,EAAZE,IACA6I,EADY/I,EAAPK,GACUC,SAAfyI,QACAC,EAAoB9I,EAAIC,IAAIL,GAA5BkJ,gBAEFC,EAA8B,CAClC/E,GAAI,qBACJgF,QAAS,EAAKC,aAAaH,GAAiBlH,aAC5CsH,iBAAkB,QAClB3B,UAAU,SAACsB,EAAD,IACVM,SAAS,GAILC,EAAwB,CAC5BvB,MAAO,EAAKoB,aAAaH,GAAiBlH,aAC1CyH,KAAM,oCACN7G,MAAO,IACP8G,OAAQX,MAAAA,OAAF,EAAEA,EAAWY,QAIrB,EAAKC,YAAcxJ,EAAIC,IAAIL,GAAO6J,cAAcC,kBAAkBX,EAAQK,EAAO,MAGjF,YAAKI,mBAAL,mBAAkBJ,aAAlB,SAAyBO,eAAc,SAACjK,EAAD,CAAcE,MAAOA,EAAOC,OAAQ8I,GAAa,UAlE1F,EAAKa,YAAc,KAF6B,E,sCA2ElD,WACE,IAAQ5J,EAAUgK,KAAKhB,YAAfhJ,MAGAE,EAASN,EAATM,KAER,GAAIA,EAAM,CAER,IAAQE,EAAQF,EAARE,IAEJ4J,KAAKJ,cACPxJ,EAAIC,IAAIL,GAAO6J,cAAcI,kBAAkBD,KAAKJ,YAAYxF,IAGhEhE,EAAIC,IAAIL,GAAOqE,QAAQM,SAAW,GAElCvE,EAAIC,IAAIL,GAAOqE,QAAQ6F,4B,EA/FzBtB,CAA2BuB,EAAAA,KAuGjCvK,EAAEwK,QAAUxK,EAAEwK,SAAW,GACzBxK,EAAEwK,QAAQ,kBAAmBC,EAAAA,EAAAA,KAAqBzB,K","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import {\r\n  toJsonObject,\r\n  TypeBasemapProps,\r\n  TypeJsonObject,\r\n  SelectChangeEvent,\r\n  TypeWindow,\r\n  TypeViewSettings,\r\n  mapViewProjectionPayload,\r\n  TypeBasemapOptions,\r\n  TypeProjectionCodes,\r\n} from 'geoview-core';\r\n\r\nconst w = window as TypeWindow;\r\n\r\ninterface BaseMapPanelProps {\r\n  mapId: string;\r\n  config: TypeJsonObject;\r\n}\r\n\r\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\r\n  const { mapId, config } = props;\r\n\r\n  const { cgpv } = w;\r\n  const myMap = cgpv.api.map(mapId);\r\n\r\n  const { api, react, ui } = cgpv;\r\n  const { Select, Card } = ui.elements;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\r\n  const [activeBasemapId, setActiveBasemapId] = useState<string>('');\r\n  const [canSwichProjection] = useState(config.canSwichProjection);\r\n\r\n  const useStyles = ui.makeStyles((theme) => ({\r\n    basemapCard: {\r\n      backgroundColor: theme.palette.primary.dark,\r\n      color: theme.palette.primary.light,\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      backgroundClip: 'padding-box',\r\n      border: `1px solid ${theme.basemapPanel.borderDefault}`,\r\n      borderRadius: 6,\r\n      boxShadow: 'none',\r\n      marginBottom: 16,\r\n      transition: 'all 0.3s ease-in-out',\r\n      '&:last-child': {\r\n        marginBottom: 0,\r\n      },\r\n      '& .MuiCardHeader-root': {\r\n        backgroundColor: theme.palette.primary.dark,\r\n        color: theme.basemapPanel.header,\r\n        fontSize: 14,\r\n        fontWeight: 400,\r\n        margin: 0,\r\n        padding: '0 12px',\r\n        height: 60,\r\n        width: '100%',\r\n        order: 2,\r\n      },\r\n      '& .MuiCardContent-root': {\r\n        order: 1,\r\n        height: 190,\r\n        position: 'relative',\r\n        padding: 0,\r\n        '&:last-child': {\r\n          padding: 0,\r\n        },\r\n        '& .basemapCardThumbnail': {\r\n          position: 'absolute',\r\n          height: '100%',\r\n          width: '100%',\r\n          objectFit: 'cover',\r\n          top: 0,\r\n          left: 0,\r\n        },\r\n        '& .basemapCardThumbnailOverlay': {\r\n          display: 'block',\r\n          height: '100%',\r\n          width: '100%',\r\n          position: 'absolute',\r\n          backgroundColor: theme.basemapPanel.overlayDefault,\r\n          transition: 'all 0.3s ease-in-out',\r\n        },\r\n      },\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n        borderColor: theme.basemapPanel.borderHover,\r\n        '& .MuiCardContent-root': {\r\n          '& .basemapCardThumbnailOverlay': {\r\n            backgroundColor: theme.basemapPanel.overlayHover,\r\n          },\r\n        },\r\n      },\r\n      '&.active': {\r\n        borderColor: theme.basemapPanel.borderActive,\r\n        '& .MuiCardContent-root': {\r\n          '& .basemapCardThumbnailOverlay': {\r\n            backgroundColor: theme.basemapPanel.overlayActive,\r\n          },\r\n        },\r\n        '&:hover': {\r\n          borderColor: 'rgba(255,255,255,0.75)',\r\n          '& .MuiCardContent-root': {\r\n            '& .basemapCardThumbnailOverlay': {\r\n              backgroundColor: 'rgba(0,0,0,0)',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  // TODO: change the path for getting projection on schema refactor\r\n  const projections: number[] =\r\n    (config.supportedProjections as Array<TypeJsonObject>).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\r\n  const [mapProjection, setMapProjection] = useState(myMap.mapFeaturesConfig.map.viewSettings.projection);\r\n\r\n  /**\r\n   * Update the basemap with the layers on the map\r\n   *\r\n   * @param {string} id update the basemap on the map\r\n   */\r\n  const setBasemap = (id: string) => {\r\n    // set the new basemap and update the active basemap variable\r\n    myMap.basemap.setBasemap(id);\r\n    setActiveBasemapId(id);\r\n  };\r\n\r\n  /**\r\n   *  Add basemaps from configuration for selected projection\r\n   *\r\n   * @param {number} projection the projection to create basemaps for\r\n   */\r\n  const createBasemapArray = async (projection: TypeProjectionCodes) => {\r\n    const basemapsArray = toJsonObject(\r\n      (config.supportedProjections as Array<TypeJsonObject>).find((obj: TypeJsonObject) => obj.projectionCode === projection)\r\n    );\r\n    let isInit = false;\r\n\r\n    // reset the basemaps array\r\n    api.map(mapId).basemap.basemaps = [];\r\n    setBasemapList([]);\r\n\r\n    // create the custom config basemap\r\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.customBasemaps.length; basemapIndex++) {\r\n      const customBasemap = basemapsArray.customBasemaps[basemapIndex] as TypeJsonObject;\r\n      const basemap = api.map(mapId).basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\r\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\r\n\r\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\r\n      if (basemap && basemapIndex === 0 && activeBasemapId === '') {\r\n        setBasemap(basemap.id!);\r\n        isInit = true;\r\n      }\r\n    }\r\n\r\n    // create the core basemap\r\n    for (let basemapIndex = 0; basemapIndex < basemapsArray.coreBasemaps.length; basemapIndex++) {\r\n      const basemapOptions = basemapsArray.coreBasemaps[basemapIndex] as TypeJsonObject;\r\n      // eslint-disable-next-line no-await-in-loop\r\n      const basemap = await api.map(mapId).basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions, projection);\r\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\r\n\r\n      // set basemap if previously selected in previous projection\r\n      const id = `${basemapOptions.shaded ? 'shaded' : ''}${basemapOptions.id}${basemapOptions.labeled ? 'label' : ''}`;\r\n      if (basemap && id === activeBasemapId && !isInit) {\r\n        setBasemap(activeBasemapId);\r\n        isInit = true;\r\n      }\r\n    }\r\n\r\n    // if previous basemap does not exist in previous projection, init first one\r\n    if (!isInit) setBasemap(myMap.basemap.basemaps[0].id as string);\r\n  };\r\n\r\n  /**\r\n   * Set new projection view and basemap array\r\n   *\r\n   * @param {SelectChangeEvent} event select change element event\r\n   */\r\n  const setSelectedProjection = (event: SelectChangeEvent<unknown>) => {\r\n    const projection = event.target.value as TypeProjectionCodes;\r\n\r\n    // set basemap to no geom to clean up the view\r\n    setBasemap('nogeom');\r\n    setMapProjection(projection as TypeProjectionCodes);\r\n\r\n    // get view status (center and projection) to calculate new center\r\n    const currentView = myMap.getView();\r\n    const currentCenter = currentView.getCenter();\r\n    const currentProjection = currentView.getProjection().getCode();\r\n    const newCenter = api.projection.transformPoints(currentCenter, currentProjection, 'EPSG:4326')[0];\r\n    const newProjection = event.target.value as TypeProjectionCodes;\r\n\r\n    const newView: TypeViewSettings = {\r\n      zoom: currentView.getZoom() as number,\r\n      minZoom: currentView.getMinZoom(),\r\n      maxZoom: currentView.getMaxZoom(),\r\n      center: newCenter as [number, number],\r\n      projection: newProjection,\r\n    };\r\n\r\n    // set new view and basemaps array (with selected basemap)\r\n    myMap.setView(newView);\r\n    createBasemapArray(projection);\r\n\r\n    // emit an event to let know map view projection as changed\r\n    api.event.emit(mapViewProjectionPayload(api.eventNames.MAP.EVENT_MAP_VIEW_PROJECTION_CHANGE, mapId, projection));\r\n  };\r\n\r\n  /**\r\n   * load existing basemaps and create new basemaps\r\n   */\r\n  useEffect(() => {\r\n    createBasemapArray(mapProjection);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {canSwichProjection && (\r\n        <Select\r\n          fullWidth\r\n          labelId=\"projection-label\"\r\n          value={mapProjection}\r\n          onChange={setSelectedProjection}\r\n          label=\"Projection\"\r\n          style={{\r\n            display: config.canSwichProjection ? 'flex' : 'none',\r\n          }}\r\n          inputLabel={{\r\n            id: 'projection-label',\r\n          }}\r\n          menuItems={projections.map((value: number) => ({\r\n            key: value,\r\n            item: {\r\n              value,\r\n              children: `EPSG:${value}`,\r\n            },\r\n          }))}\r\n        />\r\n      )}\r\n      {basemapList.map((basemap: TypeBasemapProps) => {\r\n        return (\r\n          <Card\r\n            tabIndex={0}\r\n            classes={{ root: classes.basemapCard }}\r\n            className={`${basemap.id === activeBasemapId ? 'active' : ''}`}\r\n            onClick={() => setBasemap(basemap.id as string)}\r\n            onKeyPress={() => setBasemap(basemap.id as string)}\r\n            key={basemap.id}\r\n            title={basemap.name}\r\n            content={\r\n              <>\r\n                {typeof basemap.thumbnailUrl === 'string' && (\r\n                  <img src={basemap.thumbnailUrl} alt={basemap.altText} className=\"basemapCardThumbnail\" />\r\n                )}\r\n                {Array.isArray(basemap.thumbnailUrl) &&\r\n                  basemap.thumbnailUrl.map((thumbnail, index) => {\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    return <img key={index} src={thumbnail} alt={basemap.altText} className=\"basemapCardThumbnail\" />;\r\n                  })}\r\n                <div className=\"basemapCardThumbnailOverlay\" />\r\n              </>\r\n            }\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Cast,\r\n  AbstractPlugin,\r\n  TypePluginOptions,\r\n  TypeIconButtonProps,\r\n  TypeButtonPanel,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypePanelProps,\r\n  TypeJsonObject,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\n\r\nimport { BasemapPanel } from './basemap-panel';\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-basemap-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass BasemapPanelPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(id: string, props: TypePluginOptions) {\r\n    super(id, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the package schema\r\n   *\r\n   * @returns {AnySchemaObject} the package schema\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    'en-CA': {\r\n      basemapPanel: 'Basemaps',\r\n    },\r\n    'fr-CA': {\r\n      basemapPanel: 'Fond de carte',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { configObj, pluginProps } = this;\r\n\r\n    const { mapId } = pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api, ui } = cgpv;\r\n      const { MapIcon } = ui.elements;\r\n      const { displayLanguage } = api.map(mapId);\r\n      // button props\r\n      const button: TypeIconButtonProps = {\r\n        id: 'basemapPanelButton',\r\n        tooltip: this.translations[displayLanguage].basemapPanel as string,\r\n        tooltipPlacement: 'right',\r\n        children: <MapIcon />,\r\n        visible: true,\r\n      };\r\n\r\n      // panel props\r\n      const panel: TypePanelProps = {\r\n        title: this.translations[displayLanguage].basemapPanel,\r\n        icon: '<i class=\"material-icons\">map</i>',\r\n        width: 200,\r\n        status: configObj?.isOpen as boolean,\r\n      };\r\n\r\n      // create a new button panel on the appbar\r\n      this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n      // set panel content\r\n      this.buttonPanel?.panel?.changeContent(<BasemapPanel mapId={mapId} config={configObj || {}} />);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api } = cgpv;\r\n\r\n      if (this.buttonPanel) {\r\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\r\n\r\n        // reset basemaps array\r\n        api.map(mapId).basemap.basemaps = [];\r\n        // reload default basemap\r\n        api.map(mapId).basemap.loadDefaultBasemaps();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BasemapPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['basemap-panel'] = Cast<AbstractPlugin>(BasemapPanelPlugin);\r\n"],"names":["w","window","BasemapPanel","props","mapId","config","cgpv","myMap","api","map","react","ui","elements","Select","Card","useState","useEffect","basemapList","setBasemapList","activeBasemapId","setActiveBasemapId","canSwichProjection","classes","makeStyles","theme","basemapCard","backgroundColor","palette","primary","dark","color","light","display","flexDirection","backgroundClip","border","basemapPanel","borderDefault","borderRadius","boxShadow","marginBottom","transition","header","fontSize","fontWeight","margin","padding","height","width","order","position","objectFit","top","left","overlayDefault","cursor","borderColor","borderHover","overlayHover","borderActive","overlayActive","useStyles","projections","supportedProjections","obj","projectionCode","mapFeaturesConfig","viewSettings","projection","mapProjection","setMapProjection","setBasemap","id","basemap","createBasemapArray","basemapsArray","toJsonObject","find","isInit","basemaps","basemapIndex","customBasemap","customBasemaps","createCustomBasemap","prevArray","length","basemapOptions","coreBasemaps","createCoreBasemap","shaded","labeled","fullWidth","labelId","value","onChange","event","target","currentView","getView","currentCenter","getCenter","currentProjection","getProjection","getCode","newCenter","transformPoints","newProjection","newView","zoom","getZoom","minZoom","getMinZoom","maxZoom","getMaxZoom","center","setView","emit","mapViewProjectionPayload","eventNames","MAP","EVENT_MAP_VIEW_PROJECTION_CHANGE","label","style","inputLabel","menuItems","key","item","children","tabIndex","root","className","onClick","onKeyPress","title","name","content","thumbnailUrl","src","alt","altText","Array","isArray","thumbnail","index","BasemapPanelPlugin","schema","defaultConfig","configObj","pluginProps","MapIcon","displayLanguage","button","tooltip","translations","tooltipPlacement","visible","panel","icon","status","isOpen","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","loadDefaultBasemaps","AbstractPlugin","plugins","Cast"],"sourceRoot":""}