{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/appbar-plugin.ts","webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel-style.ts","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import { TypeButtonPanel, TypePanelProps } from '@/ui/panel/panel-types';\nimport { AbstractPlugin } from './abstract-plugin';\nimport { TypeWindow } from '@/core/types/global-types';\nimport { TypeIconButtonProps } from '@/ui/icon-button/icon-button-types';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  // Store the button props\n  buttonProps?: TypeIconButtonProps;\n\n  // Store the panel props\n  panelProps?: TypePanelProps;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypeIconButtonProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns JSX.Element The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    this.buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    this.panelProps = this.onCreateContentProps();\n\n    // Create content\n    this.panelProps.content = this.onCreateContent();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.mapViewer().appBarApi.createAppbarPanel(this.buttonProps!, this.panelProps, null) || undefined;\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.mapViewer().appBarApi.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n","import { TypeBasemapProps } from 'geoview-core/src/geo/layer/basemap/basemap-types';\nimport { TypeJsonObject, TypeJsonArray, toJsonObject, SelectChangeEvent } from 'geoview-core/src/core/types/global-types';\nimport { useMapProjection } from 'geoview-core/src/core/stores/store-interface-and-intial-values/map-state';\nimport { useAppDisplayLanguage } from 'geoview-core/src/core/stores/store-interface-and-intial-values/app-state';\nimport { TypeBasemapOptions, TypeValidMapProjectionCodes, TypeDisplayLanguage } from 'geoview-core/src/api/config/types/map-schema-types';\nimport { logger } from 'geoview-core/src/core/utils/logger';\nimport { getLocalizedMessage } from 'geoview-core/src/core/utils/utilities';\nimport { getSxClasses } from './basemap-panel-style';\n\ninterface BaseMapPanelProps {\n  mapId: string;\n  config: TypeJsonObject;\n}\n\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\n  const { mapId, config } = props;\n\n  const { cgpv } = window;\n  const myMap = cgpv.api.maps[mapId];\n\n  const { api, ui, react } = cgpv;\n  const { Select, Card, Box } = ui.elements;\n\n  const { useState, useEffect } = react;\n\n  const theme = ui.useTheme();\n  const sxClasses = getSxClasses(theme);\n\n  // internal state and store values\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\n  const [activeBasemapId, setActiveBasemapId] = useState<string>('');\n  const [canSwichProjection] = useState(config.canSwichProjection);\n  const projections: number[] =\n    (config.supportedProjections as TypeJsonArray).map((obj: TypeJsonObject) => obj?.projectionCode as number) || [];\n  const storeProjection = useMapProjection();\n  const [mapProjection, setMapProjection] = useState(storeProjection);\n  const language = useAppDisplayLanguage();\n\n  // #region PRIVATE UTILITY FUNCTIONS\n  /**\n   * Get basemap thumbnail url\n   *\n   * @param {string[]} basemapTypes basemap layer type (shaded, transport, label, simple)\n   * @param {TypeValidMapProjectionCodes} projection basemap projection\n   * @param {TypeDisplayLanguage} displayLanguage basemap language\n   *\n   * @returns {string[]} array of thumbnail urls\n   */\n  function getThumbnailUrl(\n    basemapTypes: string[],\n    projection: TypeValidMapProjectionCodes,\n    displayLanguage: TypeDisplayLanguage\n  ): string[] {\n    const thumbnailUrls: string[] = [];\n\n    for (let typeIndex = 0; typeIndex < basemapTypes.length; typeIndex++) {\n      const type = basemapTypes[typeIndex];\n\n      if (type === 'transport') {\n        if (myMap.basemap.basemapsList[projection].transport?.url) {\n          thumbnailUrls.push(\n            (myMap.basemap.basemapsList[projection].transport?.url as string)\n              .replace('{z}', '8')\n              .replace('{y}', projection === 3978 ? '285' : '91')\n              .replace('{x}', projection === 3978 ? '268' : '74')\n          );\n        }\n      }\n\n      if (type === 'simple') {\n        // Only available in 3978\n        if (myMap.basemap.basemapsList[projection].simple?.url) {\n          thumbnailUrls.push(\n            (myMap.basemap.basemapsList[projection].simple.url as string).replace('{z}', '8').replace('{y}', '285').replace('{x}', '268')\n          );\n        }\n      }\n\n      if (type === 'shaded') {\n        // Only available in 3978\n        if (myMap.basemap.basemapsList[projection].shaded?.url) {\n          thumbnailUrls.push(\n            (myMap.basemap.basemapsList[projection].shaded.url as string).replace('{z}', '8').replace('{y}', '285').replace('{x}', '268')\n          );\n        }\n      }\n\n      if (type === 'label') {\n        if (myMap.basemap.basemapsList[projection].label?.url) {\n          thumbnailUrls.push(\n            (myMap.basemap.basemapsList[projection].label.url as string)\n              .replaceAll('xxxx', displayLanguage === 'en' ? 'CBMT' : 'CBCT')\n              .replace('{z}', '8')\n              .replace('{y}', projection === 3978 ? '285' : '91')\n              .replace('{x}', projection === 3978 ? '268' : '74')\n          );\n        }\n      }\n\n      if (type === 'osm') {\n        thumbnailUrls.push('https://tile.openstreetmap.org/0/0/0.png');\n      }\n    }\n\n    return thumbnailUrls;\n  }\n\n  /**\n   * Get basemap information (name and description)\n   *\n   * @param {string[]} basemapTypes basemap layer type (shaded, transport, label, simple)\n   * @returns { name: string; description: string } array with information [name, description]\n   */\n  function getInfo(basemapTypes: string[]): { name: string; description: string } {\n    let name = '';\n    let description = '';\n\n    if (basemapTypes.includes('transport')) {\n      name = getLocalizedMessage('basemapPanel.info.transport.name', language);\n      description = getLocalizedMessage('basemapPanel.info.transport.description', language);\n    } else if (basemapTypes.includes('simple')) {\n      name = getLocalizedMessage('basemapPanel.info.simple.name', language);\n    } else if (basemapTypes.includes('shaded')) {\n      name = getLocalizedMessage('basemapPanel.info.shaded.name', language);\n      description = getLocalizedMessage('basemapPanel.info.shaded.description', language);\n    } else if (basemapTypes.includes('osm')) {\n      name = getLocalizedMessage('basemapPanel.info.osm.name', language);\n    } else if (basemapTypes.includes('nogeom')) {\n      name = getLocalizedMessage('basemapPanel.info.nogeom.name', language);\n    }\n\n    if (basemapTypes.includes('label')) name = `${name} ${getLocalizedMessage('basemapPanel.info.label.name', language)}`;\n\n    return { name, description };\n  }\n  // #endregion\n\n  /**\n   * Update the basemap with the layers on the map\n   *\n   * @param {string} id update the basemap on the map\n   */\n  const setBasemap = (basemapId: string): void => {\n    // get basemap from id\n    const basemap = basemapList.find((item) => item.basemapId === basemapId);\n\n    // set the new basemap and update the active basemap variable\n    if (basemap !== undefined) {\n      myMap.basemap.setBasemap(basemap);\n      setActiveBasemapId(basemapId);\n    }\n  };\n\n  /**\n   *  Add basemaps from configuration for selected projection\n   *\n   * @param {number} projection the projection to create basemaps for\n   * @returns {Promise<void>}\n   */\n  const createBasemapArray = async (projection: TypeValidMapProjectionCodes): Promise<void> => {\n    const basemapsArray = toJsonObject(\n      (config.supportedProjections as Array<TypeJsonObject>).find((obj: TypeJsonObject) => obj.projectionCode === projection)\n    );\n    let isInit = false;\n\n    // reset the basemaps array\n    setBasemapList([]);\n\n    // create the custom config basemap\n    for (let basemapIndex = 0; basemapIndex < (basemapsArray.customBasemaps.length as number); basemapIndex++) {\n      const customBasemap = basemapsArray.customBasemaps[basemapIndex] as TypeJsonObject;\n      const basemap = api.maps[mapId].basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps, projection);\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\n\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\n      if (basemap && basemapIndex === 0 && activeBasemapId === '') {\n        setBasemap(basemap.basemapId!);\n        isInit = true;\n      }\n    }\n\n    // create the core basemap\n    for (let basemapIndex = 0; basemapIndex < (basemapsArray.coreBasemaps.length as number); basemapIndex++) {\n      const basemapOptions = basemapsArray.coreBasemaps[basemapIndex] as TypeJsonObject;\n      // TODO: Check - Should probably move the await outside of the loop so that all core basemaps start processing in parallel?\n      // TO.DOCONT: If doing so, be mindful of the isInit which seems to prioritize the first basemap in the list (and maybe why this await is in the loop?)\n      // eslint-disable-next-line no-await-in-loop\n      const basemap = await api.maps[mapId].basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions, projection);\n\n      if (basemap) {\n        // get thumbnail and info (name and description) for core basemap\n        const { name, description } = getInfo(basemap.type.split('-'));\n        basemap.thumbnailUrl = getThumbnailUrl(basemap.type.split('-'), storeProjection, language);\n        basemap.name = name;\n        basemap.description = description;\n\n        setBasemapList((prevArray) => [...prevArray, basemap]);\n      }\n\n      // set basemap if previously selected in previous projection\n      const id = `${basemapOptions.shaded ? 'shaded' : ''}${basemapOptions.id}${basemapOptions.labeled ? 'label' : ''}`;\n      if (basemap && id === activeBasemapId && !isInit) {\n        setBasemap(activeBasemapId);\n        isInit = true;\n      }\n    }\n\n    // if previous basemap does not exist in previous projection, init first one\n    if (!isInit) setBasemap(basemapList[0] as unknown as string);\n  };\n\n  /**\n   * Set new projection view and basemap array\n   *\n   * @param {SelectChangeEvent} event select change element event\n   */\n  const setSelectedProjection = (event: SelectChangeEvent<unknown>): void => {\n    const projection = event.target.value as TypeValidMapProjectionCodes;\n\n    // set basemap to no geom to clean up the view\n    setBasemap('nogeom');\n    setMapProjection(projection as TypeValidMapProjectionCodes);\n\n    createBasemapArray(projection)\n      .then(() => {\n        // emit an event to let know map view projection as changed\n        myMap.setProjection(projection);\n      })\n      .catch((error) => {\n        // Log\n        logger.logPromiseFailed('createBasemapArray in setSelectedProjection in basemap-panel', error);\n      });\n  };\n\n  /**\n   * load existing basemaps and create new basemaps\n   */\n  useEffect(() => {\n    createBasemapArray(mapProjection).catch((error) => {\n      // Log\n      logger.logPromiseFailed('createBasemapArray in useEffect in basemap-panel', error);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [language]);\n\n  return (\n    <Box sx={sxClasses.basemapCard}>\n      {canSwichProjection && (\n        <Select\n          fullWidth\n          labelId=\"projection-label\"\n          value={mapProjection}\n          onChange={setSelectedProjection}\n          label=\"Projection\"\n          style={{\n            display: config.canSwichProjection ? 'flex' : 'none',\n            marginBottom: '8px',\n          }}\n          inputLabel={{\n            id: 'projection-label',\n          }}\n          menuItems={projections.map((value: number) => ({\n            key: value,\n            item: {\n              value,\n              children: `EPSG:${value}`,\n            },\n          }))}\n          variant=\"standard\"\n        />\n      )}\n      {basemapList.map((basemap: TypeBasemapProps) => {\n        return (\n          <Card\n            tabIndex={0}\n            className={basemap.basemapId === activeBasemapId ? 'active' : ''}\n            onClick={() => setBasemap(basemap.basemapId as string)}\n            onKeyPress={() => setBasemap(basemap.basemapId as string)}\n            key={basemap.basemapId}\n            title={basemap.name}\n            contentCard={\n              <>\n                {typeof basemap.thumbnailUrl === 'string' && (\n                  <Box component=\"img\" src={basemap.thumbnailUrl} alt={basemap.altText} className=\"basemapCardThumbnail\" />\n                )}\n                {Array.isArray(basemap.thumbnailUrl) &&\n                  (basemap.thumbnailUrl as string[]).map((thumbnail, index) => {\n                    // eslint-disable-next-line react/no-array-index-key\n                    return <Box component=\"img\" key={index} src={thumbnail} alt={basemap.altText} className=\"basemapCardThumbnail\" />;\n                  })}\n                <Box className={basemap.basemapId !== activeBasemapId ? 'basemapCardThumbnailOverlay' : ''} />\n              </>\n            }\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","/* @ts-expect-error there is no mui style in this package */\n\n// ? I doubt we want to define an explicit type for style properties?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getSxClasses = (theme): any => ({\n  basemapCard: {\n    '& .MuiCard-root': {\n      backgroundColor: theme.palette.grey.A700,\n      color: theme.palette.primary.light,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundClip: 'padding-box',\n      border: '2px solid rgba(255,255,255,0.25)',\n      borderRadius: '6px',\n      boxShadow: 'none',\n      marginBottom: '16px',\n      width: '300px',\n      transition: 'all 0.3s ease-in-out',\n      '&:last-child': {\n        marginBottom: '0px',\n      },\n      '&:hover': {\n        border: `2px solid #FFFF00`,\n      },\n      '&.active': {\n        border: `2px solid #FFFFFF`,\n      },\n    },\n    '& .MuiCardHeader-root': {\n      backgroundColor: `${theme.palette.geoViewColor.grey.dark[900]} !important`,\n      color: theme.palette.geoViewColor.grey.light[900],\n      fontSize: 14,\n      fontWeight: 400,\n      margin: 0,\n      padding: '0 12px',\n      height: 60,\n      width: '100%',\n      order: 2,\n    },\n    '& .MuiCardContent-root': {\n      order: 1,\n      height: 190,\n      position: 'relative',\n      padding: 0,\n      '&:last-child': {\n        padding: 0,\n      },\n      '& .basemapCardThumbnail': {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        objectFit: 'cover',\n        top: 0,\n        left: 0,\n      },\n      '& .basemapCardThumbnailOverlay': {\n        display: 'block',\n        height: '100%',\n        width: '100%',\n        position: 'absolute',\n        backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.85),\n        transition: 'all 0.3s ease-in-out',\n      },\n    },\n    '&:hover': {\n      cursor: 'pointer',\n      borderColor: theme.palette.geoViewColor.primary.main,\n      '& .MuiCardContent-root': {\n        '& .basemapCardThumbnailOverlay': {\n          backgroundColor: theme.palette.geoViewColor.grey.lighten(0.5, 0.55),\n        },\n      },\n    },\n    '&.active': {\n      borderColor: theme.palette.geoViewColor.primary.light[200],\n      '& .MuiCardContent-root': {\n        '& .basemapCardThumbnailOverlay': {\n          backgroundColor: 'transparent',\n        },\n      },\n      '&:hover': {\n        borderColor: 'rgba(255,255,255,0.75)',\n        '& .MuiCardContent-root': {\n          '& .basemapCardThumbnailOverlay': {\n            backgroundColor: 'rgba(0,0,0,0)',\n          },\n        },\n      },\n    },\n  },\n});\n","import { TypeJsonObject, toJsonObject, AnySchemaObject, Cast } from 'geoview-core/src/core/types/global-types';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\nimport { MapIcon } from 'geoview-core/src/ui/icons';\nimport { TypeIconButtonProps } from 'geoview-core/src/ui/icon-button/icon-button-types';\nimport { TypePanelProps } from 'geoview-core/src/ui/panel/panel-types';\nimport { BasemapPanel } from './basemap-panel';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-basemap-panel.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass BasemapPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  override schema(): AnySchemaObject {\n    return schema;\n  }\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  override defaultConfig(): TypeJsonObject {\n    return toJsonObject(defaultConfig);\n  }\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      basemapPanel: {\n        title: 'Basemaps',\n        info: {\n          transport: {\n            name: 'Transport',\n            description: `The Canada Base Map - Transportation (CBMT). This web mapping service provides spatial reference context with an emphasis on transportation networks.\n                          It is designed especially for use as a background map in a web mapping application or geographic information system (GIS).`,\n          },\n          simple: {\n            name: 'Simple',\n          },\n          shaded: {\n            name: 'Shaded relief',\n            description: `The Canada Base Map - Elevation (CBME) web mapping services of the Earth Sciences Sector at Natural Resources Canada,\n                          is intended primarily for online mapping application users and developers`,\n          },\n          osm: {\n            name: 'Open Street Maps',\n          },\n          nogeom: {\n            name: 'No geometry',\n          },\n          label: {\n            name: 'with labels',\n          },\n        },\n      },\n    },\n    fr: {\n      basemapPanel: {\n        title: 'Fond de carte',\n        info: {\n          transport: {\n            name: 'Transport',\n            description: `Carte de base du Canada - Transport (CBCT). Ce service de cartographie Web offre un contexte de référence spatiale axé sur les réseaux de transport.\n                          Il est particulièrement conçu pour être utilisé comme fond de carte dans une application cartographique Web ou un système d'information géographique (SIG).`,\n          },\n          simple: {\n            name: 'Simple',\n          },\n          shaded: {\n            name: 'Relief ombré',\n            description: `Les services de cartographie Web de la carte de base du Canada - élévation (CBCE) du Secteur des sciences de la\n                          Terre de Ressources naturelles Canada sont destinés principalement aux utilisateurs et aux développeurs d'applications de cartographie en ligne.`,\n          },\n          osm: {\n            name: 'Carte - Open Street Maps',\n          },\n          nogeom: {\n            name: 'Pas de géométrie',\n          },\n          label: {\n            name: 'avec étiquettes',\n          },\n        },\n      },\n    },\n  });\n\n  override onCreateButtonProps(): TypeIconButtonProps {\n    // Button props\n    return {\n      id: `${this.pluginProps.mapId}-basemapPanelButton`,\n      tooltip: 'basemapPanel.title',\n      tooltipPlacement: 'right',\n      children: <MapIcon />,\n      visible: true,\n    };\n  }\n\n  override onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: 'basemapPanel.title',\n      icon: <MapIcon />,\n      width: 350,\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  override onCreateContent = (): JSX.Element => {\n    return <BasemapPanel mapId={this.pluginProps.mapId} config={this.configObj || {}} />;\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  override onRemoved(): void {\n    // reset basemaps array\n    this.mapViewer().basemap.basemaps = [];\n  }\n}\n\nexport default BasemapPanelPlugin;\n\n// Keep a reference to the Basemap Panel Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['basemap-panel'] = Cast<BasemapPanelPlugin>(BasemapPanelPlugin);\n"],"names":["AppBarPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_inherits","_createClass","key","value","MapIcon","window","cgpv","ui","elements","id","tooltip","tooltipPlacement","children","this","react","createElement","visible","_this$configObj","title","icon","width","status","configObj","isOpen","undefined","pluginProps","mapId","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","content","onCreateContent","buttonPanel","mapViewer","appBarApi","createAppbarPanel","api","removeAppbarPanel","buttonPanelId","AbstractPlugin","BasemapPanel","props","config","myMap","maps","_ui$elements","Select","Card","Box","useState","useEffect","sxClasses","theme","basemapCard","backgroundColor","palette","grey","A700","color","primary","light","display","flexDirection","backgroundClip","border","borderRadius","boxShadow","marginBottom","transition","geoViewColor","dark","fontSize","fontWeight","margin","padding","height","order","position","objectFit","top","left","lighten","cursor","borderColor","main","getSxClasses","useTheme","_useState","_useState2","_slicedToArray","basemapList","setBasemapList","_useState3","_useState4","activeBasemapId","setActiveBasemapId","_useState5","canSwichProjection","projections","supportedProjections","map","obj","projectionCode","storeProjection","useMapProjection","_useState7","_useState8","mapProjection","setMapProjection","language","useAppDisplayLanguage","getThumbnailUrl","basemapTypes","projection","displayLanguage","thumbnailUrls","typeIndex","_myMap$basemap$basema","_myMap$basemap$basema2","_myMap$basemap$basema3","_myMap$basemap$basema4","_myMap$basemap$basema5","type","basemap","basemapsList","transport","url","push","replace","simple","shaded","label","replaceAll","getInfo","name","description","includes","getLocalizedMessage","setBasemap","basemapId","find","item","createBasemapArray","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","basemapsArray","isInit","_loop","basemapIndex","_loop2","_basemapIndex","_context3","prev","next","toJsonObject","customBasemap","_context","customBasemaps","createCustomBasemap","prevArray","_toConsumableArray","stop","delegateYield","basemapOptions","_getInfo","_context2","coreBasemaps","createCoreBasemap","sent","split","thumbnailUrl","labeled","_x","apply","error","logger","logPromiseFailed","_jsxs","sx","_jsx","fullWidth","labelId","onChange","event","target","then","setProjection","style","inputLabel","menuItems","variant","tabIndex","className","onClick","onKeyPress","contentCard","_Fragment","component","src","alt","altText","isArray","thumbnail","index","BasemapPanelPlugin","_AppBarPlugin","en","basemapPanel","info","osm","nogeom","fr","schema","defaultConfig","basemaps","geoviewPlugins","Cast"],"sourceRoot":""}