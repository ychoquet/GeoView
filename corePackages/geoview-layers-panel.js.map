{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/layers-list.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport {\n  TypeWindow,\n  toJsonObject,\n  TypeJsonArray,\n  TypeEsriDynamicLayerEntryConfig,\n  TypeWmsLayerEntryConfig,\n  TypeWMSLayerConfig,\n  TypeGeoviewLayerConfig,\n  TypeGeoviewLayerType,\n  SelectChangeEvent,\n  snackbarMessagePayload,\n  ButtonPropsLayerPanel,\n  TypeListOfLayerEntryConfig,\n} from 'geoview-core';\n\ntype Event = { target: { value: string } };\n\ninterface Props {\n  mapId: string;\n  setAddLayerVisible: (isVisible: boolean) => void;\n}\n\ntype EsriOptions = {\n  err: string;\n  capability: string;\n};\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react, ui } = cgpv;\n\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, WMS, WFS, OGC_FEATURE, XYZ_TILES } = api.layerTypes;\n  const { useState } = react;\n  const { Select, Stepper, TextField, Button, ButtonGroup, Typography, Autocomplete } = ui.elements;\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [layerURL, setLayerURL] = useState('');\n  const [layerType, setLayerType] = useState<TypeGeoviewLayerType | ''>('');\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\n  const [layerName, setLayerName] = useState('');\n  const [layerEntries, setLayerEntries] = useState<(TypeEsriDynamicLayerEntryConfig | TypeWMSLayerConfig)[]>([]);\n\n  const useStyles = ui.makeStyles(() => ({\n    buttonGroup: {\n      paddingTop: 12,\n      gap: 6,\n    },\n  }));\n  const classes = useStyles();\n\n  const isMultiple = () => layerType === ESRI_DYNAMIC;\n\n  /**\n   * List of layer types and labels\n   */\n  const layerOptions = [\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\n    [ESRI_FEATURE, 'ESRI Feature Service'],\n    [GEOJSON, 'GeoJSON'],\n    [WMS, 'OGC Web Map Service (WMS)'],\n    [WFS, 'OGC Web Feature Service (WFS)'],\n    [OGC_FEATURE, 'OGC API Features'],\n    [XYZ_TILES, 'XYZ Raster Tiles'],\n  ];\n\n  /**\n   * Returns the appropriate error config for ESRI layer types\n   *\n   * @param type one of esriDynamic or esriFeature\n   * @returns {EsriOptions} an error configuration object for populating dialogues\n   */\n  const esriOptions = (type: string): EsriOptions => {\n    switch (type) {\n      case ESRI_DYNAMIC:\n        return { err: 'ESRI Map', capability: 'Map' };\n      case ESRI_FEATURE:\n        return { err: 'ESRI Feature', capability: 'Query' };\n      default:\n        return { err: '', capability: '' };\n    }\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorEmpty = (textField: string) => {\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `${textField} cannot be empty`,\n      })\n    );\n  };\n\n  /**\n   * Emits an error when the URL does not support the selected service type\n   *\n   * @param serviceName type of service provided by the URL\n   */\n  const emitErrorServer = (serviceName: string) => {\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `URL is not a valid ${serviceName} Server`,\n      })\n    );\n  };\n\n  /**\n   * Emits an error when a service does not support the current map projection\n   *\n   * @param serviceName type of service provided by the URL\n   * @param proj current map projection\n   */\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `${serviceName} does not support current map projection ${proj}, only ${supportedProj.join(', ')}`,\n      })\n    );\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WMS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wmsValidation = async (): Promise<boolean> => {\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\n    let supportedProj: string[] = [];\n    try {\n      const wms = await api.geoUtilities.getWMSServiceMetadata(layerURL, '');\n      supportedProj = wms.Capability.Layer.CRS as string[];\n      if (!supportedProj.includes(proj)) throw new Error('proj');\n      const layers = (wms.Capability.Layer.Layer as TypeJsonArray).map((aLayer) => [aLayer.Name, aLayer.Title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            geoviewLayerId: layers[0][0] as string,\n            geoviewLayerType: 'ogcWms',\n            listOfLayerEntryConfig: [],\n          },\n        ]);\n      } else setLayerList(layers);\n    } catch (err) {\n      if (err === 'proj') emitErrorProj('WMS', proj, supportedProj);\n      else emitErrorServer('WMS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WFS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wfsValidation = async (): Promise<boolean> => {\n    try {\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\n        toJsonObject((aFeatureType.Name['#text'] as string).split(':')[1]),\n        aFeatureType.Title['#text'],\n      ]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            geoviewLayerId: layers[0][0] as string,\n            geoviewLayerType: 'ogcWms',\n            listOfLayerEntryConfig: [],\n          },\n        ]);\n      } else setLayerList(layers);\n    } catch (err) {\n      emitErrorServer('WFS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid OGC API.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const ogcFeatureValidation = async (): Promise<boolean> => {\n    const keys = ['collections', 'links'];\n    try {\n      const response = await fetch(`${layerURL}/collections?f=json`);\n      const json = await response.json();\n      const isValid = keys.every((key) => Object.keys(json).includes(key));\n      if (!isValid) throw new Error('err');\n      const layers = (json.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            geoviewLayerId: layers[0][0] as string,\n            geoviewLayerType: 'ogcWms',\n            listOfLayerEntryConfig: [],\n          },\n        ]);\n      } else setLayerList(layers);\n    } catch (err) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const esriValidation = async (type: string): Promise<boolean> => {\n    try {\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\n        if ('layers' in esri) {\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\n\n          if (layers.length === 1) {\n            setLayerName(layers[0][1] as string);\n            setLayerEntries([\n              {\n                geoviewLayerId: layers[0][0] as string,\n                geoviewLayerType: 'ogcWms',\n                listOfLayerEntryConfig: [],\n              },\n            ]);\n          } else setLayerList(layers);\n        } else {\n          setLayerName(esri.name as string);\n          setLayerEntries([\n            {\n              geoviewLayerId: esri.id as string,\n              geoviewLayerType: 'ogcWms',\n              listOfLayerEntryConfig: [],\n            },\n          ]);\n        }\n      } else {\n        throw new Error('err');\n      }\n    } catch (err) {\n      emitErrorServer(esriOptions(type).err);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\n   *\n   * @returns {boolean} True if layer passes validation\n   */\n  const xyzValidation = (): boolean => {\n    const proj = api.projection.projections[api.map(mapId).currentProjection].getCode();\n    const tiles = ['{x}', '{y}', '{z}'];\n    for (let i = 0; i < tiles.length; i += 1) {\n      if (!layerURL.includes(tiles[i])) {\n        emitErrorServer('XYZ Tile');\n        return false;\n      }\n    }\n    if (proj !== 'EPSG:3857') {\n      emitErrorProj('XYZ Tiles', proj, ['EPSG:3857']);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoJSONValidation = async (): Promise<boolean> => {\n    try {\n      const response = await fetch(layerURL);\n      const json = await response.json();\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) throw new Error('err');\n    } catch (err) {\n      emitErrorServer('GeoJSON');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep1 = () => {\n    let valid = true;\n    if (layerURL.trim() === '') {\n      valid = false;\n      emitErrorEmpty('URL');\n    }\n    if (valid) setActiveStep(1);\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep2 = async () => {\n    let valid = true;\n    if (layerType === undefined) {\n      valid = false;\n      emitErrorEmpty('Service Type');\n    }\n    if (layerType === WMS) valid = await wmsValidation();\n    if (layerType === WFS) valid = await wfsValidation();\n    if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\n    if (valid) setActiveStep(2);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStep3 = () => {\n    let valid = true;\n    if (layerEntries.length === 0) {\n      valid = false;\n      emitErrorEmpty('Layer');\n    }\n    if (valid) setActiveStep(3);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStepLast = () => {\n    let valid = true;\n    const name = layerName;\n    let url = layerURL;\n    let entries = layerEntries;\n    // if (Array.isArray(entries)) entries = entries.join(',');\n    if (layerType === ESRI_DYNAMIC) url = api.geoUtilities.getMapServerUrl(layerURL);\n    else if (layerType === ESRI_FEATURE) {\n      url = `${api.geoUtilities.getMapServerUrl(layerURL)}/${(layerEntries as TypeEsriDynamicLayerEntryConfig[])[0].layerId}`;\n      entries = [];\n    }\n\n    if (layerName === '') {\n      valid = false;\n      emitErrorEmpty(isMultiple() ? 'Name' : 'Layer');\n    }\n    const layerConfig: TypeGeoviewLayerConfig = {\n      geoviewLayerId: api.generateId(),\n      geoviewLayerName: {\n        en: name,\n        fr: name,\n      },\n      geoviewLayerType: layerType as TypeGeoviewLayerType,\n      metadataAccessPath: {\n        en: url,\n        fr: url,\n      },\n      listOfLayerEntryConfig: entries as TypeListOfLayerEntryConfig,\n    };\n    if (valid) {\n      api.map(mapId).layer.addGeoviewLayer(layerConfig);\n      setAddLayerVisible(false);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Back' button in the Stepper UI\n   */\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  /**\n   * Set layer URL from form input\n   *\n   * @param e TextField event\n   */\n  const handleInput = (event: Event) => {\n    setLayerURL(event.target.value);\n    setLayerType('');\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layerType from form input\n   *\n   * @param {SelectChangeEvent} event TextField event\n   */\n  const handleSelectType = (event: SelectChangeEvent<unknown>) => {\n    setLayerType(event.target.value as TypeGeoviewLayerType);\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set the currently selected layer from a list\n   *\n   * @param event Select event\n   * @param newValue value/label pairs of select options\n   */\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\n    if (isMultiple()) {\n      setLayerEntries(\n        newValue.map((x: string) => {\n          if (layerType === ESRI_DYNAMIC) {\n            return { layerId: x[0] } as TypeEsriDynamicLayerEntryConfig;\n          }\n\n          return { layerId: x[0] as string } as TypeWmsLayerEntryConfig;\n        })\n      );\n      setLayerName(newValue.map((x) => x[1]).join(', '));\n    } else {\n      if (layerType === ESRI_DYNAMIC) {\n        setLayerEntries([{ layerId: newValue[0] } as TypeEsriDynamicLayerEntryConfig]);\n      } else {\n        setLayerEntries([{ layerId: newValue[0] } as TypeWmsLayerEntryConfig]);\n      }\n      setLayerName(newValue[1]);\n    }\n  };\n\n  /**\n   * Set the layer name from form input\n   *\n   * @param e TextField event\n   */\n  const handleNameLayer = (event: Event) => {\n    setLayerName(event.target.value);\n  };\n\n  /**\n   * Creates a set of Continue / Back buttons\n   *\n   * @param param0 specify if button is first or last in the list\n   * @returns {JSX.Element} React component\n   */\n  // eslint-disable-next-line react/no-unstable-nested-components\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonPropsLayerPanel): JSX.Element {\n    return (\n      <ButtonGroup className={classes.buttonGroup}>\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\n          {isLast ? 'Finish' : 'Continue'}\n        </Button>\n        {!isFirst && (\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\n            Back\n          </Button>\n        )}\n      </ButtonGroup>\n    );\n  }\n\n  return (\n    <Stepper\n      activeStep={activeStep}\n      orientation=\"vertical\"\n      steps={[\n        {\n          stepLabel: {\n            children: 'Enter URL',\n          },\n          stepContent: {\n            children: (\n              <>\n                <TextField sx={{ width: '100%' }} label=\"URL\" variant=\"standard\" value={layerURL} onChange={handleInput} />\n                <br />\n                <NavButtons isFirst handleNext={handleStep1} />\n              </>\n            ),\n          },\n        },\n        {\n          stepLabel: {\n            children: 'Select format',\n          },\n          stepContent: {\n            children: (\n              <>\n                <Select\n                  fullWidth\n                  labelId=\"service-type-label\"\n                  value={layerType}\n                  onChange={handleSelectType}\n                  label=\"Service Type\"\n                  inputLabel={{\n                    id: 'service-type-label',\n                  }}\n                  menuItems={layerOptions.map(([value, label]) => ({\n                    key: value,\n                    item: {\n                      value,\n                      children: label,\n                    },\n                  }))}\n                />\n                <NavButtons handleNext={handleStep2} />\n              </>\n            ),\n          },\n        },\n        {\n          stepLabel: {\n            children: 'Configure layer',\n          },\n          stepContent: {\n            children: (\n              <>\n                {layerList.length === 0 && layerEntries.length === 0 && (\n                  <TextField label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                )}\n                {layerList.length === 0 && layerEntries.length > 0 && <Typography>{layerName}</Typography>}\n                {layerList.length > 1 && (\n                  <Autocomplete\n                    fullWidth\n                    multiple={isMultiple()}\n                    disableCloseOnSelect\n                    disableClearable={!isMultiple()}\n                    id=\"service-layer-label\"\n                    options={layerList}\n                    getOptionLabel={(option) => `${option[1]} (${option[0]})`}\n                    renderOption={(props, option) => <span {...props}>{option[1]}</span>}\n                    // value={\n                    //   layerType === ESRI_DYNAMIC\n                    //     ? layerEntries.map((entry) => {\n                    //         return (entry as TypeDynamicLayerEntry).index.toString();\n                    //       })\n                    //     : layerEntries.map((entry) => {\n                    //         return (entry as TypeOgcLayerEntry).id;\n                    //       })\n                    // }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    onChange={handleSelectLayer as any}\n                    renderInput={(params) => <TextField {...params} label=\"Select Layer\" />}\n                  />\n                )}\n                <br />\n                <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\n              </>\n            ),\n          },\n        },\n        isMultiple()\n          ? {\n              stepLabel: {\n                children: 'Enter Name',\n              },\n              stepContent: {\n                children: (\n                  <>\n                    <TextField sx={{ width: '100%' }} label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                    <br />\n                    <NavButtons isLast handleNext={handleStepLast} />\n                  </>\n                ),\n              },\n            }\n          : null,\n      ]}\n    />\n  );\n}\n\nexport default LayerStepper;\n","/* eslint-disable react/no-array-index-key */\nimport {\n  TypeJsonValue,\n  TypeJsonArray,\n  toJsonObject,\n  TypeJsonObject,\n  AbstractGeoViewLayer,\n  TypeWindow,\n  geoviewLayerIsWMS,\n  geoviewLayerIsEsriDynamic,\n  geoviewLayerIsEsriFeature,\n  getLocalizedValue,\n} from 'geoview-core';\n\n/**\n * interface for the layers list properties in layers panel\n */\ntype TypeLayersPanelListProps = {\n  mapId: string;\n  layers: Record<string, AbstractGeoViewLayer>;\n  displayLanguage: string;\n};\n\ntype TypeLegend =\n  | TypeJsonValue[]\n  | {\n      name: string;\n      dataUrl: string[] | string | ArrayBuffer | null;\n    }[];\n\ntype TypeSubLayerVisibility = { [subLayerId: string]: number[] };\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that will list the map server layers defined in the map config\n * @param {TypeLayersPanelListProps} props properties passed to the component\n * @returns {JSX.Element} a React JSX Element containing map server layers\n */\nfunction LayersList(props: TypeLayersPanelListProps): JSX.Element {\n  const { mapId, layers, displayLanguage } = props;\n\n  const { cgpv } = w;\n  const { ui, react, api } = cgpv;\n  const { useState, useEffect } = react;\n\n  const [selectedLayer, setSelectedLayer] = useState<string>('');\n  const [layerLegend, setLayerLegend] = useState<{ [legendId: string]: TypeLegend }>({});\n  const [layerBounds, setLayerBounds] = useState<Record<string, number[]>>({});\n  const [layerBbox, setLayerBbox] = useState<number[][]>([]);\n  const [layerOpacity, setLayerOpacity] = useState<Record<string, number>>({});\n  const [layerVisibility, setLayerVisibility] = useState<Record<string, boolean>>({});\n  const [subLayerVisibility, setSubLayerVisibility] = useState<TypeSubLayerVisibility>({});\n\n  const { Button, Slider, Tooltip, Checkbox } = ui.elements;\n\n  const translations: TypeJsonObject = toJsonObject({\n    en: {\n      bounds: 'Toggle Bounds',\n      zoom: 'Zoom to Layer',\n      remove: 'Remove Layer',\n      opacity: 'Adjust Opacity',\n      visibility: 'Toggle Visibility',\n    },\n    fr: {\n      bounds: 'Basculer la limite',\n      zoom: 'Zoom sur la Couche',\n      remove: 'Supprimer la Couche',\n      opacity: \"Ajuster l'opacité\",\n      visibility: 'Basculer la Visibilité',\n    },\n  });\n\n  const useStyles = ui.makeStyles(() => ({\n    layersContainer: {\n      overflow: 'hidden',\n      overflowY: 'auto',\n      width: '100%',\n    },\n    layerItem: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      margin: '5px 0',\n      padding: '10px 5px',\n      boxSizing: 'content-box',\n      '&:hover': {\n        cursor: 'pointer',\n        backgroundColor: '#c9c9c9',\n      },\n      zIndex: 1000,\n      border: 'none',\n      width: '100%',\n    },\n    layerParentText: {\n      fontSize: '16px',\n      fontWeight: 'bold',\n    },\n    layerCountTextContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      height: '32px',\n    },\n    layerItemText: {\n      fontSize: '14px',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      marginLeft: '10px',\n      display: 'flex',\n      alignItems: 'center',\n      gap: 6,\n    },\n    flexGroup: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'baseline',\n      gap: 12,\n    },\n    flexGroupButton: {\n      height: 38,\n      minHeight: 38,\n      width: 25,\n      minWidth: 25,\n      '& > div': {\n        textAlign: 'center',\n      },\n    },\n    slider: {\n      width: '100%',\n      paddingLeft: 20,\n      paddingRight: 20,\n    },\n    legendSubLayerGroup: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n  }));\n\n  /**\n   * Calls setLayerLegend for all layers\n   */\n  const setLayerLegendAll = () =>\n    Object.values(layers).forEach(async (layer) => {\n      if (geoviewLayerIsWMS(layer)) {\n        const dataUrl = await layer.getLegendGraphic();\n        const name = getLocalizedValue(layer.metadataAccessPath, layer.mapId)!.includes('/MapServer') ? layer.geoviewLayerName : '';\n        const legend = [{ name, dataUrl }];\n        setLayerLegend((state) => ({ ...state, [layer.geoviewLayerId]: legend }));\n      } else if (geoviewLayerIsEsriDynamic(layer) || geoviewLayerIsEsriFeature(layer)) {\n        const legend = await layer.getLegendJson();\n        const legendArray = Array.isArray(legend) ? legend : [legend];\n        setLayerLegend((state) => ({ ...state, [layer.geoviewLayerId]: legendArray }));\n      }\n    });\n\n  /**\n   * Calls setLayerExtent for all layers\n   */\n  const setLayerBoundsAll = async () => {\n    for (let layerIndex = 0; layerIndex < Object.keys(layers).length; layerIndex++) {\n      const layerKey = Object.keys(layers)[layerIndex];\n      const layerValue = layers[layerKey];\n\n      // eslint-disable-next-line no-await-in-loop\n      const bounds = await layerValue.getBounds();\n      setLayerBounds((state) => ({ ...state, [layerValue.geoviewLayerId]: bounds }));\n    }\n  };\n\n  useEffect(() => {\n    const defaultLegends = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.geoviewLayerId]: [] }), {});\n    setLayerLegend((state) => ({ ...defaultLegends, ...state }));\n    setLayerLegendAll();\n\n    const defaultBounds = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.geoviewLayerId]: [] }), {});\n    setLayerBounds((state) => ({ ...defaultBounds, ...state }));\n    setLayerBoundsAll();\n\n    const defaultSliders = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.geoviewLayerId]: 100 }), {});\n    setLayerOpacity((state) => ({ ...defaultSliders, ...state }));\n\n    const defaultVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.geoviewLayerId]: true }), {});\n    setLayerVisibility((state) => ({ ...defaultVisibility, ...state }));\n\n    const defaultSubVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.geoviewLayerId]: curr.entries }), {});\n    setSubLayerVisibility((state) => ({ ...defaultSubVisibility, ...state }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [layers]);\n\n  const classes = useStyles();\n\n  /**\n   * Sets the currently selected layer,\n   * sets to blank if value is same as currently selecetd layer\n   *\n   * @param value layer button value\n   */\n  const onClick = (value: string) => {\n    const selected = value !== selectedLayer ? value : '';\n    setSelectedLayer(selected);\n  };\n\n  /**\n   * Removes selcted layer from map\n   *\n   * @param layer layer config\n   */\n  const onZoom = (layer: AbstractGeoViewLayer) => api.map(mapId).fitBounds(layerBounds[layer.geoviewLayerId]);\n\n  /**\n   * Returns polygon with segmented top and bottom to handle curved projection\n   *\n   * @param {number[]} bounds layer bounds\n   * @param {number} segments layer bounds\n   * @returns {number[][]} the bounding box coordinates\n   */\n  const polygonFromBounds = (bounds: number[], segments = 100): number[][] => {\n    // store longitude and latitude of each point of polygon\n    const lnglats: number[][] = [];\n\n    if (bounds && bounds.length > 0) {\n      const west = bounds[0];\n      const south = bounds[1];\n      const east = bounds[2];\n      const north = bounds[3];\n\n      const southEast = [east, south];\n      const southWest = [west, south];\n      const northEast = [east, north];\n      const northWest = [west, north];\n\n      const width = east - west;\n\n      lnglats.push(southWest);\n      for (let i = 1; i <= segments; i += 1) {\n        const segmentWidth = width * (i / (segments + 1));\n        const lat = west + segmentWidth;\n        lnglats.push([lat, south]);\n      }\n      lnglats.push(southEast);\n      lnglats.push(northEast);\n      for (let i = 1; i <= segments; i += 1) {\n        const segmentWidth = width * (i / (segments + 1));\n        const lat = east - segmentWidth;\n        lnglats.push([lat, north]);\n      }\n      lnglats.push(northWest);\n    }\n\n    return lnglats;\n  };\n\n  /**\n   * Adds bounding box to map\n   *\n   * @param layer layer config\n   */\n  const onBounds = (layer: AbstractGeoViewLayer) => {\n    const bbox = polygonFromBounds(layerBounds[layer.geoviewLayerId]);\n\n    if (layerBbox.toString() === bbox.toString()) {\n      api.map(mapId).layer.vector?.deleteGeometry('layerBoundingBox');\n      setLayerBbox([]);\n    } else {\n      api.map(mapId).layer.vector?.deleteGeometry('layerBoundingBox');\n      api.map(mapId).layer.vector?.addPolygon(\n        [bbox],\n        {\n          style: {\n            strokeColor: 'red',\n            fillColor: 'red',\n            fillOpacity: 0.2,\n          },\n        },\n        'layerBoundingBox'\n      );\n      setLayerBbox(bbox);\n    }\n  };\n\n  /**\n   * Removes selcted layer from map, also removing bbox if active\n   *\n   * @param layer layer config\n   */\n  const onRemove = (layer: AbstractGeoViewLayer) => {\n    // empty bounding box\n    setLayerBbox([]);\n    // remove bounding box layer from map\n    api.map(mapId).layer.vector?.deleteGeometry('layerBoundingBox');\n    // remove layer from map\n    api.map(mapId).layer.removeGeoviewLayer(layer);\n  };\n\n  /**\n   * Adjusts layer opacity when slider is moved\n   *\n   * @param value slider opacity value (0-100)\n   * @param data Layer data\n   */\n  const onSliderChange = (value: number, data: AbstractGeoViewLayer) => {\n    setLayerOpacity((state) => ({ ...state, [data.geoviewLayerId]: value }));\n    const opacity = layerVisibility[data.geoviewLayerId] ? value / 100 : 0;\n    data.setOpacity(opacity);\n  };\n\n  /**\n   * Adjusts layer visibility when checkbox is toggled\n   *\n   * @param value checkbox boolean\n   * @param data Layer data\n   */\n  const onVisibilityChange = (value: boolean, data: AbstractGeoViewLayer) => {\n    setLayerVisibility((state) => ({ ...state, [data.geoviewLayerId]: value }));\n    const opacity = value ? layerOpacity[data.geoviewLayerId] / 100 : 0;\n    data.setOpacity(opacity);\n    if (value && data.setEntries) {\n      setSubLayerVisibility((state) => ({ ...state, [data.geoviewLayerId]: data.entries as number[] }));\n      data.setEntries(data.entries as number[]);\n    }\n    if (!value && data.setEntries) {\n      setSubLayerVisibility((state) => ({ ...state, [data.geoviewLayerId]: [] }));\n      data.setEntries([]);\n    }\n  };\n\n  /**\n   * Adjusts sublayer visibility when checkbox is toggled\n   *\n   * @param value checkbox boolean\n   * @param data Layer data\n   * @param id sublayer ID\n   */\n  const onSubVisibilityChange = (value: boolean, data: AbstractGeoViewLayer, id: number) => {\n    const oldEntries = subLayerVisibility[data.geoviewLayerId];\n    const entries = value ? [...new Set([...oldEntries, id])] : oldEntries.filter((x) => x !== id);\n    if (oldEntries.length === 0) {\n      setLayerVisibility((state) => ({ ...state, [data.geoviewLayerId]: true }));\n      data.setOpacity(layerOpacity[data.geoviewLayerId] / 100);\n    }\n    if (entries.length === 0) {\n      setLayerVisibility((state) => ({ ...state, [data.geoviewLayerId]: false }));\n      data.setOpacity(0);\n    }\n    setSubLayerVisibility((state) => ({ ...state, [data.geoviewLayerId]: entries }));\n    if (data.setEntries) data.setEntries(entries);\n  };\n\n  return (\n    <div className={classes.layersContainer}>\n      {Object.values(layers).map((layer) => (\n        <div key={layer.geoviewLayerId}>\n          <button type=\"button\" className={classes.layerItem} onClick={() => onClick(layer.geoviewLayerId)}>\n            <div className={classes.layerCountTextContainer}>\n              <div className={classes.layerItemText} title={layer.geoviewLayerName}>\n                {layer.geoviewLayerName}\n              </div>\n            </div>\n          </button>\n          {selectedLayer === layer.geoviewLayerId && (\n            <>\n              <div className={classes.flexGroup}>\n                <Button\n                  className={classes.flexGroupButton}\n                  tooltip={translations[displayLanguage].zoom as string}\n                  tooltipPlacement=\"top\"\n                  variant=\"contained\"\n                  type=\"icon\"\n                  icon='<i class=\"material-icons\">zoom_in</i>'\n                  onClick={() => onZoom(layer)}\n                />\n                <Button\n                  className={classes.flexGroupButton}\n                  tooltip={translations[displayLanguage].bounds as string}\n                  tooltipPlacement=\"top\"\n                  variant=\"contained\"\n                  type=\"icon\"\n                  icon='<i class=\"material-icons\">crop_free</i>'\n                  onClick={() => onBounds(layer)}\n                />\n                <Button\n                  className={classes.flexGroupButton}\n                  tooltip={translations[displayLanguage].remove as string}\n                  tooltipPlacement=\"top\"\n                  variant=\"contained\"\n                  type=\"icon\"\n                  icon='<i class=\"material-icons\">remove</i>'\n                  onClick={() => onRemove(layer)}\n                />\n              </div>\n              <div className={classes.flexGroup}>\n                <Tooltip title={translations[displayLanguage].opacity}>\n                  <i className=\"material-icons\">contrast</i>\n                </Tooltip>\n                <div className={classes.slider}>\n                  <Slider\n                    id={api.generateId()}\n                    min={0}\n                    max={100}\n                    size=\"small\"\n                    value={layerOpacity[layer.geoviewLayerId]}\n                    valueLabelDisplay=\"auto\"\n                    customOnChange={(value) => onSliderChange(value as number, layer)}\n                  />\n                </div>\n                <Tooltip title={translations[displayLanguage].visibility}>\n                  <Checkbox checked={layerVisibility[layer.geoviewLayerId]} onChange={(e) => onVisibilityChange(e.target.checked, layer)} />\n                </Tooltip>\n              </div>\n              {(layerLegend[layer.geoviewLayerId] as TypeJsonArray).map((subLayer, index: number) => (\n                <div key={index}>\n                  {subLayer!.legend && (\n                    <div className={classes.legendSubLayerGroup}>\n                      <div className={classes.layerItemText} title={subLayer.layerName as string}>\n                        {subLayer.layerName}\n                      </div>\n                      <Tooltip title={translations[displayLanguage].visibility}>\n                        <Checkbox\n                          checked={subLayerVisibility[layer.geoviewLayerId].includes(subLayer.layerId as number)}\n                          onChange={(e) => onSubVisibilityChange(e.target.checked, layer, subLayer.layerId as number)}\n                        />\n                      </Tooltip>\n                    </div>\n                  )}\n                  {(subLayer.drawingInfo?.renderer.type as string) === 'simple' && subLayer.drawingInfo?.renderer.symbol.imageData && (\n                    <div className={classes.layerItemText}>\n                      <img\n                        alt=\"Layer Legend\"\n                        src={`data:${subLayer.drawingInfo?.renderer.symbol.contentType};base64,${subLayer.drawingInfo?.renderer.symbol.imageData}`}\n                      />\n                      {subLayer.drawingInfo?.renderer.label || subLayer.name}\n                    </div>\n                  )}\n                  {subLayer.drawingInfo?.renderer.type === 'uniqueValue' &&\n                    subLayer.drawingInfo.renderer.uniqueValueInfos[0].symbol.imageData &&\n                    (subLayer.drawingInfo.renderer.uniqueValueInfos as TypeJsonArray).map((uniqueValue, i: number) => (\n                      <div key={i} className={classes.layerItemText}>\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.symbol.contentType};base64,${uniqueValue.symbol.imageData}`} />\n                        {uniqueValue.label}\n                      </div>\n                    ))}\n                  {subLayer.legend &&\n                    (subLayer.legend as TypeJsonArray).map((uniqueValue, i: number) => (\n                      <div key={i} className={classes.layerItemText}>\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.contentType};base64,${uniqueValue.imageData}`} />\n                        {uniqueValue.label || subLayer.layerName}\n                      </div>\n                    ))}\n                  {subLayer.dataUrl && (\n                    <div className={classes.layerItemText}>\n                      <img alt=\"Layer Legend\" src={subLayer.dataUrl as string} />\n                      {subLayer.name}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default LayersList;\n","import { toJsonObject, TypeJsonObject, TypeWindow, TypeButtonPanel } from 'geoview-core';\n\nimport LayerStepper from './layer-stepper';\nimport LayersList from './layers-list';\n\ntype TypePanelContentProps = {\n  buttonPanel: TypeButtonPanel;\n  mapId: string;\n};\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @param {TypePanelContentProps} props the properties of the pane content\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\n  const { mapId, buttonPanel } = props;\n\n  const { cgpv } = w;\n  const { api, react, ui } = cgpv;\n  const { useState, useEffect } = react;\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\n  const [mapLayers, setMapLayers] = useState({});\n  const { Button } = ui.elements;\n\n  const { displayLanguage } = api.map(mapId!);\n\n  const translations: TypeJsonObject = toJsonObject({\n    en: {\n      addLayer: 'Add Layer',\n    },\n    fr: {\n      addLayer: 'Ajouter Couche',\n    },\n  });\n\n  const useStyles = ui.makeStyles(() => ({\n    mainContainer: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    addLayerButton: {\n      width: 50,\n      minWidth: 50,\n      '& > div': {\n        textAlign: 'center',\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  const onClick = () => setAddLayerVisible((state: boolean) => !state);\n\n  useEffect(() => {\n    setMapLayers(() => ({ ...api.map(mapId!).layer.geoviewLayers }));\n\n    api.event.on(\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\n      () =>\n        setMapLayers(() => ({\n          ...api.map(mapId!).layer.geoviewLayers,\n        })),\n      mapId\n    );\n    api.event.on(\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\n      () =>\n        setMapLayers(() => ({\n          ...api.map(mapId!).layer.geoviewLayers,\n        })),\n      mapId\n    );\n    api.event.on(\n      api.eventNames.PANEL.EVENT_PANEL_CLOSE,\n      () => {\n        setAddLayerVisible(false);\n      },\n      mapId,\n      buttonPanel.buttonPanelId\n    );\n\n    return () => {\n      api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, mapId, buttonPanel.buttonPanelId);\n    };\n  }, [api, buttonPanel.buttonPanelId, mapId]);\n\n  return (\n    <>\n      <div className={classes.mainContainer}>\n        <Button\n          className={classes.addLayerButton}\n          tooltip={translations[displayLanguage].addLayer as string}\n          tooltipPlacement=\"right\"\n          variant=\"contained\"\n          type=\"icon\"\n          icon='<i class=\"material-icons\">add</i>'\n          onClick={onClick}\n        />\n      </div>\n      {addLayerVisible && <LayerStepper mapId={mapId!} setAddLayerVisible={setAddLayerVisible} />}\n      <div style={{ display: addLayerVisible ? 'none' : 'inherit' }}>\n        <LayersList mapId={mapId!} layers={mapLayers} displayLanguage={displayLanguage} />\n      </div>\n    </>\n  );\n}\n\nexport default PanelContent;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  Cast,\n  AbstractPlugin,\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeIconButtonProps,\n  TypePanelProps,\n  AnySchemaObject,\n} from 'geoview-core';\nimport PanelContent from './panel-content';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-layers-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass LayersPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations: TypeJsonObject = toJsonObject({\n    en: {\n      layersPanel: 'Layers',\n    },\n    fr: {\n      layersPanel: 'Couches',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { LayersOutlinedIcon } = ui.elements;\n    const { displayLanguage } = api.map(mapId);\n\n    let panelStatus = false;\n\n    panelStatus = this.configObj?.isOpen?.large as boolean;\n\n    // button props\n    const button: TypeIconButtonProps = {\n      id: 'layersPanelButton',\n      tooltip: this.translations[displayLanguage].layersPanel as string,\n      tooltipPlacement: 'right',\n      children: <LayersOutlinedIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[displayLanguage].layersPanel,\n      icon: '<i class=\"material-icons\">layers</i>',\n      width: 200,\n      status: panelStatus,\n    };\n\n    // create a new button panel on the app-bar\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId} />);\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n\nexport default LayersPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['layers-panel'] = Cast<AbstractPlugin>(LayersPanelPlugin);\n"],"names":["w","window","mapId","setAddLayerVisible","cgpv","api","react","ui","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","WMS","WFS","OGC_FEATURE","XYZ_TILES","useState","elements","Select","Stepper","TextField","Button","ButtonGroup","Typography","Autocomplete","activeStep","setActiveStep","layerURL","setLayerURL","layerType","setLayerType","layerList","setLayerList","layerName","setLayerName","layerEntries","setLayerEntries","classes","makeStyles","buttonGroup","paddingTop","gap","useStyles","isMultiple","layerOptions","esriOptions","type","err","capability","emitErrorEmpty","textField","event","emit","snackbarMessagePayload","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","value","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","projection","projections","map","currentProjection","getCode","geoUtilities","getWMSServiceMetadata","wms","Capability","Layer","CRS","includes","Error","layers","aLayer","Name","Title","length","geoviewLayerId","geoviewLayerType","listOfLayerEntryConfig","wfsValidation","getWFSServiceMetadata","wfs","FeatureTypeList","FeatureType","aFeatureType","toJsonObject","split","ogcFeatureValidation","keys","fetch","response","json","every","key","Object","collections","id","title","esriValidation","getESRIServiceMetadata","esri","capabilities","name","xyzValidation","tiles","i","geoJSONValidation","handleStep2","valid","undefined","handleStepLast","url","entries","getMapServerUrl","layerId","layerConfig","generateId","geoviewLayerName","en","fr","metadataAccessPath","layer","addGeoviewLayer","handleBack","prevActiveStep","handleNameLayer","target","NavButtons","isFirst","isLast","handleNext","className","variant","onClick","orientation","steps","stepLabel","children","stepContent","sx","width","label","onChange","trim","fullWidth","labelId","inputLabel","menuItems","item","multiple","disableCloseOnSelect","disableClearable","options","getOptionLabel","option","renderOption","props","newValue","x","renderInput","params","displayLanguage","useEffect","selectedLayer","setSelectedLayer","layerLegend","setLayerLegend","layerBounds","setLayerBounds","layerBbox","setLayerBbox","layerOpacity","setLayerOpacity","layerVisibility","setLayerVisibility","subLayerVisibility","setSubLayerVisibility","Slider","Tooltip","Checkbox","translations","bounds","zoom","remove","opacity","visibility","layersContainer","overflow","overflowY","layerItem","display","alignItems","justifyContent","margin","padding","boxSizing","cursor","backgroundColor","zIndex","border","layerParentText","fontSize","fontWeight","layerCountTextContainer","height","layerItemText","whiteSpace","textOverflow","marginLeft","flexGroup","flexGroupButton","minHeight","minWidth","textAlign","slider","paddingLeft","paddingRight","legendSubLayerGroup","setLayerBoundsAll","layerIndex","layerKey","layerValue","getBounds","state","defaultLegends","values","reduce","prev","curr","forEach","geoviewLayerIsWMS","getLegendGraphic","dataUrl","getLocalizedValue","legend","geoviewLayerIsEsriDynamic","geoviewLayerIsEsriFeature","getLegendJson","legendArray","Array","isArray","defaultBounds","defaultSliders","defaultVisibility","defaultSubVisibility","tooltip","tooltipPlacement","icon","fitBounds","onZoom","bbox","segments","lnglats","west","south","east","north","southEast","southWest","northEast","northWest","push","lat","polygonFromBounds","toString","vector","deleteGeometry","addPolygon","style","strokeColor","fillColor","fillOpacity","onBounds","removeGeoviewLayer","onRemove","min","max","size","valueLabelDisplay","customOnChange","data","setOpacity","onSliderChange","checked","e","setEntries","onVisibilityChange","subLayer","index","oldEntries","Set","filter","drawingInfo","renderer","symbol","imageData","alt","src","contentType","uniqueValueInfos","uniqueValue","buttonPanel","addLayerVisible","mapLayers","setMapLayers","addLayer","mainContainer","flexDirection","addLayerButton","geoviewLayers","on","LAYER","EVENT_LAYER_ADDED","EVENT_REMOVE_LAYER","PANEL","EVENT_PANEL_CLOSE","buttonPanelId","off","LayersPanelPlugin","pluginId","schema","defaultConfig","layersPanel","panelStatus","pluginProps","LayersOutlinedIcon","configObj","isOpen","large","button","visible","panel","status","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}