{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/layers-list.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\r\nimport {\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypeJsonArray,\r\n  TypeDynamicLayerEntry,\r\n  TypeOgcLayerEntry,\r\n  TypeLayerConfig,\r\n  TypeWebLayers,\r\n  TypeSelectChangeEvent,\r\n  snackbarMessagePayload,\r\n} from 'geoview-core';\r\n\r\ntype Event = { target: { value: string } };\r\n\r\ninterface Props {\r\n  mapId: string;\r\n  setAddLayerVisible: (isVisible: boolean) => void;\r\n}\r\n\r\ninterface ButtonProps {\r\n  isFirst?: boolean;\r\n  isLast?: boolean;\r\n  handleNext: () => void;\r\n}\r\n\r\ntype EsriOptions = {\r\n  err: string;\r\n  capability: string;\r\n};\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @returns {JSX.Element} A React JSX Element with the details panel\r\n */\r\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react, ui } = cgpv;\r\n\r\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, WMS, WFS, OGC_FEATURE, XYZ_TILES } = api.layerTypes;\r\n  const { useState } = react;\r\n  const { Select, Stepper, TextField, Button, ButtonGroup, Typography, Autocomplete } = ui.elements;\r\n\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [layerURL, setLayerURL] = useState('');\r\n  const [layerType, setLayerType] = useState<TypeWebLayers | ''>('');\r\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\r\n  const [layerName, setLayerName] = useState('');\r\n  const [layerEntries, setLayerEntries] = useState<(TypeDynamicLayerEntry | TypeOgcLayerEntry)[]>([]);\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    buttonGroup: {\r\n      paddingTop: 12,\r\n      gap: 6,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const isMultiple = () => layerType === ESRI_DYNAMIC;\r\n\r\n  /**\r\n   * List of layer types and labels\r\n   */\r\n  const layerOptions = [\r\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\r\n    [ESRI_FEATURE, 'ESRI Feature Service'],\r\n    [GEOJSON, 'GeoJSON'],\r\n    [WMS, 'OGC Web Map Service (WMS)'],\r\n    [WFS, 'OGC Web Feature Service (WFS)'],\r\n    [OGC_FEATURE, 'OGC API Features'],\r\n    [XYZ_TILES, 'XYZ Raster Tiles'],\r\n  ];\r\n\r\n  /**\r\n   * Returns the appropriate error config for ESRI layer types\r\n   *\r\n   * @param type one of esriDynamic or esriFeature\r\n   * @returns {EsriOptions} an error configuration object for populating dialogues\r\n   */\r\n  const esriOptions = (type: string): EsriOptions => {\r\n    switch (type) {\r\n      case ESRI_DYNAMIC:\r\n        return { err: 'ESRI Map', capability: 'Map' };\r\n      case ESRI_FEATURE:\r\n        return { err: 'ESRI Feature', capability: 'Query' };\r\n      default:\r\n        return { err: '', capability: '' };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Emits an error dialogue when a text field is empty\r\n   *\r\n   * @param textField label for the TextField input that cannot be empty\r\n   */\r\n  const emitErrorEmpty = (textField: string) => {\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `${textField} cannot be empty`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Emits an error when the URL does not support the selected service type\r\n   *\r\n   * @param serviceName type of service provided by the URL\r\n   */\r\n  const emitErrorServer = (serviceName: string) => {\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `URL is not a valid ${serviceName} Server`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Emits an error when a service does not support the current map projection\r\n   *\r\n   * @param serviceName type of service provided by the URL\r\n   * @param proj current map projection\r\n   */\r\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\r\n    api.event.emit(\r\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\r\n        type: 'string',\r\n        value: `${serviceName} does not support current map projection ${proj}, only ${supportedProj.join(', ')}`,\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid WMS,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const wmsValidation = async (): Promise<boolean> => {\r\n    const proj = api.map(mapId).projection.getCRS().code!;\r\n    let supportedProj: string[] = [];\r\n    try {\r\n      const wms = await api.geoUtilities.getWMSServiceMetadata(layerURL, '');\r\n      supportedProj = wms.Capability.Layer.CRS as string[];\r\n      if (!supportedProj.includes(proj)) throw new Error('proj');\r\n      const layers = (wms.Capability.Layer.Layer as TypeJsonArray).map((aLayer) => [aLayer.Name, aLayer.Title]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            id: layers[0][0] as string,\r\n          },\r\n        ]);\r\n      } else setLayerList(layers);\r\n    } catch (err) {\r\n      if (err === 'proj') emitErrorProj('WMS', proj, supportedProj);\r\n      else emitErrorServer('WMS');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid WFS,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const wfsValidation = async (): Promise<boolean> => {\r\n    try {\r\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\r\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\r\n        toJsonObject((aFeatureType.Name['#text'] as string).split(':')[1]),\r\n        aFeatureType.Title['#text'],\r\n      ]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            id: layers[0][0] as string,\r\n          },\r\n        ]);\r\n      } else setLayerList(layers);\r\n    } catch (err) {\r\n      emitErrorServer('WFS');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid OGC API.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const ogcFeatureValidation = async (): Promise<boolean> => {\r\n    const keys = ['collections', 'links'];\r\n    try {\r\n      const response = await fetch(`${layerURL}/collections?f=json`);\r\n      const json = await response.json();\r\n      const isValid = keys.every((key) => Object.keys(json).includes(key));\r\n      if (!isValid) throw new Error('err');\r\n      const layers = (json.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\r\n      if (layers.length === 1) {\r\n        setLayerName(layers[0][1] as string);\r\n        setLayerEntries([\r\n          {\r\n            id: layers[0][0] as string,\r\n          },\r\n        ]);\r\n      } else setLayerList(layers);\r\n    } catch (err) {\r\n      emitErrorServer('OGC API Feature');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\r\n   * and add either Name and Entry directly to state if a single layer,\r\n   * or a list of Names / Entries if multiple layer options exist.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const esriValidation = async (type: string): Promise<boolean> => {\r\n    try {\r\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\r\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\r\n        if ('layers' in esri) {\r\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\r\n\r\n          if (layers.length === 1) {\r\n            setLayerName(layers[0][1] as string);\r\n            setLayerEntries([\r\n              {\r\n                index: layers[0][0] as number,\r\n              },\r\n            ]);\r\n          } else setLayerList(layers);\r\n        } else {\r\n          setLayerName(esri.name as string);\r\n          setLayerEntries([\r\n            {\r\n              index: esri.id as number,\r\n            },\r\n          ]);\r\n        }\r\n      } else {\r\n        throw new Error('err');\r\n      }\r\n    } catch (err) {\r\n      emitErrorServer(esriOptions(type).err);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\r\n   *\r\n   * @returns {boolean} True if layer passes validation\r\n   */\r\n  const xyzValidation = (): boolean => {\r\n    const proj = api.map(mapId).projection.getCRS().code;\r\n    const tiles = ['{x}', '{y}', '{z}'];\r\n    for (let i = 0; i < tiles.length; i += 1) {\r\n      if (!layerURL.includes(tiles[i])) {\r\n        emitErrorServer('XYZ Tile');\r\n        return false;\r\n      }\r\n    }\r\n    if (proj !== 'EPSG:3857') {\r\n      emitErrorProj('XYZ Tiles', proj, ['EPSG:3857']);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\r\n   *\r\n   * @returns {Promise<boolean>} True if layer passes validation\r\n   */\r\n  const geoJSONValidation = async (): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch(layerURL);\r\n      const json = await response.json();\r\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) throw new Error('err');\r\n    } catch (err) {\r\n      emitErrorServer('GeoJSON');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Continue' button in the Stepper UI\r\n   */\r\n  const handleStep1 = () => {\r\n    let valid = true;\r\n    if (layerURL.trim() === '') {\r\n      valid = false;\r\n      emitErrorEmpty('URL');\r\n    }\r\n    if (valid) setActiveStep(1);\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Continue' button in the Stepper UI\r\n   */\r\n  const handleStep2 = async () => {\r\n    let valid = true;\r\n    if (layerType === undefined) {\r\n      valid = false;\r\n      emitErrorEmpty('Service Type');\r\n    }\r\n    if (layerType === WMS) valid = await wmsValidation();\r\n    if (layerType === WFS) valid = await wfsValidation();\r\n    if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\r\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\r\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\r\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\r\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\r\n    if (valid) setActiveStep(2);\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Finish' button in the Stepper UI\r\n   */\r\n  const handleStep3 = () => {\r\n    let valid = true;\r\n    if (layerEntries.length === 0) {\r\n      valid = false;\r\n      emitErrorEmpty('Layer');\r\n    }\r\n    if (valid) setActiveStep(3);\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Finish' button in the Stepper UI\r\n   */\r\n  const handleStepLast = () => {\r\n    let valid = true;\r\n    const name = layerName;\r\n    let url = layerURL;\r\n    let entries = layerEntries;\r\n    // if (Array.isArray(entries)) entries = entries.join(',');\r\n    if (layerType === ESRI_DYNAMIC) url = api.geoUtilities.getMapServerUrl(layerURL);\r\n    else if (layerType === ESRI_FEATURE) {\r\n      url = `${api.geoUtilities.getMapServerUrl(layerURL)}/${(layerEntries as TypeDynamicLayerEntry[])[0].index}`;\r\n      entries = [];\r\n    }\r\n\r\n    if (layerName === '') {\r\n      valid = false;\r\n      emitErrorEmpty(isMultiple() ? 'Name' : 'Layer');\r\n    }\r\n    const layerConfig: TypeLayerConfig = {\r\n      id: api.generateId(),\r\n      name: {\r\n        en: name,\r\n        fr: name,\r\n      },\r\n      layerType: layerType as TypeWebLayers,\r\n      url: {\r\n        en: url,\r\n        fr: url,\r\n      },\r\n      layerEntries: entries,\r\n    };\r\n    if (valid) {\r\n      api.map(mapId).layer.addLayer(layerConfig);\r\n      setAddLayerVisible(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle the behavior of the 'Back' button in the Stepper UI\r\n   */\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\r\n  };\r\n\r\n  /**\r\n   * Set layer URL from form input\r\n   *\r\n   * @param e TextField event\r\n   */\r\n  const handleInput = (event: Event) => {\r\n    setLayerURL(event.target.value);\r\n    setLayerType('');\r\n    setLayerList([]);\r\n    setLayerName('');\r\n    setLayerEntries([]);\r\n  };\r\n\r\n  /**\r\n   * Set layerType from form input\r\n   *\r\n   * @param {TypeSelectChangeEvent} event TextField event\r\n   */\r\n  const handleSelectType = (event: TypeSelectChangeEvent<unknown>) => {\r\n    setLayerType(event.target.value as TypeWebLayers);\r\n    setLayerList([]);\r\n    setLayerName('');\r\n    setLayerEntries([]);\r\n  };\r\n\r\n  /**\r\n   * Set the currently selected layer from a list\r\n   *\r\n   * @param event Select event\r\n   * @param newValue value/label pairs of select options\r\n   */\r\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\r\n    if (isMultiple()) {\r\n      setLayerEntries(\r\n        newValue.map((x: string) => {\r\n          if (layerType === ESRI_DYNAMIC) {\r\n            return {\r\n              index: parseInt(x[0], 10),\r\n            } as TypeDynamicLayerEntry;\r\n          }\r\n\r\n          return {\r\n            id: x[0] as string,\r\n          } as TypeOgcLayerEntry;\r\n        })\r\n      );\r\n      setLayerName(newValue.map((x) => x[1]).join(', '));\r\n    } else {\r\n      if (layerType === ESRI_DYNAMIC) {\r\n        setLayerEntries([\r\n          {\r\n            index: parseInt(newValue[0], 10),\r\n          } as TypeDynamicLayerEntry,\r\n        ]);\r\n      } else {\r\n        setLayerEntries([\r\n          {\r\n            id: newValue[0],\r\n          } as TypeOgcLayerEntry,\r\n        ]);\r\n      }\r\n      setLayerName(newValue[1]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the layer name from form input\r\n   *\r\n   * @param e TextField event\r\n   */\r\n  const handleNameLayer = (event: Event) => {\r\n    setLayerName(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Creates a set of Continue / Back buttons\r\n   *\r\n   * @param param0 specify if button is first or last in the list\r\n   * @returns {JSX.Element} React component\r\n   */\r\n  // eslint-disable-next-line react/no-unstable-nested-components\r\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonProps): JSX.Element {\r\n    return (\r\n      <ButtonGroup className={classes.buttonGroup}>\r\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\r\n          {isLast ? 'Finish' : 'Continue'}\r\n        </Button>\r\n        {!isFirst && (\r\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\r\n            Back\r\n          </Button>\r\n        )}\r\n      </ButtonGroup>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Stepper\r\n      activeStep={activeStep}\r\n      orientation=\"vertical\"\r\n      steps={[\r\n        {\r\n          stepLabel: {\r\n            children: 'Enter URL',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                <TextField sx={{ width: '100%' }} label=\"URL\" variant=\"standard\" value={layerURL} onChange={handleInput} />\r\n                <br />\r\n                <NavButtons isFirst handleNext={handleStep1} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          stepLabel: {\r\n            children: 'Select format',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"service-type-label\"\r\n                  value={layerType}\r\n                  onChange={handleSelectType}\r\n                  label=\"Service Type\"\r\n                  inputLabel={{\r\n                    id: 'service-type-label',\r\n                  }}\r\n                  menuItems={layerOptions.map(([value, label]) => ({\r\n                    key: value,\r\n                    item: {\r\n                      value,\r\n                      children: label,\r\n                    },\r\n                  }))}\r\n                />\r\n                <NavButtons handleNext={handleStep2} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        {\r\n          stepLabel: {\r\n            children: 'Configure layer',\r\n          },\r\n          stepContent: {\r\n            children: (\r\n              <>\r\n                {layerList.length === 0 && layerEntries.length === 0 && (\r\n                  <TextField label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\r\n                )}\r\n                {layerList.length === 0 && layerEntries.length > 0 && <Typography>{layerName}</Typography>}\r\n                {layerList.length > 1 && (\r\n                  <Autocomplete\r\n                    fullWidth\r\n                    multiple={isMultiple()}\r\n                    disableCloseOnSelect\r\n                    disableClearable={!isMultiple()}\r\n                    id=\"service-layer-label\"\r\n                    options={layerList}\r\n                    getOptionLabel={(option) => `${option[1]} (${option[0]})`}\r\n                    renderOption={(props, option) => <span {...props}>{option[1]}</span>}\r\n                    // value={\r\n                    //   layerType === ESRI_DYNAMIC\r\n                    //     ? layerEntries.map((entry) => {\r\n                    //         return (entry as TypeDynamicLayerEntry).index.toString();\r\n                    //       })\r\n                    //     : layerEntries.map((entry) => {\r\n                    //         return (entry as TypeOgcLayerEntry).id;\r\n                    //       })\r\n                    // }\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    onChange={handleSelectLayer as any}\r\n                    renderInput={(params) => <TextField {...params} label=\"Select Layer\" />}\r\n                  />\r\n                )}\r\n                <br />\r\n                <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\r\n              </>\r\n            ),\r\n          },\r\n        },\r\n        isMultiple()\r\n          ? {\r\n              stepLabel: {\r\n                children: 'Enter Name',\r\n              },\r\n              stepContent: {\r\n                children: (\r\n                  <>\r\n                    <TextField sx={{ width: '100%' }} label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\r\n                    <br />\r\n                    <NavButtons isLast handleNext={handleStepLast} />\r\n                  </>\r\n                ),\r\n              },\r\n            }\r\n          : null,\r\n      ]}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LayerStepper;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport {\r\n  TypeLayersPanelListProps,\r\n  TypeJsonValue,\r\n  TypeJsonArray,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  AbstractWebLayersClass,\r\n  TypeWindow,\r\n  webLayerIsWMS,\r\n  webLayerIsEsriDynamic,\r\n  webLayerIsEsriFeature,\r\n} from 'geoview-core';\r\n\r\ntype TypeLegend =\r\n  | TypeJsonValue[]\r\n  | {\r\n      name: string;\r\n      dataUrl: string[] | string | ArrayBuffer | null;\r\n    }[];\r\n\r\ntype TypeSubLayerVisibility = { [id: string]: number[] };\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that will list the map server layers defined in the map config\r\n * @param {TypeLayersPanelListProps} props properties passed to the component\r\n * @returns {JSX.Element} a React JSX Element containing map server layers\r\n */\r\nfunction LayersList(props: TypeLayersPanelListProps): JSX.Element {\r\n  const { mapId, layers, language } = props;\r\n\r\n  const { cgpv } = w;\r\n  const { ui, react, api, leaflet: L } = cgpv;\r\n  const { useState, useEffect } = react;\r\n\r\n  const [selectedLayer, setSelectedLayer] = useState<string>('');\r\n  const [layerLegend, setLayerLegend] = useState<{ [id: string]: TypeLegend }>({});\r\n  const [layerBounds, setLayerBounds] = useState<Record<string, L.LatLngBounds>>({});\r\n  const [layerBbox, setLayerBbox] = useState(L.polygon([]));\r\n  const [layerOpacity, setLayerOpacity] = useState<Record<string, number>>({});\r\n  const [layerVisibility, setLayerVisibility] = useState<Record<string, boolean>>({});\r\n  const [subLayerVisibility, setSubLayerVisibility] = useState<TypeSubLayerVisibility>({});\r\n\r\n  const { Button, Slider, Tooltip, Checkbox } = ui.elements;\r\n\r\n  const translations: TypeJsonObject = toJsonObject({\r\n    'en-CA': {\r\n      bounds: 'Toggle Bounds',\r\n      zoom: 'Zoom to Layer',\r\n      remove: 'Remove Layer',\r\n      opacity: 'Adjust Opacity',\r\n      visibility: 'Toggle Visibility',\r\n    },\r\n    'fr-CA': {\r\n      bounds: 'Basculer la limite',\r\n      zoom: 'Zoom sur la Couche',\r\n      remove: 'Supprimer la Couche',\r\n      opacity: \"Ajuster l'opacité\",\r\n      visibility: 'Basculer la Visibilité',\r\n    },\r\n  });\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    layersContainer: {\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n      width: '100%',\r\n    },\r\n    layerItem: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      margin: '5px 0',\r\n      padding: '10px 5px',\r\n      boxSizing: 'content-box',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n        backgroundColor: '#c9c9c9',\r\n      },\r\n      zIndex: 1000,\r\n      border: 'none',\r\n      width: '100%',\r\n    },\r\n    layerParentText: {\r\n      fontSize: '16px',\r\n      fontWeight: 'bold',\r\n    },\r\n    layerCountTextContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      width: '100%',\r\n      height: '32px',\r\n    },\r\n    layerItemText: {\r\n      fontSize: '14px',\r\n      whiteSpace: 'nowrap',\r\n      textOverflow: 'ellipsis',\r\n      overflow: 'hidden',\r\n      marginLeft: '10px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      gap: 6,\r\n    },\r\n    flexGroup: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-end',\r\n      alignItems: 'baseline',\r\n      gap: 12,\r\n    },\r\n    flexGroupButton: {\r\n      height: 38,\r\n      minHeight: 38,\r\n      width: 25,\r\n      minWidth: 25,\r\n      '& > div': {\r\n        textAlign: 'center',\r\n      },\r\n    },\r\n    slider: {\r\n      width: '100%',\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n    },\r\n    legendSubLayerGroup: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n  }));\r\n\r\n  /**\r\n   * Calls setLayerLegend for all layers\r\n   */\r\n  const setLayerLegendAll = () =>\r\n    Object.values(layers).forEach(async (layer) => {\r\n      if (webLayerIsWMS(layer)) {\r\n        const dataUrl = await layer.getLegendGraphic();\r\n        const name = layer.url.includes('/MapServer') ? layer.name : '';\r\n        const legend = [{ name, dataUrl }];\r\n        setLayerLegend((state) => ({ ...state, [layer.id]: legend }));\r\n      } else if (webLayerIsEsriDynamic(layer) || webLayerIsEsriFeature(layer)) {\r\n        const legend = await layer.getLegendJson();\r\n        const legendArray = Array.isArray(legend) ? legend : [legend];\r\n        setLayerLegend((state) => ({ ...state, [layer.id]: legendArray }));\r\n      }\r\n    });\r\n\r\n  /**\r\n   * Calls setLayerExtent for all layers\r\n   */\r\n  const setLayerBoundsAll = () =>\r\n    Object.values(layers).forEach(async (layer) => {\r\n      const bounds = await layer.getBounds();\r\n      setLayerBounds((state) => ({ ...state, [layer.id]: bounds }));\r\n    });\r\n\r\n  useEffect(() => {\r\n    const defaultLegends = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: [] }), {});\r\n    setLayerLegend((state) => ({ ...defaultLegends, ...state }));\r\n    setLayerLegendAll();\r\n\r\n    const defaultBounds = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: L.latLngBounds([]) }), {});\r\n    setLayerBounds((state) => ({ ...defaultBounds, ...state }));\r\n    setLayerBoundsAll();\r\n\r\n    const defaultSliders = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: 100 }), {});\r\n    setLayerOpacity((state) => ({ ...defaultSliders, ...state }));\r\n\r\n    const defaultVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: true }), {});\r\n    setLayerVisibility((state) => ({ ...defaultVisibility, ...state }));\r\n\r\n    const defaultSubVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: curr.entries }), {});\r\n    setSubLayerVisibility((state) => ({ ...defaultSubVisibility, ...state }));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [layers, L]);\r\n\r\n  const classes = useStyles();\r\n\r\n  /**\r\n   * Sets the currently selected layer,\r\n   * sets to blank if value is same as currently selecetd layer\r\n   *\r\n   * @param value layer button value\r\n   */\r\n  const onClick = (value: string) => {\r\n    const selected = value !== selectedLayer ? value : '';\r\n    setSelectedLayer(selected);\r\n  };\r\n\r\n  /**\r\n   * Removes selcted layer from map\r\n   *\r\n   * @param layer layer config\r\n   */\r\n  const onZoom = (layer: AbstractWebLayersClass) => api.map(mapId).fitBounds(layerBounds[layer.id]);\r\n\r\n  /**\r\n   * Returns polygon with segmented top and bottom to handle curved projection\r\n   *\r\n   * @param bounds layer bounds\r\n   * @param segment layer bounds\r\n   * @returns {L.Polygon} Polygon from bounds\r\n   */\r\n  const polygonFromBounds = (bounds: L.LatLngBounds, segments = 100): L.Polygon => {\r\n    const width = bounds.getEast() - bounds.getWest();\r\n    const latlngs = [];\r\n    latlngs.push(bounds.getSouthWest());\r\n    for (let i = 1; i <= segments; i += 1) {\r\n      const segmentWidth = width * (i / (segments + 1));\r\n      const lng = bounds.getWest() + segmentWidth;\r\n      latlngs.push({ lat: bounds.getSouth(), lng });\r\n    }\r\n    latlngs.push(bounds.getSouthEast());\r\n    latlngs.push(bounds.getNorthEast());\r\n    for (let i = 1; i <= segments; i += 1) {\r\n      const segmentWidth = width * (i / (segments + 1));\r\n      const lng = bounds.getEast() - segmentWidth;\r\n      latlngs.push({ lat: bounds.getNorth(), lng });\r\n    }\r\n    latlngs.push(bounds.getNorthWest());\r\n    return L.polygon(latlngs, { id: api.generateId(), color: 'red' });\r\n  };\r\n\r\n  /**\r\n   * Adds bounding box to map\r\n   *\r\n   * @param layer layer config\r\n   */\r\n  const onBounds = (layer: AbstractWebLayersClass) => {\r\n    const bbox = polygonFromBounds(layerBounds[layer.id]);\r\n    const newBbox = JSON.stringify(bbox.toGeoJSON());\r\n    const oldBbox = JSON.stringify(layerBbox.toGeoJSON());\r\n    if (newBbox === oldBbox) {\r\n      layerBbox.remove();\r\n      setLayerBbox(L.polygon([]));\r\n    } else {\r\n      layerBbox.remove();\r\n      bbox.addTo(api.map(mapId).map);\r\n      setLayerBbox(bbox);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes selcted layer from map, also removing bbox if active\r\n   *\r\n   * @param layer layer config\r\n   */\r\n  const onRemove = (layer: AbstractWebLayersClass) => {\r\n    const bbox = polygonFromBounds(layerBounds[layer.id]);\r\n    const newBbox = JSON.stringify(bbox.toGeoJSON());\r\n    const oldBbox = JSON.stringify(layerBbox.toGeoJSON());\r\n    if (newBbox === oldBbox) {\r\n      layerBbox.remove();\r\n      setLayerBbox(L.polygon([]));\r\n    }\r\n    api.map(mapId).layer.removeLayer(layer);\r\n  };\r\n\r\n  /**\r\n   * Adjusts layer opacity when slider is moved\r\n   *\r\n   * @param value slider opacity value (0-100)\r\n   * @param data Layer data\r\n   */\r\n  const onSliderChange = (value: number, data: AbstractWebLayersClass) => {\r\n    setLayerOpacity((state) => ({ ...state, [data.id]: value }));\r\n    const opacity = layerVisibility[data.id] ? value / 100 : 0;\r\n    data.setOpacity(opacity);\r\n  };\r\n\r\n  /**\r\n   * Adjusts layer visibility when checkbox is toggled\r\n   *\r\n   * @param value checkbox boolean\r\n   * @param data Layer data\r\n   */\r\n  const onVisibilityChange = (value: boolean, data: AbstractWebLayersClass) => {\r\n    setLayerVisibility((state) => ({ ...state, [data.id]: value }));\r\n    const opacity = value ? layerOpacity[data.id] / 100 : 0;\r\n    data.setOpacity(opacity);\r\n    if (value && data.setEntries) {\r\n      setSubLayerVisibility((state) => ({ ...state, [data.id]: data.entries as number[] }));\r\n      data.setEntries(data.entries as number[]);\r\n    }\r\n    if (!value && data.setEntries) {\r\n      setSubLayerVisibility((state) => ({ ...state, [data.id]: [] }));\r\n      data.setEntries([]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adjusts sublayer visibility when checkbox is toggled\r\n   *\r\n   * @param value checkbox boolean\r\n   * @param data Layer data\r\n   * @param id sublayer ID\r\n   */\r\n  const onSubVisibilityChange = (value: boolean, data: AbstractWebLayersClass, id: number) => {\r\n    const oldEntries = subLayerVisibility[data.id];\r\n    const entries = value ? [...new Set([...oldEntries, id])] : oldEntries.filter((x) => x !== id);\r\n    if (oldEntries.length === 0) {\r\n      setLayerVisibility((state) => ({ ...state, [data.id]: true }));\r\n      data.setOpacity(layerOpacity[data.id] / 100);\r\n    }\r\n    if (entries.length === 0) {\r\n      setLayerVisibility((state) => ({ ...state, [data.id]: false }));\r\n      data.setOpacity(0);\r\n    }\r\n    setSubLayerVisibility((state) => ({ ...state, [data.id]: entries }));\r\n    if (data.setEntries) data.setEntries(entries);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.layersContainer}>\r\n      {Object.values(layers).map((layer) => (\r\n        <div key={layer.id}>\r\n          <button type=\"button\" className={classes.layerItem} onClick={() => onClick(layer.id)}>\r\n            <div className={classes.layerCountTextContainer}>\r\n              <div className={classes.layerItemText} title={layer.name}>\r\n                {layer.name}\r\n              </div>\r\n            </div>\r\n          </button>\r\n          {selectedLayer === layer.id && (\r\n            <>\r\n              <div className={classes.flexGroup}>\r\n                <Button\r\n                  className={classes.flexGroupButton}\r\n                  tooltip={translations[language].zoom as string}\r\n                  tooltipPlacement=\"top\"\r\n                  variant=\"contained\"\r\n                  type=\"icon\"\r\n                  icon='<i class=\"material-icons\">zoom_in</i>'\r\n                  onClick={() => onZoom(layer)}\r\n                />\r\n                <Button\r\n                  className={classes.flexGroupButton}\r\n                  tooltip={translations[language].bounds as string}\r\n                  tooltipPlacement=\"top\"\r\n                  variant=\"contained\"\r\n                  type=\"icon\"\r\n                  icon='<i class=\"material-icons\">crop_free</i>'\r\n                  onClick={() => onBounds(layer)}\r\n                />\r\n                <Button\r\n                  className={classes.flexGroupButton}\r\n                  tooltip={translations[language].remove as string}\r\n                  tooltipPlacement=\"top\"\r\n                  variant=\"contained\"\r\n                  type=\"icon\"\r\n                  icon='<i class=\"material-icons\">remove</i>'\r\n                  onClick={() => onRemove(layer)}\r\n                />\r\n              </div>\r\n              <div className={classes.flexGroup}>\r\n                <Tooltip title={translations[language].opacity}>\r\n                  <i className=\"material-icons\">contrast</i>\r\n                </Tooltip>\r\n                <div className={classes.slider}>\r\n                  <Slider\r\n                    id={api.generateId()}\r\n                    min={0}\r\n                    max={100}\r\n                    size=\"small\"\r\n                    value={layerOpacity[layer.id]}\r\n                    valueLabelDisplay=\"auto\"\r\n                    onChange={(event, value) => onSliderChange(value as number, layer)}\r\n                  />\r\n                </div>\r\n                <Tooltip title={translations[language].visibility}>\r\n                  <Checkbox checked={layerVisibility[layer.id]} onChange={(e) => onVisibilityChange(e.target.checked, layer)} />\r\n                </Tooltip>\r\n              </div>\r\n              {(layerLegend[layer.id] as TypeJsonArray).map((subLayer, index: number) => (\r\n                <div key={index}>\r\n                  {subLayer!.legend && (\r\n                    <div className={classes.legendSubLayerGroup}>\r\n                      <div className={classes.layerItemText} title={subLayer.layerName as string}>\r\n                        {subLayer.layerName}\r\n                      </div>\r\n                      <Tooltip title={translations[language].visibility}>\r\n                        <Checkbox\r\n                          checked={subLayerVisibility[layer.id].includes(subLayer.layerId as number)}\r\n                          onChange={(e) => onSubVisibilityChange(e.target.checked, layer, subLayer.layerId as number)}\r\n                        />\r\n                      </Tooltip>\r\n                    </div>\r\n                  )}\r\n                  {(subLayer.drawingInfo?.renderer.type as string) === 'simple' && subLayer.drawingInfo?.renderer.symbol.imageData && (\r\n                    <div className={classes.layerItemText}>\r\n                      <img\r\n                        alt=\"Layer Legend\"\r\n                        src={`data:${subLayer.drawingInfo?.renderer.symbol.contentType};base64,${subLayer.drawingInfo?.renderer.symbol.imageData}`}\r\n                      />\r\n                      {subLayer.drawingInfo?.renderer.label || subLayer.name}\r\n                    </div>\r\n                  )}\r\n                  {subLayer.drawingInfo?.renderer.type === 'uniqueValue' &&\r\n                    subLayer.drawingInfo.renderer.uniqueValueInfos[0].symbol.imageData &&\r\n                    (subLayer.drawingInfo.renderer.uniqueValueInfos as TypeJsonArray).map((uniqueValue, i: number) => (\r\n                      <div key={i} className={classes.layerItemText}>\r\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.symbol.contentType};base64,${uniqueValue.symbol.imageData}`} />\r\n                        {uniqueValue.label}\r\n                      </div>\r\n                    ))}\r\n                  {subLayer.legend &&\r\n                    (subLayer.legend as TypeJsonArray).map((uniqueValue, i: number) => (\r\n                      <div key={i} className={classes.layerItemText}>\r\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.contentType};base64,${uniqueValue.imageData}`} />\r\n                        {uniqueValue.label || subLayer.layerName}\r\n                      </div>\r\n                    ))}\r\n                  {subLayer.dataUrl && (\r\n                    <div className={classes.layerItemText}>\r\n                      <img alt=\"Layer Legend\" src={subLayer.dataUrl as string} />\r\n                      {subLayer.name}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LayersList;\r\n","import { toJsonObject, TypePanelContentProps, TypeJsonObject, TypeWindow } from 'geoview-core';\r\n\r\nimport LayerStepper from './layer-stepper';\r\nimport LayersList from './layers-list';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * A react component that displays the details panel content\r\n *\r\n * @param {TypePanelContentProps} props the properties of the pane content\r\n * @returns {JSX.Element} A React JSX Element with the details panel\r\n */\r\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\r\n  const { mapId, buttonPanel } = props;\r\n\r\n  const { cgpv } = w;\r\n  const { api, react, ui } = cgpv;\r\n  const { useState, useEffect } = react;\r\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\r\n  const [mapLayers, setMapLayers] = useState({});\r\n  const { Button } = ui.elements;\r\n\r\n  const { language } = api.map(mapId);\r\n\r\n  const translations: TypeJsonObject = toJsonObject({\r\n    'en-CA': {\r\n      addLayer: 'Add Layer',\r\n    },\r\n    'fr-CA': {\r\n      addLayer: 'Ajouter Couche',\r\n    },\r\n  });\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    mainContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n    },\r\n    addLayerButton: {\r\n      width: 50,\r\n      minWidth: 50,\r\n      '& > div': {\r\n        textAlign: 'center',\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const onClick = () => setAddLayerVisible((state: boolean) => !state);\r\n\r\n  useEffect(() => {\r\n    setMapLayers(() => ({ ...api.map(mapId).layer.layers }));\r\n\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\r\n      () =>\r\n        setMapLayers(() => ({\r\n          ...api.map(mapId).layer.layers,\r\n        })),\r\n      mapId\r\n    );\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\r\n      () =>\r\n        setMapLayers(() => ({\r\n          ...api.map(mapId).layer.layers,\r\n        })),\r\n      mapId\r\n    );\r\n    api.event.on(\r\n      api.eventNames.PANEL.EVENT_PANEL_CLOSE,\r\n      () => {\r\n        setAddLayerVisible(false);\r\n      },\r\n      mapId,\r\n      buttonPanel.id\r\n    );\r\n\r\n    return () => {\r\n      api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\r\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\r\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, mapId, buttonPanel.id);\r\n    };\r\n  }, [api, buttonPanel.id, mapId]);\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.mainContainer}>\r\n        <Button\r\n          className={classes.addLayerButton}\r\n          tooltip={translations[language].addLayer as string}\r\n          tooltipPlacement=\"right\"\r\n          variant=\"contained\"\r\n          type=\"icon\"\r\n          icon='<i class=\"material-icons\">add</i>'\r\n          onClick={onClick}\r\n        />\r\n      </div>\r\n      {addLayerVisible && <LayerStepper mapId={mapId} setAddLayerVisible={setAddLayerVisible} />}\r\n      <div style={{ display: addLayerVisible ? 'none' : 'inherit' }}>\r\n        <LayersList mapId={mapId} layers={mapLayers} language={language} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PanelContent;\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  Cast,\r\n  AbstractPluginClass,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeWindow,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeButtonProps,\r\n  TypePanelProps,\r\n} from 'geoview-core';\r\n\r\nimport PanelContent from './panel-content';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass LayersPanelPlugin extends AbstractPluginClass {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(id: string, props: TypePluginOptions) {\r\n    super(id, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations: TypeJsonObject = toJsonObject({\r\n    'en-CA': {\r\n      layersPanel: 'Layers',\r\n    },\r\n    'fr-CA': {\r\n      layersPanel: 'Couches',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    const { language } = api.map(mapId);\r\n\r\n    // button props\r\n    const button: TypeButtonProps = {\r\n      id: 'layersPanelButton',\r\n      tooltip: this.translations[language].layersPanel as string,\r\n      tooltipPlacement: 'right',\r\n      icon: '<i class=\"material-icons\">layers</i>',\r\n      type: 'textWithIcon',\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[language].layersPanel,\r\n      icon: '<i class=\"material-icons\">layers</i>',\r\n      width: 200,\r\n    };\r\n\r\n    // create a new button panel on the appbar\r\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId} />);\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\r\n    }\r\n  }\r\n}\r\n\r\nexport default LayersPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['layers-panel'] = Cast<AbstractPluginClass>(LayersPanelPlugin);\r\n"],"names":["w","window","mapId","setAddLayerVisible","cgpv","api","react","ui","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","WMS","WFS","OGC_FEATURE","XYZ_TILES","useState","elements","Select","Stepper","TextField","Button","ButtonGroup","Typography","Autocomplete","activeStep","setActiveStep","layerURL","setLayerURL","layerType","setLayerType","layerList","setLayerList","layerName","setLayerName","layerEntries","setLayerEntries","classes","makeStyles","buttonGroup","paddingTop","gap","useStyles","isMultiple","layerOptions","esriOptions","type","err","capability","emitErrorEmpty","textField","event","emit","snackbarMessagePayload","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","value","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","map","projection","getCRS","code","geoUtilities","getWMSServiceMetadata","wms","Capability","Layer","CRS","includes","Error","layers","aLayer","Name","Title","length","id","wfsValidation","getWFSServiceMetadata","wfs","FeatureTypeList","FeatureType","aFeatureType","toJsonObject","split","ogcFeatureValidation","keys","fetch","response","json","every","key","Object","collections","title","esriValidation","getESRIServiceMetadata","esri","capabilities","name","index","xyzValidation","tiles","i","geoJSONValidation","handleStep2","valid","undefined","handleStepLast","url","entries","getMapServerUrl","layerConfig","generateId","en","fr","layer","addLayer","handleBack","prevActiveStep","handleNameLayer","target","NavButtons","isFirst","isLast","handleNext","className","variant","onClick","orientation","steps","stepLabel","children","stepContent","sx","width","label","onChange","trim","fullWidth","labelId","inputLabel","menuItems","item","multiple","disableCloseOnSelect","disableClearable","options","getOptionLabel","option","renderOption","props","newValue","x","parseInt","renderInput","params","language","L","leaflet","useEffect","selectedLayer","setSelectedLayer","layerLegend","setLayerLegend","layerBounds","setLayerBounds","polygon","layerBbox","setLayerBbox","layerOpacity","setLayerOpacity","layerVisibility","setLayerVisibility","subLayerVisibility","setSubLayerVisibility","Slider","Tooltip","Checkbox","translations","bounds","zoom","remove","opacity","visibility","layersContainer","overflow","overflowY","layerItem","display","alignItems","justifyContent","margin","padding","boxSizing","cursor","backgroundColor","zIndex","border","layerParentText","fontSize","fontWeight","layerCountTextContainer","height","layerItemText","whiteSpace","textOverflow","marginLeft","flexGroup","flexGroupButton","minHeight","minWidth","textAlign","slider","paddingLeft","paddingRight","legendSubLayerGroup","defaultLegends","values","reduce","prev","curr","state","forEach","webLayerIsWMS","getLegendGraphic","dataUrl","legend","webLayerIsEsriDynamic","webLayerIsEsriFeature","getLegendJson","legendArray","Array","isArray","defaultBounds","latLngBounds","getBounds","defaultSliders","defaultVisibility","defaultSubVisibility","polygonFromBounds","segments","getEast","getWest","latlngs","push","getSouthWest","segmentWidth","lng","lat","getSouth","getSouthEast","getNorthEast","getNorth","getNorthWest","color","tooltip","tooltipPlacement","icon","fitBounds","onZoom","bbox","JSON","stringify","toGeoJSON","addTo","onBounds","removeLayer","onRemove","min","max","size","valueLabelDisplay","data","setOpacity","onSliderChange","checked","e","setEntries","onVisibilityChange","subLayer","layerId","oldEntries","Set","filter","drawingInfo","renderer","symbol","imageData","alt","src","contentType","uniqueValueInfos","uniqueValue","buttonPanel","addLayerVisible","mapLayers","setMapLayers","mainContainer","flexDirection","addLayerButton","on","LAYER","EVENT_LAYER_ADDED","EVENT_REMOVE_LAYER","PANEL","EVENT_PANEL_CLOSE","off","style","LayersPanelPlugin","layersPanel","pluginProps","button","panel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}