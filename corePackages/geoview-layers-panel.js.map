{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/appbar-plugin.ts","webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/reorder-layers-list.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["import { TypeWindow, TypeButtonPanel, TypeIconButtonProps, TypePanelProps } from '@/core/types/cgpv-types';\nimport { AbstractPlugin } from './abstract-plugin';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  // Store the button props\n  buttonProps?: TypeIconButtonProps;\n\n  // Store the panel props\n  panelProps?: TypePanelProps;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypeIconButtonProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react!.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns JSX.Element The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react!.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    this.buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    this.panelProps = this.onCreateContentProps();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.map()?.appBarButtons.createAppbarPanel(this.buttonProps!, this.panelProps, null) || undefined;\n\n    // Create content\n    const content = this.onCreateContent();\n\n    // Set panel content\n    this.buttonPanel?.panel?.changeContent(content);\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.map()?.appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n","/* eslint-disable react/require-default-props */\nimport type React from 'react';\nimport {\n  TypeJsonArray,\n  TypeGeoviewLayerConfig,\n  TypeGeoviewLayerType,\n  SelectChangeEvent,\n  ButtonPropsLayerPanel,\n  TypeListOfLayerEntryConfig,\n  TypeLayerEntryConfig,\n  TypeJsonObject,\n  PayloadBaseClass,\n  payloadIsASnackbarMessage,\n} from 'geoview-core';\nimport { logger } from 'geoview-core/src/core/utils/logger';\n\ntype Event = { target: { value: string } };\n\ninterface Props {\n  mapId: string;\n  setAddLayerVisible: (isVisible: boolean) => void;\n}\n\ntype EsriOptions = {\n  err: string;\n  capability: string;\n};\n\n/**\n * A react component that displays the details panel content\n *\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\n  const { cgpv } = window;\n  const { api, ui, react } = cgpv;\n  const displayLanguage = api.maps[mapId].getDisplayLanguage() as 'en' | 'fr';\n\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, GEOPACKAGE, WMS, WFS, OGC_FEATURE, XYZ_TILES, GEOCORE } = api.layerTypes;\n  const { useState, useEffect, useRef } = react;\n  const {\n    Select,\n    Stepper,\n    TextField,\n    Button,\n    ButtonGroup,\n    Autocomplete,\n    CircularProgressBase,\n    Box,\n    IconButton,\n    CloseIcon,\n    FileUploadIcon,\n  } = ui.elements;\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [layerURL, setLayerURL] = useState('');\n  const [displayURL, setDisplayURL] = useState('');\n  const [layerType, setLayerType] = useState<TypeGeoviewLayerType | ''>('');\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\n  const [layerName, setLayerName] = useState('');\n  const [layerEntries, setLayerEntries] = useState<TypeListOfLayerEntryConfig>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [drag, setDrag] = useState<boolean>(false);\n\n  const dragPopover = useRef(null);\n\n  const sxClasses = {\n    buttonGroup: {\n      paddingTop: 12,\n      gap: 6,\n    },\n  };\n\n  const isMultiple = () => layerType === ESRI_DYNAMIC || layerType === WFS || layerType === WMS;\n\n  /**\n   * List of layer types and labels\n   */\n  const layerOptions = [\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\n    [ESRI_FEATURE, 'ESRI Feature Service'],\n    [GEOJSON, 'GeoJSON'],\n    [GEOPACKAGE, 'GeoPackage'],\n    [WMS, 'OGC Web Map Service (WMS)'],\n    [WFS, 'OGC Web Feature Service (WFS)'],\n    [OGC_FEATURE, 'OGC API Features'],\n    [XYZ_TILES, 'XYZ Raster Tiles'],\n    [GEOCORE, 'GeoCore'],\n  ];\n\n  /**\n   * Translations object to inject to the viewer translations\n   */\n  const translations = {\n    en: {\n      finish: 'Finish',\n      continue: 'Continue',\n      back: 'Back',\n      or: 'or',\n      dropzone: 'Drop Here',\n      upload: 'Choose a File',\n      drop: 'Drop the file to upload',\n      url: 'Enter URL or UUID',\n      layer: 'Layer',\n      stepOne: 'Upload a File or enter URL/UUID',\n      stepTwo: 'Select format',\n      stepThree: 'Configure layer',\n      stepFour: 'Enter Name',\n      service: 'Service Type',\n      name: 'Name',\n      layerSelect: 'Select Layer',\n      errorEmpty: 'cannot be empty',\n      errorNone: 'No file or source added',\n      errorFile: 'Only geoJSON and GeoPackage files can be used',\n      errorServer: 'source is not valid',\n      errorProj: 'does not support current map projection',\n      only: 'only',\n    },\n    fr: {\n      finish: 'Finir',\n      continue: 'Continuer',\n      back: 'Retour',\n      or: 'ou',\n      dropzone: 'Déposez ici',\n      upload: 'Choisir un fichier',\n      drop: 'Déposez le fichier à télécharger',\n      url: \"Entrer l'URL ou l'UUID\",\n      layer: 'Couche',\n      stepOne: \"Ajouter un fichier ou entrer l'URL/UUID\",\n      stepTwo: 'Sélectionnez le format',\n      stepThree: 'Configurer la couche',\n      stepFour: 'Entrez le nom',\n      service: 'Type de service',\n      name: 'Nom',\n      layerSelect: 'Sélectionner la couche',\n      errorEmpty: 'ne peut être vide',\n      errorNone: 'Pas de fichier ou de source ajouté',\n      errorFile: 'Seuls les fichiers geoJSON et GeoPackage peuvent être utilisés',\n      errorServer: \"source n'est pas valide\",\n      errorProj: 'ne prend pas en charge la projection cartographique actuelle',\n      only: 'seulement',\n    },\n  };\n\n  const snackbarEventOpenListenerFunction = (payload: PayloadBaseClass) => {\n    // Log\n    logger.logTraceCoreAPIEvent('LAYER-STEPPER - snackbarEventOpenListenerFunction', payload);\n\n    if (payloadIsASnackbarMessage(payload)) {\n      if (payload.message && payload.message.value === 'validation.layer.loadfailed') {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('LAYER-STEPPER - mount', mapId);\n\n    api.event.on(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, snackbarEventOpenListenerFunction, mapId);\n    return () => {\n      api.event.off(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, snackbarEventOpenListenerFunction);\n    };\n  }, [api.event, api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId]);\n\n  /**\n   * Returns the appropriate error config for ESRI layer types\n   *\n   * @param type one of esriDynamic or esriFeature\n   * @returns {EsriOptions} an error configuration object for populating dialogues\n   */\n  const esriOptions = (type: string): EsriOptions => {\n    switch (type) {\n      case ESRI_DYNAMIC:\n        return { err: 'ESRI Map', capability: 'Map' };\n      case ESRI_FEATURE:\n        return { err: 'ESRI Feature', capability: 'Query' };\n      default:\n        return { err: '', capability: '' };\n    }\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorEmpty = (textField: string) => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, `${textField} ${translations[displayLanguage].errorEmpty}`, false);\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorNone = () => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, translations[displayLanguage].errorNone, false);\n  };\n\n  /**\n   * Emits an error dialogue when unsupported files are uploaded\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorFile = () => {\n    api.utilities.showError(mapId, translations[displayLanguage].errorFile, false);\n  };\n\n  /**\n   * Emits an error when the URL does not support the selected service type\n   *\n   * @param serviceName type of service provided by the URL\n   */\n  const emitErrorServer = (serviceName: string) => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, `${serviceName} ${translations[displayLanguage].errorServer}`, false);\n  };\n\n  /**\n   * Emits an error when a service does not support the current map projection\n   *\n   * @param serviceName type of service provided by the URL\n   * @param proj current map projection\n   */\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\n    setIsLoading(false);\n    const message = `${serviceName} ${translations[displayLanguage].errorProj} ${proj}, ${\n      translations[displayLanguage].only\n    } ${supportedProj.join(', ')}`;\n    api.utilities.showError(mapId, message, false);\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WMS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wmsValidation = async (): Promise<boolean> => {\n    const proj = api.projection.projections[api.maps[mapId].getMapState().currentProjection].getCode();\n    let supportedProj: string[] = [];\n\n    try {\n      const [baseUrl, queryString] = layerURL.split('?');\n      const urlParams = new URLSearchParams(queryString);\n      const paramLayers = urlParams.get('layers')?.split(',') || [''];\n      // query layers are not sent, as not all services support asking for multiple layers\n      const wms = await api.geoUtilities.getWMSServiceMetadata(baseUrl, '');\n\n      supportedProj = wms.Capability.Layer.CRS as string[];\n      if (!supportedProj.includes(proj)) throw new Error('proj');\n\n      const layers: TypeJsonArray[] = [];\n\n      const hasChildLayers = (layer: TypeJsonObject) => {\n        if (layer.Layer && (layer.Layer as TypeJsonArray).length > 0) {\n          (layer.Layer as TypeJsonObject[]).forEach((childLayer: TypeJsonObject) => {\n            hasChildLayers(childLayer);\n          });\n        } else {\n          for (let i = 0; i < paramLayers.length; i++) {\n            if ((layer.Name as string) === paramLayers[i]) layers.push([layer.Name, layer.Title] as TypeJsonArray);\n          }\n        }\n      };\n\n      if (wms.Capability.Layer) {\n        hasChildLayers(wms.Capability.Layer);\n      }\n\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      if ((err as Error).message === 'proj') {\n        emitErrorProj('WMS', proj, supportedProj);\n      } else {\n        emitErrorServer('WMS');\n      }\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WFS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wfsValidation = async (): Promise<boolean> => {\n    try {\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\n        (aFeatureType.Name['#text'] as string).split(':')[1] as TypeJsonObject,\n        aFeatureType.Title['#text'],\n      ]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('WFS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid OGC API. You can either provide a single\n   * layer URL or the root OGC API where the user can select any number of layers in the collection\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const ogcFeatureValidation = async (): Promise<boolean> => {\n    const keysSingleLayer = ['id', 'title'];\n    const responseSingle = await fetch(`${layerURL}/?f=json`);\n    if (responseSingle.status !== 200) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    const jsonSingle = await responseSingle.json();\n    const isSingleLayerValid = keysSingleLayer.every((key) => Object.keys(jsonSingle).includes(key));\n    if (isSingleLayerValid) {\n      setLayerEntries([\n        {\n          layerId: jsonSingle.id,\n        },\n      ] as TypeListOfLayerEntryConfig);\n      setLayerName(jsonSingle.title);\n      return true;\n    }\n\n    try {\n      const keys = ['collections', 'links'];\n      const responseCollection = await fetch(`${layerURL}/collections?f=json`);\n      const jsonCollection = await responseCollection.json();\n      const isCollectionValid = keys.every((key) => Object.keys(jsonCollection).includes(key));\n      if (!isCollectionValid) throw new Error('err');\n      const layers = (jsonCollection.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid Geocore UUID.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geocoreValidation = (): boolean => {\n    try {\n      const isValid = layerURL.indexOf('/') === -1 && layerURL.replaceAll('-', '').length === 32;\n      if (!isValid) throw new Error('err');\n      setLayerName('');\n      setLayerEntries([\n        {\n          layerId: layerURL,\n        },\n      ] as TypeListOfLayerEntryConfig);\n    } catch (err) {\n      emitErrorServer('GeoCore UUID');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const esriValidation = async (type: string): Promise<boolean> => {\n    try {\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\n        if ('layers' in esri) {\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\n          if (layers.length === 1) {\n            setLayerName(layers[0][1] as string);\n            setLayerEntries([\n              {\n                layerId: layers[0][0] as string,\n              },\n            ] as TypeListOfLayerEntryConfig);\n          } else {\n            setLayerList(layers);\n          }\n        } else {\n          setLayerName(esri.name as string);\n          setLayerEntries([\n            {\n              layerId: esri.id as string,\n            },\n          ] as TypeListOfLayerEntryConfig);\n        }\n      } else {\n        throw new Error('err');\n      }\n    } catch (err) {\n      emitErrorServer(esriOptions(type).err);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\n   *\n   * @returns {boolean} True if layer passes validation\n   */\n  const xyzValidation = (): boolean => {\n    const tiles = ['{x}', '{y}', '{z}'];\n    for (let i = 0; i < tiles.length; i += 1) {\n      if (!layerURL.includes(tiles[i])) {\n        emitErrorServer('XYZ Tile');\n        return false;\n      }\n    }\n    const dataAccessPath = layerURL;\n    setLayerName('');\n    setLayerEntries([\n      {\n        layerId: layerURL,\n        source: {\n          dataAccessPath: {\n            en: dataAccessPath,\n            fr: dataAccessPath,\n          },\n        },\n      },\n    ] as TypeListOfLayerEntryConfig);\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoJSONValidation = async (): Promise<boolean> => {\n    try {\n      const response = await fetch(layerURL);\n      const json = await response.json();\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) {\n        throw new Error('err');\n      }\n      const layerId = layerURL.split('/').pop() as string;\n      const dataAccessPath = layerURL.replace(layerId, '');\n      if (!layerName) setLayerName(layerId);\n      setLayerEntries([\n        {\n          layerId,\n          source: {\n            dataAccessPath: {\n              en: dataAccessPath,\n              fr: dataAccessPath,\n            },\n          },\n        },\n      ] as TypeListOfLayerEntryConfig);\n    } catch (err) {\n      emitErrorServer('GeoJSON');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoPackage.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoPackageValidation = (): boolean => {\n    // TODO actual geopackage validation\n    const layerId = layerURL.split('/').pop() as string;\n    const dataAccessPath = layerURL.replace(layerId, '');\n    if (!layerName) setLayerName(layerId);\n    setLayerEntries([\n      {\n        layerId,\n        source: {\n          dataAccessPath: {\n            en: dataAccessPath,\n            fr: dataAccessPath,\n          },\n        },\n      },\n    ] as TypeListOfLayerEntryConfig);\n    return true;\n  };\n\n  /**\n   * Attempt to determine the layer type based on the URL format\n   */\n  const bestGuessLayerType = () => {\n    const layerTokens = displayURL.toUpperCase().split('/');\n    const layerId = parseInt(layerTokens[layerTokens.length - 1], 10);\n    if (displayURL.toUpperCase().endsWith('MAPSERVER') || displayURL.toUpperCase().endsWith('MAPSERVER/')) {\n      setLayerType(ESRI_DYNAMIC);\n    } else if (\n      displayURL.toUpperCase().indexOf('FEATURESERVER') !== -1 ||\n      (displayURL.toUpperCase().indexOf('MAPSERVER') !== -1 && !Number.isNaN(layerId))\n    ) {\n      setLayerType(ESRI_FEATURE);\n    } else if (layerTokens.indexOf('WFS') !== -1) {\n      setLayerType(WFS);\n    } else if (displayURL.toUpperCase().endsWith('.JSON') || displayURL.toUpperCase().endsWith('.GEOJSON')) {\n      setLayerType(GEOJSON);\n    } else if (displayURL.toUpperCase().endsWith('.GPKG')) {\n      setLayerType(GEOPACKAGE);\n    } else if (displayURL.toUpperCase().indexOf('{Z}/{X}/{Y}') !== -1 || displayURL.toUpperCase().indexOf('{Z}/{Y}/{X}') !== -1) {\n      setLayerType(XYZ_TILES);\n    } else if (displayURL.indexOf('/') === -1 && displayURL.replaceAll('-', '').length === 32) {\n      setLayerType(GEOCORE);\n    } else if (displayURL.toUpperCase().indexOf('WMS') !== -1) {\n      setLayerType(WMS);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep1 = () => {\n    let valid = true;\n    if (layerURL.trim() === '') {\n      valid = false;\n      emitErrorNone();\n    }\n    if (valid) {\n      bestGuessLayerType();\n      setActiveStep(1);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep2 = async () => {\n    setIsLoading(true);\n    let valid = true;\n    if (layerType === undefined) {\n      valid = false;\n      setIsLoading(false);\n      emitErrorEmpty(translations[displayLanguage].service);\n    } else if (layerType === WMS) valid = await wmsValidation();\n    else if (layerType === WFS) valid = await wfsValidation();\n    else if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\n    else if (layerType === GEOPACKAGE) valid = geoPackageValidation();\n    else if (layerType === GEOCORE) valid = geocoreValidation();\n    if (valid) {\n      setIsLoading(false);\n      setActiveStep(2);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStep3 = () => {\n    let valid = true;\n    if (layerEntries.length === 0) {\n      valid = false;\n      emitErrorEmpty(translations[displayLanguage].layer);\n    }\n    if (valid) setActiveStep(3);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStepLast = () => {\n    setIsLoading(true);\n    const geoviewLayerId = api.generateId();\n    api.event.on(\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\n      () => {\n        // Log\n        logger.logTraceCoreAPIEvent('LAYER-STEPPER - EVENT_LAYER_ADDED');\n\n        api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\n        setIsLoading(false);\n        setAddLayerVisible(false);\n      },\n      `${mapId}/${geoviewLayerId}`\n    );\n\n    let valid = true;\n    const name = layerName;\n    let url = layerURL;\n    if (layerType === ESRI_DYNAMIC || layerType === ESRI_FEATURE) {\n      url = api.geoUtilities.getMapServerUrl(layerURL);\n    }\n    if (layerType === WMS) {\n      [url] = layerURL.split('?');\n    }\n\n    if (layerName === '') {\n      valid = false;\n      emitErrorEmpty(isMultiple() ? translations[displayLanguage].layer : translations[displayLanguage].name);\n    }\n    const layerConfig: TypeGeoviewLayerConfig = {\n      geoviewLayerId,\n      geoviewLayerName: {\n        en: name,\n        fr: name,\n      },\n      geoviewLayerType: layerType as TypeGeoviewLayerType,\n      metadataAccessPath: {\n        en: url,\n        fr: url,\n      },\n      listOfLayerEntryConfig: layerEntries as TypeListOfLayerEntryConfig,\n    };\n\n    if (layerType === GEOJSON || layerType === XYZ_TILES || layerType === GEOPACKAGE) {\n      // TODO probably want an option to add metadata if geojson or geopackage\n      // need to clear our metadata path or it will give errors trying to find it\n      layerConfig.metadataAccessPath = {\n        en: '',\n        fr: '',\n      };\n    }\n    if (layerType === GEOCORE) {\n      delete layerConfig.metadataAccessPath;\n    }\n    if (layerType === OGC_FEATURE) {\n      // make sure the metadataAccessPath is the root OGC API URL\n      layerConfig.metadataAccessPath = {\n        en: api.geoUtilities.getOGCServerUrl(layerURL),\n        fr: api.geoUtilities.getOGCServerUrl(layerURL),\n      };\n    }\n    if (valid) {\n      // TODO issue #668 - geocore layers do not have same ID, it is impossible to use the added event\n      // workaround - close after 3 sec\n      if (layerType === GEOCORE) {\n        setTimeout(() => {\n          setIsLoading(false);\n          setAddLayerVisible(false);\n        }, 3000);\n      }\n\n      if (layerConfig.geoviewLayerId) {\n        api.maps[mapId].layer.layerOrder.push(layerConfig.geoviewLayerId);\n      } else if (layerConfig.listOfLayerEntryConfig !== undefined) {\n        layerConfig.listOfLayerEntryConfig.forEach((subLayer: TypeLayerEntryConfig) => {\n          if (subLayer.layerId) api.maps[mapId].layer.layerOrder.unshift(subLayer.layerId);\n        });\n      }\n\n      api.maps[mapId].layer.addGeoviewLayer(layerConfig);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Back' button in the Stepper UI\n   */\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  /**\n   * Set layer URL from file input\n   *\n   * @param {File} file uploaded file\n   */\n  const handleFile = (file: File) => {\n    const fileURL = URL.createObjectURL(file);\n    setDisplayURL(file.name);\n    setLayerURL(fileURL);\n    const fileName = file.name.split('.')[0];\n    setLayerType('');\n    setLayerList([]);\n    setLayerName(fileName);\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layer URL from form input\n   *\n   * @param e TextField event\n   */\n  const handleInput = (event: Event) => {\n    setDisplayURL(event.target.value.trim());\n    setLayerURL(event.target.value.trim());\n    setLayerType('');\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layerType from form input\n   *\n   * @param {SelectChangeEvent} event TextField event\n   */\n  const handleSelectType = (event: SelectChangeEvent<unknown>) => {\n    setLayerType(event.target.value as TypeGeoviewLayerType);\n    setLayerList([]);\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set the currently selected layer from a list\n   *\n   * @param event Select event\n   * @param newValue value/label pairs of select options\n   */\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\n    if (isMultiple()) {\n      setLayerEntries(\n        newValue.map((x: string) => {\n          return { layerId: `${x[0]}` };\n        }) as TypeListOfLayerEntryConfig\n      );\n      setLayerName(newValue.map((x) => x[1]).join(', '));\n    } else {\n      setLayerEntries([{ layerId: `${newValue[0]}` }] as TypeListOfLayerEntryConfig);\n      setLayerName(newValue[1]);\n    }\n  };\n\n  /**\n   * Set the layer name from form input\n   *\n   * @param e TextField event\n   */\n  const handleNameLayer = (event: Event) => {\n    setLayerName(event.target.value);\n  };\n\n  /**\n   * Handle file dragged into dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragEnter = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (event.target !== dragPopover.current) {\n      setDrag(true);\n    }\n  };\n\n  /**\n   * Handle file dragged out of dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (event.target === dragPopover.current) setDrag(false);\n  };\n\n  /**\n   * Prevent default behaviour when file dragged over dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  /**\n   * Handle file drop\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setDrag(false);\n    if (event.dataTransfer?.files) {\n      const file = event.dataTransfer.files[0];\n      const upFilename = file.name.toUpperCase();\n      if (upFilename.endsWith('.JSON') || upFilename.endsWith('.GEOJSON') || upFilename.endsWith('.GPKG') || upFilename.endsWith('.CSV')) {\n        handleFile(file);\n      } else {\n        emitErrorFile();\n      }\n    }\n  };\n\n  /**\n   * Creates a set of Continue / Back buttons\n   *\n   * @param param0 specify if button is first or last in the list\n   * @returns {JSX.Element} React component\n   */\n  // TODO: refactor - see if we can get rid of the unstable nested component\n  // eslint-disable-next-line react/no-unstable-nested-components\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonPropsLayerPanel): JSX.Element {\n    return isLoading ? (\n      <Box sx={{ padding: 10 }}>\n        <CircularProgressBase />\n      </Box>\n    ) : (\n      <ButtonGroup sx={sxClasses.buttonGroup}>\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\n          {isLast ? translations[displayLanguage].finish : translations[displayLanguage].continue}\n        </Button>\n        {!isFirst && (\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\n            {translations[displayLanguage].back}\n          </Button>\n        )}\n      </ButtonGroup>\n    );\n  }\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', justifyContent: 'end', zIndex: 2 }}>\n        <IconButton color=\"primary\" onClick={() => setAddLayerVisible(false)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      <Stepper\n        sx={{ position: 'relative', top: '-30px', zIndex: 1 }}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n        steps={[\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepOne,\n            },\n            stepContent: {\n              children: (\n                <div\n                  className=\"dropzone\"\n                  style={{ position: 'relative' }}\n                  onDrop={(e) => handleDrop(e)}\n                  onDragOver={(e) => handleDragOver(e)}\n                  onDragEnter={(e) => handleDragEnter(e)}\n                  onDragLeave={(e) => handleDragLeave(e)}\n                >\n                  {drag && (\n                    <div\n                      ref={dragPopover}\n                      style={{\n                        backgroundColor: 'rgba(128,128,128,.95)',\n                        position: 'absolute',\n                        top: 0,\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        zIndex: 9999,\n                        textAlign: 'center',\n                        color: 'black',\n                        fontSize: 24,\n                      }}\n                    >\n                      <h3>\n                        <br />\n                        <br />\n                        {translations[displayLanguage].dropzone}\n                      </h3>\n                    </div>\n                  )}\n                  <div>\n                    <input\n                      type=\"file\"\n                      id=\"fileUpload\"\n                      style={{ display: 'none' }}\n                      onChange={(e) => {\n                        if (e.target.files) handleFile(e.target.files[0]);\n                      }}\n                      accept=\".gpkg, .json, .geojson, .csv\"\n                    />\n                  </div>\n                  <Button type=\"text\" onClick={() => document.getElementById('fileUpload')?.click()} className=\"\">\n                    <FileUploadIcon />\n                    <span>{translations[displayLanguage].upload}</span>\n                  </Button>\n                  <p style={{ textAlign: 'center' }}>\n                    <small>{translations[displayLanguage].drop}</small>\n                  </p>\n                  <p style={{ textAlign: 'center' }}>{translations[displayLanguage].or}</p>\n                  <TextField\n                    sx={{ width: '100%' }}\n                    label={translations[displayLanguage].url}\n                    variant=\"standard\"\n                    value={displayURL}\n                    onChange={handleInput}\n                    multiline\n                  />\n                  <br />\n                  <NavButtons isFirst handleNext={handleStep1} />\n                </div>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepTwo,\n            },\n            stepContent: {\n              children: (\n                <>\n                  <Select\n                    fullWidth\n                    labelId=\"service-type-label\"\n                    value={layerType}\n                    onChange={handleSelectType}\n                    label={translations[displayLanguage].service}\n                    inputLabel={{\n                      id: 'service-type-label',\n                    }}\n                    menuItems={layerOptions.map(([value, label]) => ({\n                      key: value,\n                      item: {\n                        value,\n                        children: label,\n                      },\n                    }))}\n                  />\n                  <NavButtons handleNext={handleStep2} />\n                </>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepThree,\n            },\n            stepContent: {\n              children: (\n                <>\n                  {layerList.length === 0 && (\n                    <TextField label={translations[displayLanguage].name} variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                  )}\n                  {layerList.length > 1 && (\n                    <Autocomplete\n                      fullWidth\n                      multiple={isMultiple()}\n                      disableClearable={!isMultiple()}\n                      id=\"service-layer-label\"\n                      options={layerList}\n                      getOptionLabel={(option) => `${option[1]} (${option[0]})`}\n                      renderOption={(props, option) => <span {...props}>{option[1] as string}</span>}\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                      onChange={handleSelectLayer as any}\n                      renderInput={(params) => <TextField {...params} label={translations[displayLanguage].layerSelect} />}\n                    />\n                  )}\n                  <br />\n                  <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\n                </>\n              ),\n            },\n          },\n          isMultiple()\n            ? {\n                stepLabel: {\n                  children: translations[displayLanguage].stepFour,\n                },\n                stepContent: {\n                  children: (\n                    <>\n                      <TextField\n                        sx={{ width: '100%' }}\n                        label={translations[displayLanguage].name}\n                        variant=\"standard\"\n                        value={layerName}\n                        onChange={handleNameLayer}\n                      />\n                      <br />\n                      <NavButtons isLast handleNext={handleStepLast} />\n                    </>\n                  ),\n                },\n              }\n            : null,\n        ]}\n      />\n    </>\n  );\n}\n\nexport default LayerStepper;\n","/* eslint-disable react/require-default-props */\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\n\ninterface Props {\n  mapId: string;\n  title: string;\n  layerIds: string[];\n  setReorderLayersVisible: (isVisible: boolean) => void;\n  setMapLayers: (reorderedLayerIds: string[]) => void;\n}\n\n/**\n * A react component that displays the reorderable layers list\n *\n * @returns {JSX.Element} A React JSX Element with the reorderable layers list\n */\nfunction ReorderLayersList({ mapId, title, layerIds, setReorderLayersVisible, setMapLayers }: Props): JSX.Element {\n  const { cgpv } = window;\n  const { api, ui } = cgpv;\n\n  const { List, ListItem, ListItemButton, ListItemIcon, HandleIcon, ListItemText, Box, IconButton, CloseIcon } = ui.elements;\n\n  const { displayLanguage } = api.maps[mapId!];\n\n  const sxClasses = {\n    titleBar: {\n      position: 'relative',\n      top: '-30px',\n      zIndex: 1,\n    },\n    draggableList: {\n      top: '-30px',\n    },\n    regularListItem: {\n      color: 'text.primary',\n      padding: 0,\n    },\n    draggingListItem: {\n      color: 'text.primary',\n      padding: 0,\n      background: 'rgb(235,235,235,0.5)',\n    },\n    listItemText: {\n      fontSize: 14,\n      noWrap: true,\n    },\n    handleIcon: {\n      margin: '8px 0px',\n    },\n  };\n\n  const onDragEnd = ({ destination, source }: DropResult) => {\n    if (!destination) return; // dropped outside the list\n    const reorderedLayerIds = [...layerIds];\n    const [removed] = reorderedLayerIds.splice(source.index, 1);\n    reorderedLayerIds.splice(destination.index, 0, removed);\n    api.maps[mapId].layer.moveLayer(removed, destination.index);\n    setMapLayers(reorderedLayerIds);\n  };\n\n  const getLayerName = (layerId: string) => {\n    return api.maps[mapId].layer.geoviewLayers[layerId].geoviewLayerName[displayLanguage];\n  };\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', justifyContent: 'end', zIndex: 2 }}>\n        <IconButton className=\"style3\" onClick={() => setReorderLayersVisible(false)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      <Box sx={sxClasses.titleBar}>{title}</Box>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided) => (\n            <List sx={sxClasses.draggableList} {...provided.droppableProps} innerref={provided.innerRef}>\n              {layerIds.map((layerId, index) => (\n                <Draggable key={layerId} draggableId={layerId} index={index}>\n                  {(providedDrag, snapshotDrag) => (\n                    <ListItem\n                      innerref={providedDrag.innerRef}\n                      sx={snapshotDrag.isDragging ? sxClasses.draggingListItem : sxClasses.regularListItem}\n                      {...providedDrag.draggableProps}\n                      {...providedDrag.dragHandleProps}\n                    >\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <HandleIcon sx={sxClasses.handleIcon} />\n                        </ListItemIcon>\n                        <ListItemText primaryTypographyProps={sxClasses.listItemText} primary={getLayerName(layerId)} />\n                      </ListItemButton>\n                    </ListItem>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </List>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default ReorderLayersList;\n","import type React from 'react';\nimport { toJsonObject, TypeJsonObject, TypeButtonPanel } from 'geoview-core';\nimport { logger } from 'geoview-core/src/core/utils/logger';\n\nimport LayerStepper from './layer-stepper';\nimport ReorderLayersList from './reorder-layers-list';\n\ntype TypePanelContentProps = {\n  buttonPanel: TypeButtonPanel;\n  mapId: string;\n};\n\n/**\n * A react component that displays the details panel content\n *\n * @param {TypePanelContentProps} props the properties of the pane content\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\n  const { mapId, buttonPanel } = props;\n\n  const { cgpv } = window;\n  const { api, ui, react } = cgpv;\n  const { useState, useEffect } = react;\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\n  const [reorderLayersVisible, setReorderLayersVisible] = useState(false);\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [legend, setLegend] = useState<React.DetailedReactHTMLElement<{}, HTMLElement> | null>();\n  const [actionMenuAnchorElement, setActionMenuAnchorElement] = useState<null | HTMLElement>(null);\n  const [isExpandAll, setExpandAll] = useState<boolean>(false);\n  const [isHideAll, setHideAll] = useState<boolean>(false);\n  const {\n    IconButton,\n    AddIcon,\n    Box,\n    ExpandMoreIcon,\n    ExpandLessIcon,\n    VisibilityIcon,\n    VisibilityOffIcon,\n    Menu,\n    MenuItem,\n    MenuIcon,\n    ListItemIcon,\n    ListItemText,\n    ReorderIcon,\n  } = ui.elements;\n\n  const displayLanguage = api.maps[mapId].getDisplayLanguage();\n\n  const translations: TypeJsonObject = toJsonObject({\n    en: {\n      addLayer: 'Add Layer',\n      expandAll: 'Expand Groups',\n      collapseAll: 'Collapse Groups',\n      showAll: 'Show All',\n      hideAll: 'Hide All',\n      reorderLayers: 'Reorder Layers',\n    },\n    fr: {\n      addLayer: 'Ajouter Couche',\n      expandAll: 'Élargir les groupes',\n      collapseAll: 'Réduire les groupes',\n      showAll: 'Montrer tout',\n      hideAll: 'Cacher tout',\n      reorderLayers: 'Réorganiser les couches',\n    },\n  });\n\n  const sxClasses = {\n    mainContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'inherit',\n    },\n    topControls: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    addLayerSection: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 'auto',\n      justifyContent: 'end',\n    },\n  };\n\n  const actionMenuOpen = Boolean(actionMenuAnchorElement);\n\n  const updateLayers = () => {\n    // Log\n    logger.logTraceCoreAPIEvent('PANEL-CONTENT - updateLayers');\n\n    if (api.maps[mapId].layer?.layerOrder !== undefined) setMapLayers([...api.maps[mapId].layer.layerOrder].reverse());\n  };\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('PANEL-CONTENT - mount 1');\n\n    api.event.on(api.eventNames.MAP.EVENT_MAP_LOADED, updateLayers, mapId);\n    api.event.on(api.eventNames.GET_LEGENDS.LEGEND_LAYERSET_UPDATED, updateLayers, `${mapId}/LegendsLayerSet`);\n\n    return () => {\n      api.event.off(api.eventNames.MAP.EVENT_MAP_LOADED, mapId, updateLayers);\n      api.event.off(api.eventNames.GET_LEGENDS.LEGEND_LAYERSET_UPDATED, mapId, updateLayers);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // setLegend(api.maps[mapId!].legend.createLegend({ layerIds: mapLayers, isRemoveable: true, canSetOpacity: true, canZoomTo: true }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapLayers]);\n\n  useEffect(() => {\n    // Log\n    logger.logTraceUseEffect('PANEL-CONTENT - mount 2');\n\n    const setAddLayerVisibleListenerFunction = () => {\n      // Log\n      logger.logTraceCoreAPIEvent('PANEL-CONTENT - setAddLayerVisibleListenerFunction');\n\n      setAddLayerVisible(false);\n    };\n\n    api.event.on(api.eventNames.PANEL.EVENT_PANEL_CLOSE, setAddLayerVisibleListenerFunction, `${mapId}/${buttonPanel.buttonPanelId}`);\n    return () => {\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, `${mapId}/${buttonPanel.buttonPanelId}`, setAddLayerVisibleListenerFunction);\n    };\n  }, [api, buttonPanel.buttonPanelId, mapId]);\n\n  // DEPRECATED, THIS PACKAGE WILL BE REMOVE SOON\n  // TODO: REMOVE\n  useEffect(() => {\n    // setLegend(\n    //   api.maps[mapId!].legend.createLegend({\n    //     layerIds: mapLayers,\n    //     isRemoveable: true,\n    //     canSetOpacity: true,\n    //     expandAll: isExpandAll,\n    //     canZoomTo: true,\n    //   })\n    // );\n    setLegend(null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isExpandAll]);\n\n  useEffect(() => {\n    // setLegend(\n    //   api.maps[mapId!].legend.createLegend({\n    //     layerIds: mapLayers,\n    //     isRemoveable: true,\n    //     canSetOpacity: true,\n    //     hideAll: isHideAll,\n    //     canZoomTo: true,\n    //   })\n    // );\n    setLegend(null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isHideAll]);\n\n  const handleShowAddLayer = () => {\n    setAddLayerVisible((state: boolean) => !state);\n  };\n\n  const handleExpandMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    setActionMenuAnchorElement(event.currentTarget);\n  };\n  const handleCloseMenu = () => {\n    setActionMenuAnchorElement(null);\n  };\n\n  const handleExpandAllClick = (isExpand: boolean) => {\n    setExpandAll(isExpand);\n    handleCloseMenu();\n  };\n\n  const handleShowAllClick = (isShow: boolean) => {\n    setHideAll(!isShow);\n    handleCloseMenu();\n  };\n\n  const handleReorderLayersClick = (isReorder: boolean) => {\n    setReorderLayersVisible(isReorder);\n    handleCloseMenu();\n  };\n\n  useEffect(() => {\n    // this will disable all scrolling when the user is trying to reorder layers\n    // TODO see issue #754 and atlassian/react-beautiful-dnd#460 - there may be a more elegant solution eventually if supported from the react-beautiful-dnd library\n    if (reorderLayersVisible) {\n      const x = window.scrollX;\n      const y = window.scrollY;\n      window.onscroll = () => {\n        window.scrollTo(x, y);\n      };\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      window.onscroll = () => {};\n    }\n  }, [reorderLayersVisible]);\n\n  return (\n    <>\n      <Menu anchorEl={actionMenuAnchorElement} open={actionMenuOpen} onClose={handleCloseMenu}>\n        <MenuItem onClick={() => handleExpandAllClick(true)}>\n          <ListItemIcon>\n            <ExpandMoreIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].expandAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleExpandAllClick(false)}>\n          <ListItemIcon>\n            <ExpandLessIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].collapseAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(true)}>\n          <ListItemIcon>\n            <VisibilityIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].showAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(false)}>\n          <ListItemIcon>\n            <VisibilityOffIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].hideAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleReorderLayersClick(true)}>\n          <ListItemIcon>\n            <ReorderIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].reorderLayers as string}</ListItemText>\n        </MenuItem>\n      </Menu>\n      <Box sx={sxClasses.mainContainer}>\n        {addLayerVisible && <LayerStepper mapId={mapId!} setAddLayerVisible={setAddLayerVisible} />}\n        {reorderLayersVisible && (\n          <ReorderLayersList\n            mapId={mapId!}\n            title={translations[displayLanguage].reorderLayers as string}\n            layerIds={mapLayers}\n            setMapLayers={setMapLayers}\n            setReorderLayersVisible={setReorderLayersVisible}\n          />\n        )}\n        <Box sx={sxClasses.topControls} style={{ display: addLayerVisible || reorderLayersVisible ? 'none' : 'flex' }}>\n          <div>\n            <IconButton color=\"primary\" onClick={handleExpandMenuClick}>\n              <MenuIcon />\n            </IconButton>\n          </div>\n          <Box onClick={handleShowAddLayer}>\n            {translations[displayLanguage].addLayer as string}\n            <IconButton>\n              <AddIcon />\n            </IconButton>\n          </Box>\n        </Box>\n        <div style={{ display: addLayerVisible || reorderLayersVisible ? 'none' : 'block' }}>{legend}</div>\n      </Box>\n    </>\n  );\n}\n\nexport default PanelContent;\n","import { Cast, toJsonObject, TypeJsonObject, TypeIconButtonProps, TypePanelProps, AnySchemaObject } from 'geoview-core';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\nimport { LayersOutlinedIcon } from 'geoview-core/src/ui';\nimport PanelContent from './panel-content';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-layers-panel.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass LayersPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations: TypeJsonObject = toJsonObject({\n    en: {\n      layersPanel: { title: 'Layers' },\n    },\n    fr: {\n      layersPanel: { title: 'Couches' },\n    },\n  });\n\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Button props\n    return {\n      id: 'layersPanelButton',\n      tooltip: 'layersPanel.title',\n      tooltipPlacement: 'right',\n      children: <LayersOutlinedIcon />,\n      visible: true,\n    };\n  }\n\n  onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: 'layersPanel.title',\n      icon: <LayersOutlinedIcon />,\n      width: 350,\n      status: this.configObj?.isOpen?.large as boolean,\n    };\n  }\n\n  onCreateContent(): JSX.Element {\n    return <PanelContent buttonPanel={this.buttonPanel} mapId={this.pluginProps.mapId} />;\n  }\n}\n\nexport default LayersPanelPlugin;\n\n// Keep a reference to the Layers Panel Plugin as part of the geoviewPlugins property stored in the window object\nwindow.geoviewPlugins = window.geoviewPlugins || {};\nwindow.geoviewPlugins['layers-panel'] = Cast<LayersPanelPlugin>(LayersPanelPlugin);\n"],"names":["AppBarPlugin","_AbstractPlugin","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_assertThisInitialized","_inherits","_createClass","key","value","MapIcon","window","cgpv","ui","elements","id","tooltip","tooltipPlacement","children","this","react","createElement","visible","_this$configObj","title","icon","width","status","configObj","isOpen","undefined","pluginProps","mapId","_this$map","_this$buttonPanel","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","buttonPanel","map","appBarButtons","createAppbarPanel","content","onCreateContent","panel","changeContent","_this$map2","api","removeAppbarPanel","buttonPanelId","AbstractPlugin","_ref","setAddLayerVisible","displayLanguage","maps","getDisplayLanguage","_api$layerTypes","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","GEOPACKAGE","WMS","WFS","OGC_FEATURE","XYZ_TILES","GEOCORE","useState","useEffect","useRef","_ui$elements","Select","Stepper","TextField","Button","ButtonGroup","Autocomplete","CircularProgressBase","Box","IconButton","CloseIcon","FileUploadIcon","_useState","_useState2","_slicedToArray","activeStep","setActiveStep","_useState3","_useState4","layerURL","setLayerURL","_useState5","_useState6","displayURL","setDisplayURL","_useState7","_useState8","layerType","setLayerType","_useState9","_useState10","layerList","setLayerList","_useState11","_useState12","layerName","setLayerName","_useState13","_useState14","layerEntries","setLayerEntries","_useState15","_useState16","isLoading","setIsLoading","_useState17","_useState18","drag","setDrag","dragPopover","sxClasses","buttonGroup","paddingTop","gap","isMultiple","layerOptions","translations","en","finish","continue","back","or","dropzone","upload","drop","url","layer","stepOne","stepTwo","stepThree","stepFour","service","name","layerSelect","errorEmpty","errorNone","errorFile","errorServer","errorProj","only","fr","snackbarEventOpenListenerFunction","payload","logger","logTraceCoreAPIEvent","payloadIsASnackbarMessage","message","logTraceUseEffect","event","on","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","off","esriOptions","type","err","capability","emitErrorEmpty","textField","utilities","showError","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_urlParams$get","_layerURL$split","_layerURL$split2","baseUrl","queryString","urlParams","paramLayers","wms","layers","hasChildLayers","_context","prev","next","projection","projections","getMapState","currentProjection","getCode","split","URLSearchParams","get","geoUtilities","getWMSServiceMetadata","sent","Capability","Layer","CRS","includes","Error","forEach","childLayer","i","Name","push","Title","layerId","t0","abrupt","stop","apply","wfsValidation","_ref3","_callee2","wfs","_layers","_context2","getWFSServiceMetadata","FeatureTypeList","FeatureType","aFeatureType","ogcFeatureValidation","_ref4","_callee3","keysSingleLayer","responseSingle","jsonSingle","keys","responseCollection","jsonCollection","_layers2","_context3","fetch","json","every","Object","collections","geocoreValidation","indexOf","replaceAll","esriValidation","_ref5","_callee4","esri","_layers3","_context4","getESRIServiceMetadata","capabilities","aLayer","_x","xyzValidation","tiles","dataAccessPath","source","geoJSONValidation","_ref6","_callee5","response","_context5","pop","replace","handleStep2","_ref7","_callee6","valid","_context6","handleStepLast","geoviewLayerId","generateId","LAYER","EVENT_LAYER_ADDED","getMapServerUrl","_layerURL$split3","layerConfig","geoviewLayerName","geoviewLayerType","metadataAccessPath","listOfLayerEntryConfig","getOGCServerUrl","setTimeout","layerOrder","subLayer","unshift","addGeoviewLayer","handleBack","prevActiveStep","handleFile","file","fileURL","URL","createObjectURL","fileName","handleNameLayer","target","handleDrop","_event$dataTransfer","preventDefault","stopPropagation","dataTransfer","files","upFilename","toUpperCase","endsWith","NavButtons","_ref8","_ref8$isFirst","isFirst","_ref8$isLast","isLast","handleNext","_jsx","sx","padding","_jsxs","variant","onClick","_Fragment","display","justifyContent","zIndex","color","position","top","orientation","steps","stepLabel","stepContent","className","style","onDrop","e","onDragOver","onDragEnter","current","onDragLeave","ref","backgroundColor","bottom","left","right","textAlign","fontSize","onChange","accept","_document$getElementB","document","getElementById","click","label","trim","multiline","layerTokens","parseInt","Number","isNaN","fullWidth","labelId","inputLabel","menuItems","_ref9","_ref10","item","multiple","disableClearable","options","getOptionLabel","option","renderOption","props","_objectSpread","newValue","x","renderInput","params","layerIds","setReorderLayersVisible","setMapLayers","List","ListItem","ListItemButton","ListItemIcon","HandleIcon","ListItemText","titleBar","draggableList","regularListItem","draggingListItem","background","listItemText","noWrap","handleIcon","margin","getLayerName","geoviewLayers","DragDropContext","onDragEnd","destination","reorderedLayerIds","_toConsumableArray","_reorderedLayerIds$sp","splice","index","removed","moveLayer","Droppable","droppableId","provided","droppableProps","innerref","innerRef","Draggable","draggableId","providedDrag","snapshotDrag","isDragging","draggableProps","dragHandleProps","primaryTypographyProps","primary","placeholder","addLayerVisible","reorderLayersVisible","mapLayers","legend","setLegend","actionMenuAnchorElement","setActionMenuAnchorElement","isExpandAll","setExpandAll","isHideAll","setHideAll","AddIcon","ExpandMoreIcon","ExpandLessIcon","VisibilityIcon","VisibilityOffIcon","Menu","MenuItem","MenuIcon","ReorderIcon","toJsonObject","addLayer","expandAll","collapseAll","showAll","hideAll","reorderLayers","mainContainer","flexDirection","height","topControls","addLayerSection","alignItems","marginTop","actionMenuOpen","Boolean","updateLayers","_api$maps$mapId$layer","reverse","MAP","EVENT_MAP_LOADED","GET_LEGENDS","LEGEND_LAYERSET_UPDATED","setAddLayerVisibleListenerFunction","PANEL","EVENT_PANEL_CLOSE","handleCloseMenu","handleExpandAllClick","isExpand","handleShowAllClick","isShow","scrollX","y","scrollY","onscroll","scrollTo","anchorEl","open","onClose","LayerStepper","ReorderLayersList","currentTarget","state","LayersPanelPlugin","_AppBarPlugin","schema","defaultConfig","layersPanel","LayersOutlinedIcon","large","PanelContent","geoviewPlugins","Cast"],"sourceRoot":""}