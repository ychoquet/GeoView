{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/reorder-layers-list.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport type React from 'react';\nimport {\n  TypeWindow,\n  TypeJsonArray,\n  TypeGeoviewLayerConfig,\n  TypeGeoviewLayerType,\n  SelectChangeEvent,\n  ButtonPropsLayerPanel,\n  TypeListOfLayerEntryConfig,\n  TypeLayerEntryConfig,\n  TypeJsonObject,\n  PayloadBaseClass,\n  payloadIsASnackbarMessage,\n} from 'geoview-core';\n\ntype Event = { target: { value: string } };\n\ninterface Props {\n  mapId: string;\n  setAddLayerVisible: (isVisible: boolean) => void;\n}\n\ntype EsriOptions = {\n  err: string;\n  capability: string;\n};\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, ui, react } = cgpv;\n  const displayLanguage = api.maps[mapId].getDisplayLanguage() as 'en' | 'fr';\n\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, GEOPACKAGE, WMS, WFS, OGC_FEATURE, XYZ_TILES, GEOCORE } = api.layerTypes;\n  const { useState, useEffect, useRef } = react;\n  const {\n    Select,\n    Stepper,\n    TextField,\n    Button,\n    ButtonGroup,\n    Autocomplete,\n    CircularProgressBase,\n    Box,\n    IconButton,\n    CloseIcon,\n    FileUploadIcon,\n  } = ui.elements;\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [layerURL, setLayerURL] = useState('');\n  const [displayURL, setDisplayURL] = useState('');\n  const [layerType, setLayerType] = useState<TypeGeoviewLayerType | ''>('');\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\n  const [layerName, setLayerName] = useState('');\n  const [layerEntries, setLayerEntries] = useState<TypeListOfLayerEntryConfig>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [drag, setDrag] = useState<boolean>(false);\n\n  const dragPopover = useRef(null);\n\n  const sxClasses = {\n    buttonGroup: {\n      paddingTop: 12,\n      gap: 6,\n    },\n  };\n\n  const isMultiple = () => layerType === ESRI_DYNAMIC || layerType === WFS || layerType === WMS;\n\n  /**\n   * List of layer types and labels\n   */\n  const layerOptions = [\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\n    [ESRI_FEATURE, 'ESRI Feature Service'],\n    [GEOJSON, 'GeoJSON'],\n    [GEOPACKAGE, 'GeoPackage'],\n    [WMS, 'OGC Web Map Service (WMS)'],\n    [WFS, 'OGC Web Feature Service (WFS)'],\n    [OGC_FEATURE, 'OGC API Features'],\n    [XYZ_TILES, 'XYZ Raster Tiles'],\n    [GEOCORE, 'GeoCore'],\n  ];\n\n  /**\n   * Translations object to inject to the viewer translations\n   */\n  const translations = {\n    en: {\n      finish: 'Finish',\n      continue: 'Continue',\n      back: 'Back',\n      or: 'or',\n      dropzone: 'Drop Here',\n      upload: 'Choose a File',\n      drop: 'Drop the file to upload',\n      url: 'Enter URL or UUID',\n      layer: 'Layer',\n      stepOne: 'Upload a File or enter URL/UUID',\n      stepTwo: 'Select format',\n      stepThree: 'Configure layer',\n      stepFour: 'Enter Name',\n      service: 'Service Type',\n      name: 'Name',\n      layerSelect: 'Select Layer',\n      errorEmpty: 'cannot be empty',\n      errorNone: 'No file or source added',\n      errorFile: 'Only geoJSON and GeoPackage files can be used',\n      errorServer: 'source is not valid',\n      errorProj: 'does not support current map projection',\n      only: 'only',\n    },\n    fr: {\n      finish: 'Finir',\n      continue: 'Continuer',\n      back: 'Retour',\n      or: 'ou',\n      dropzone: 'Déposez ici',\n      upload: 'Choisir un fichier',\n      drop: 'Déposez le fichier à télécharger',\n      url: \"Entrer l'URL ou l'UUID\",\n      layer: 'Couche',\n      stepOne: \"Ajouter un fichier ou entrer l'URL/UUID\",\n      stepTwo: 'Sélectionnez le format',\n      stepThree: 'Configurer la couche',\n      stepFour: 'Entrez le nom',\n      service: 'Type de service',\n      name: 'Nom',\n      layerSelect: 'Sélectionner la couche',\n      errorEmpty: 'ne peut être vide',\n      errorNone: 'Pas de fichier ou de source ajouté',\n      errorFile: 'Seuls les fichiers geoJSON et GeoPackage peuvent être utilisés',\n      errorServer: \"source n'est pas valide\",\n      errorProj: 'ne prend pas en charge la projection cartographique actuelle',\n      only: 'seulement',\n    },\n  };\n\n  const snackbarEventOpenListenerFunction = (payload: PayloadBaseClass) => {\n    if (payloadIsASnackbarMessage(payload)) {\n      if (payload.message && payload.message.value === 'validation.layer.loadfailed') {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    api.event.on(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, snackbarEventOpenListenerFunction, mapId);\n    return () => {\n      api.event.off(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, snackbarEventOpenListenerFunction);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Returns the appropriate error config for ESRI layer types\n   *\n   * @param type one of esriDynamic or esriFeature\n   * @returns {EsriOptions} an error configuration object for populating dialogues\n   */\n  const esriOptions = (type: string): EsriOptions => {\n    switch (type) {\n      case ESRI_DYNAMIC:\n        return { err: 'ESRI Map', capability: 'Map' };\n      case ESRI_FEATURE:\n        return { err: 'ESRI Feature', capability: 'Query' };\n      default:\n        return { err: '', capability: '' };\n    }\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorEmpty = (textField: string) => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, `${textField} ${translations[displayLanguage].errorEmpty}`, false);\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorNone = () => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, translations[displayLanguage].errorNone, false);\n  };\n\n  /**\n   * Emits an error dialogue when unsupported files are uploaded\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorFile = () => {\n    api.utilities.showError(mapId, translations[displayLanguage].errorFile, false);\n  };\n\n  /**\n   * Emits an error when the URL does not support the selected service type\n   *\n   * @param serviceName type of service provided by the URL\n   */\n  const emitErrorServer = (serviceName: string) => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, `${serviceName} ${translations[displayLanguage].errorServer}`, false);\n  };\n\n  /**\n   * Emits an error when a service does not support the current map projection\n   *\n   * @param serviceName type of service provided by the URL\n   * @param proj current map projection\n   */\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\n    setIsLoading(false);\n    const message = `${serviceName} ${translations[displayLanguage].errorProj} ${proj}, ${\n      translations[displayLanguage].only\n    } ${supportedProj.join(', ')}`;\n    api.utilities.showError(mapId, message, false);\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WMS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wmsValidation = async (): Promise<boolean> => {\n    const proj = api.projection.projections[api.maps[mapId].getMapState().currentProjection].getCode();\n    let supportedProj: string[] = [];\n\n    try {\n      const [baseUrl, queryString] = layerURL.split('?');\n      const urlParams = new URLSearchParams(queryString);\n      const paramLayers = urlParams.get('layers')?.split(',') || [''];\n      // query layers are not sent, as not all services support asking for multiple layers\n      const wms = await api.geoUtilities.getWMSServiceMetadata(baseUrl, '');\n\n      supportedProj = wms.Capability.Layer.CRS as string[];\n      if (!supportedProj.includes(proj)) throw new Error('proj');\n\n      const layers: TypeJsonArray[] = [];\n\n      const hasChildLayers = (layer: TypeJsonObject) => {\n        if (layer.Layer && (layer.Layer as TypeJsonArray).length > 0) {\n          (layer.Layer as TypeJsonObject[]).forEach((childLayer: TypeJsonObject) => {\n            hasChildLayers(childLayer);\n          });\n        } else {\n          for (let i = 0; i < paramLayers.length; i++) {\n            if ((layer.Name as string) === paramLayers[i]) layers.push([layer.Name, layer.Title] as TypeJsonArray);\n          }\n        }\n      };\n\n      if (wms.Capability.Layer) {\n        hasChildLayers(wms.Capability.Layer);\n      }\n\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      if ((err as Error).message === 'proj') {\n        emitErrorProj('WMS', proj, supportedProj);\n      } else {\n        emitErrorServer('WMS');\n      }\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WFS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wfsValidation = async (): Promise<boolean> => {\n    try {\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\n        (aFeatureType.Name['#text'] as string).split(':')[1] as TypeJsonObject,\n        aFeatureType.Title['#text'],\n      ]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('WFS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid OGC API. You can either provide a single\n   * layer URL or the root OGC API where the user can select any number of layers in the collection\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const ogcFeatureValidation = async (): Promise<boolean> => {\n    const keysSingleLayer = ['id', 'title'];\n    const responseSingle = await fetch(`${layerURL}/?f=json`);\n    if (responseSingle.status !== 200) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    const jsonSingle = await responseSingle.json();\n    const isSingleLayerValid = keysSingleLayer.every((key) => Object.keys(jsonSingle).includes(key));\n    if (isSingleLayerValid) {\n      setLayerEntries([\n        {\n          layerId: jsonSingle.id,\n        },\n      ] as TypeListOfLayerEntryConfig);\n      setLayerName(jsonSingle.title);\n      return true;\n    }\n\n    try {\n      const keys = ['collections', 'links'];\n      const responseCollection = await fetch(`${layerURL}/collections?f=json`);\n      const jsonCollection = await responseCollection.json();\n      const isCollectionValid = keys.every((key) => Object.keys(jsonCollection).includes(key));\n      if (!isCollectionValid) throw new Error('err');\n      const layers = (jsonCollection.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid Geocore UUID.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geocoreValidation = (): boolean => {\n    try {\n      const isValid = layerURL.indexOf('/') === -1 && layerURL.replaceAll('-', '').length === 32;\n      if (!isValid) throw new Error('err');\n      setLayerName('');\n      setLayerEntries([\n        {\n          layerId: layerURL,\n        },\n      ] as TypeListOfLayerEntryConfig);\n    } catch (err) {\n      emitErrorServer('GeoCore UUID');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const esriValidation = async (type: string): Promise<boolean> => {\n    try {\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\n        if ('layers' in esri) {\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\n          if (layers.length === 1) {\n            setLayerName(layers[0][1] as string);\n            setLayerEntries([\n              {\n                layerId: layers[0][0] as string,\n              },\n            ] as TypeListOfLayerEntryConfig);\n          } else {\n            setLayerList(layers);\n          }\n        } else {\n          setLayerName(esri.name as string);\n          setLayerEntries([\n            {\n              layerId: esri.id as string,\n            },\n          ] as TypeListOfLayerEntryConfig);\n        }\n      } else {\n        throw new Error('err');\n      }\n    } catch (err) {\n      emitErrorServer(esriOptions(type).err);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\n   *\n   * @returns {boolean} True if layer passes validation\n   */\n  const xyzValidation = (): boolean => {\n    const tiles = ['{x}', '{y}', '{z}'];\n    for (let i = 0; i < tiles.length; i += 1) {\n      if (!layerURL.includes(tiles[i])) {\n        emitErrorServer('XYZ Tile');\n        return false;\n      }\n    }\n    const dataAccessPath = layerURL;\n    setLayerName('');\n    setLayerEntries([\n      {\n        layerId: layerURL,\n        source: {\n          dataAccessPath: {\n            en: dataAccessPath,\n            fr: dataAccessPath,\n          },\n        },\n      },\n    ] as TypeListOfLayerEntryConfig);\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoJSONValidation = async (): Promise<boolean> => {\n    try {\n      const response = await fetch(layerURL);\n      const json = await response.json();\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) {\n        throw new Error('err');\n      }\n      const layerId = layerURL.split('/').pop() as string;\n      const dataAccessPath = layerURL.replace(layerId, '');\n      if (!layerName) setLayerName(layerId);\n      setLayerEntries([\n        {\n          layerId,\n          source: {\n            dataAccessPath: {\n              en: dataAccessPath,\n              fr: dataAccessPath,\n            },\n          },\n        },\n      ] as TypeListOfLayerEntryConfig);\n    } catch (err) {\n      emitErrorServer('GeoJSON');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoPackage.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoPackageValidation = (): boolean => {\n    // TODO actual geopackage validation\n    const layerId = layerURL.split('/').pop() as string;\n    const dataAccessPath = layerURL.replace(layerId, '');\n    if (!layerName) setLayerName(layerId);\n    setLayerEntries([\n      {\n        layerId,\n        source: {\n          dataAccessPath: {\n            en: dataAccessPath,\n            fr: dataAccessPath,\n          },\n        },\n      },\n    ] as TypeListOfLayerEntryConfig);\n    return true;\n  };\n\n  /**\n   * Attempt to determine the layer type based on the URL format\n   */\n  const bestGuessLayerType = () => {\n    const layerTokens = displayURL.toUpperCase().split('/');\n    const layerId = parseInt(layerTokens[layerTokens.length - 1], 10);\n    if (displayURL.toUpperCase().endsWith('MAPSERVER') || displayURL.toUpperCase().endsWith('MAPSERVER/')) {\n      setLayerType(ESRI_DYNAMIC);\n    } else if (\n      displayURL.toUpperCase().indexOf('FEATURESERVER') !== -1 ||\n      (displayURL.toUpperCase().indexOf('MAPSERVER') !== -1 && !Number.isNaN(layerId))\n    ) {\n      setLayerType(ESRI_FEATURE);\n    } else if (layerTokens.indexOf('WFS') !== -1) {\n      setLayerType(WFS);\n    } else if (displayURL.toUpperCase().endsWith('.JSON') || displayURL.toUpperCase().endsWith('.GEOJSON')) {\n      setLayerType(GEOJSON);\n    } else if (displayURL.toUpperCase().endsWith('.GPKG')) {\n      setLayerType(GEOPACKAGE);\n    } else if (displayURL.toUpperCase().indexOf('{Z}/{X}/{Y}') !== -1 || displayURL.toUpperCase().indexOf('{Z}/{Y}/{X}') !== -1) {\n      setLayerType(XYZ_TILES);\n    } else if (displayURL.indexOf('/') === -1 && displayURL.replaceAll('-', '').length === 32) {\n      setLayerType(GEOCORE);\n    } else if (displayURL.toUpperCase().indexOf('WMS') !== -1) {\n      setLayerType(WMS);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep1 = () => {\n    let valid = true;\n    if (layerURL.trim() === '') {\n      valid = false;\n      emitErrorNone();\n    }\n    if (valid) {\n      bestGuessLayerType();\n      setActiveStep(1);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep2 = async () => {\n    setIsLoading(true);\n    let valid = true;\n    if (layerType === undefined) {\n      valid = false;\n      setIsLoading(false);\n      emitErrorEmpty(translations[displayLanguage].service);\n    } else if (layerType === WMS) valid = await wmsValidation();\n    else if (layerType === WFS) valid = await wfsValidation();\n    else if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\n    else if (layerType === GEOPACKAGE) valid = geoPackageValidation();\n    else if (layerType === GEOCORE) valid = geocoreValidation();\n    if (valid) {\n      setIsLoading(false);\n      setActiveStep(2);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStep3 = () => {\n    let valid = true;\n    if (layerEntries.length === 0) {\n      valid = false;\n      emitErrorEmpty(translations[displayLanguage].layer);\n    }\n    if (valid) setActiveStep(3);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStepLast = () => {\n    setIsLoading(true);\n    const geoviewLayerId = api.generateId();\n    api.event.on(\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\n      () => {\n        api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\n        setIsLoading(false);\n        setAddLayerVisible(false);\n      },\n      `${mapId}/${geoviewLayerId}`\n    );\n\n    let valid = true;\n    const name = layerName;\n    let url = layerURL;\n    if (layerType === ESRI_DYNAMIC || layerType === ESRI_FEATURE) {\n      url = api.geoUtilities.getMapServerUrl(layerURL);\n    }\n    if (layerType === WMS) {\n      [url] = layerURL.split('?');\n    }\n\n    if (layerName === '') {\n      valid = false;\n      emitErrorEmpty(isMultiple() ? translations[displayLanguage].layer : translations[displayLanguage].name);\n    }\n    const layerConfig: TypeGeoviewLayerConfig = {\n      geoviewLayerId,\n      geoviewLayerName: {\n        en: name,\n        fr: name,\n      },\n      geoviewLayerType: layerType as TypeGeoviewLayerType,\n      metadataAccessPath: {\n        en: url,\n        fr: url,\n      },\n      listOfLayerEntryConfig: layerEntries as TypeListOfLayerEntryConfig,\n    };\n\n    if (layerType === GEOJSON || layerType === XYZ_TILES || layerType === GEOPACKAGE) {\n      // TODO probably want an option to add metadata if geojson or geopackage\n      // need to clear our metadata path or it will give errors trying to find it\n      layerConfig.metadataAccessPath = {\n        en: '',\n        fr: '',\n      };\n    }\n    if (layerType === GEOCORE) {\n      delete layerConfig.metadataAccessPath;\n    }\n    if (layerType === OGC_FEATURE) {\n      // make sure the metadataAccessPath is the root OGC API URL\n      layerConfig.metadataAccessPath = {\n        en: api.geoUtilities.getOGCServerUrl(layerURL),\n        fr: api.geoUtilities.getOGCServerUrl(layerURL),\n      };\n    }\n    if (valid) {\n      // TODO issue #668 - geocore layers do not have same ID, it is impossible to use the added event\n      // workaround - close after 3 sec\n      if (layerType === GEOCORE) {\n        setTimeout(() => {\n          setIsLoading(false);\n          setAddLayerVisible(false);\n        }, 3000);\n      }\n\n      if (layerConfig.geoviewLayerId) {\n        api.maps[mapId].layer.layerOrder.push(layerConfig.geoviewLayerId);\n      } else if (layerConfig.listOfLayerEntryConfig !== undefined) {\n        layerConfig.listOfLayerEntryConfig.forEach((subLayer: TypeLayerEntryConfig) => {\n          if (subLayer.layerId) api.maps[mapId].layer.layerOrder.unshift(subLayer.layerId);\n        });\n      }\n\n      api.maps[mapId].layer.addGeoviewLayer(layerConfig);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Back' button in the Stepper UI\n   */\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  /**\n   * Set layer URL from file input\n   *\n   * @param {File} file uploaded file\n   */\n  const handleFile = (file: File) => {\n    const fileURL = URL.createObjectURL(file);\n    setDisplayURL(file.name);\n    setLayerURL(fileURL);\n    const fileName = file.name.split('.')[0];\n    setLayerType('');\n    setLayerList([]);\n    setLayerName(fileName);\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layer URL from form input\n   *\n   * @param e TextField event\n   */\n  const handleInput = (event: Event) => {\n    setDisplayURL(event.target.value.trim());\n    setLayerURL(event.target.value.trim());\n    setLayerType('');\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layerType from form input\n   *\n   * @param {SelectChangeEvent} event TextField event\n   */\n  const handleSelectType = (event: SelectChangeEvent<unknown>) => {\n    setLayerType(event.target.value as TypeGeoviewLayerType);\n    setLayerList([]);\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set the currently selected layer from a list\n   *\n   * @param event Select event\n   * @param newValue value/label pairs of select options\n   */\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\n    if (isMultiple()) {\n      setLayerEntries(\n        newValue.map((x: string) => {\n          return { layerId: `${x[0]}` };\n        }) as TypeListOfLayerEntryConfig\n      );\n      setLayerName(newValue.map((x) => x[1]).join(', '));\n    } else {\n      setLayerEntries([{ layerId: `${newValue[0]}` }] as TypeListOfLayerEntryConfig);\n      setLayerName(newValue[1]);\n    }\n  };\n\n  /**\n   * Set the layer name from form input\n   *\n   * @param e TextField event\n   */\n  const handleNameLayer = (event: Event) => {\n    setLayerName(event.target.value);\n  };\n\n  /**\n   * Handle file dragged into dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragEnter = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (event.target !== dragPopover.current) {\n      setDrag(true);\n    }\n  };\n\n  /**\n   * Handle file dragged out of dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (event.target === dragPopover.current) setDrag(false);\n  };\n\n  /**\n   * Prevent default behaviour when file dragged over dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  /**\n   * Handle file drop\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setDrag(false);\n    if (event.dataTransfer?.files) {\n      const file = event.dataTransfer.files[0];\n      const upFilename = file.name.toUpperCase();\n      if (upFilename.endsWith('.JSON') || upFilename.endsWith('.GEOJSON') || upFilename.endsWith('.GPKG')) {\n        handleFile(file);\n      } else {\n        emitErrorFile();\n      }\n    }\n  };\n\n  /**\n   * Creates a set of Continue / Back buttons\n   *\n   * @param param0 specify if button is first or last in the list\n   * @returns {JSX.Element} React component\n   */\n  // eslint-disable-next-line react/no-unstable-nested-components\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonPropsLayerPanel): JSX.Element {\n    return isLoading ? (\n      <Box sx={{ padding: 10 }}>\n        <CircularProgressBase />\n      </Box>\n    ) : (\n      <ButtonGroup sx={sxClasses.buttonGroup}>\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\n          {isLast ? translations[displayLanguage].finish : translations[displayLanguage].continue}\n        </Button>\n        {!isFirst && (\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\n            {translations[displayLanguage].back}\n          </Button>\n        )}\n      </ButtonGroup>\n    );\n  }\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', justifyContent: 'end', zIndex: 2 }}>\n        <IconButton color=\"primary\" onClick={() => setAddLayerVisible(false)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      <Stepper\n        sx={{ position: 'relative', top: '-30px', zIndex: 1 }}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n        steps={[\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepOne,\n            },\n            stepContent: {\n              children: (\n                <div\n                  className=\"dropzone\"\n                  style={{ position: 'relative' }}\n                  onDrop={(e) => handleDrop(e)}\n                  onDragOver={(e) => handleDragOver(e)}\n                  onDragEnter={(e) => handleDragEnter(e)}\n                  onDragLeave={(e) => handleDragLeave(e)}\n                >\n                  {drag && (\n                    <div\n                      ref={dragPopover}\n                      style={{\n                        backgroundColor: 'rgba(128,128,128,.95)',\n                        position: 'absolute',\n                        top: 0,\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        zIndex: 9999,\n                        textAlign: 'center',\n                        color: 'black',\n                        fontSize: 24,\n                      }}\n                    >\n                      <h3>\n                        <br />\n                        <br />\n                        {translations[displayLanguage].dropzone}\n                      </h3>\n                    </div>\n                  )}\n                  <div>\n                    <input\n                      type=\"file\"\n                      id=\"fileUpload\"\n                      style={{ display: 'none' }}\n                      onChange={(e) => {\n                        if (e.target.files) handleFile(e.target.files[0]);\n                      }}\n                      accept=\".gpkg, .json, .geojson\"\n                    />\n                  </div>\n                  <Button type=\"text\" onClick={() => document.getElementById('fileUpload')?.click()} className=\"\">\n                    <FileUploadIcon />\n                    <span>{translations[displayLanguage].upload}</span>\n                  </Button>\n                  <p style={{ textAlign: 'center' }}>\n                    <small>{translations[displayLanguage].drop}</small>\n                  </p>\n                  <p style={{ textAlign: 'center' }}>{translations[displayLanguage].or}</p>\n                  <TextField\n                    sx={{ width: '100%' }}\n                    label={translations[displayLanguage].url}\n                    variant=\"standard\"\n                    value={displayURL}\n                    onChange={handleInput}\n                    multiline\n                  />\n                  <br />\n                  <NavButtons isFirst handleNext={handleStep1} />\n                </div>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepTwo,\n            },\n            stepContent: {\n              children: (\n                <>\n                  <Select\n                    fullWidth\n                    labelId=\"service-type-label\"\n                    value={layerType}\n                    onChange={handleSelectType}\n                    label={translations[displayLanguage].service}\n                    inputLabel={{\n                      id: 'service-type-label',\n                    }}\n                    menuItems={layerOptions.map(([value, label]) => ({\n                      key: value,\n                      item: {\n                        value,\n                        children: label,\n                      },\n                    }))}\n                  />\n                  <NavButtons handleNext={handleStep2} />\n                </>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepThree,\n            },\n            stepContent: {\n              children: (\n                <>\n                  {layerList.length === 0 && (\n                    <TextField label={translations[displayLanguage].name} variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                  )}\n                  {layerList.length > 1 && (\n                    <Autocomplete\n                      fullWidth\n                      multiple={isMultiple()}\n                      disableClearable={!isMultiple()}\n                      id=\"service-layer-label\"\n                      options={layerList}\n                      getOptionLabel={(option) => `${option[1]} (${option[0]})`}\n                      renderOption={(props, option) => <span {...props}>{option[1] as string}</span>}\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                      onChange={handleSelectLayer as any}\n                      renderInput={(params) => <TextField {...params} label={translations[displayLanguage].layerSelect} />}\n                    />\n                  )}\n                  <br />\n                  <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\n                </>\n              ),\n            },\n          },\n          isMultiple()\n            ? {\n                stepLabel: {\n                  children: translations[displayLanguage].stepFour,\n                },\n                stepContent: {\n                  children: (\n                    <>\n                      <TextField\n                        sx={{ width: '100%' }}\n                        label={translations[displayLanguage].name}\n                        variant=\"standard\"\n                        value={layerName}\n                        onChange={handleNameLayer}\n                      />\n                      <br />\n                      <NavButtons isLast handleNext={handleStepLast} />\n                    </>\n                  ),\n                },\n              }\n            : null,\n        ]}\n      />\n    </>\n  );\n}\n\nexport default LayerStepper;\n","/* eslint-disable react/require-default-props */\nimport { TypeWindow } from 'geoview-core';\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\n\ninterface Props {\n  mapId: string;\n  title: string;\n  layerIds: string[];\n  setReorderLayersVisible: (isVisible: boolean) => void;\n  setMapLayers: (reorderedLayerIds: string[]) => void;\n}\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the reorderable layers list\n *\n * @returns {JSX.Element} A React JSX Element with the reorderable layers list\n */\nfunction ReorderLayersList({ mapId, title, layerIds, setReorderLayersVisible, setMapLayers }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, ui } = cgpv;\n\n  const { List, ListItem, ListItemButton, ListItemIcon, HandleIcon, ListItemText, Box, IconButton, CloseIcon } = ui.elements;\n\n  const { displayLanguage } = api.maps[mapId!];\n\n  const sxClasses = {\n    titleBar: {\n      position: 'relative',\n      top: '-30px',\n      zIndex: 1,\n    },\n    draggableList: {\n      top: '-30px',\n    },\n    regularListItem: {\n      color: 'text.primary',\n      padding: 0,\n    },\n    draggingListItem: {\n      color: 'text.primary',\n      padding: 0,\n      background: 'rgb(235,235,235,0.5)',\n    },\n    listItemText: {\n      fontSize: 14,\n      noWrap: true,\n    },\n    handleIcon: {\n      margin: '8px 0px',\n    },\n  };\n\n  const onDragEnd = ({ destination, source }: DropResult) => {\n    if (!destination) return; // dropped outside the list\n    const reorderedLayerIds = [...layerIds];\n    const [removed] = reorderedLayerIds.splice(source.index, 1);\n    reorderedLayerIds.splice(destination.index, 0, removed);\n    api.maps[mapId].layer.moveLayer(removed, destination.index);\n    setMapLayers(reorderedLayerIds);\n  };\n\n  const getLayerName = (layerId: string) => {\n    return api.maps[mapId].layer.geoviewLayers[layerId].geoviewLayerName[displayLanguage];\n  };\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', justifyContent: 'end', zIndex: 2 }}>\n        <IconButton color=\"primary\" onClick={() => setReorderLayersVisible(false)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      <Box sx={sxClasses.titleBar}>{title}</Box>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided) => (\n            <List sx={sxClasses.draggableList} {...provided.droppableProps} innerref={provided.innerRef}>\n              {layerIds.map((layerId, index) => (\n                <Draggable key={layerId} draggableId={layerId} index={index}>\n                  {(providedDrag, snapshotDrag) => (\n                    <ListItem\n                      innerref={providedDrag.innerRef}\n                      sx={snapshotDrag.isDragging ? sxClasses.draggingListItem : sxClasses.regularListItem}\n                      {...providedDrag.draggableProps}\n                      {...providedDrag.dragHandleProps}\n                    >\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <HandleIcon sx={sxClasses.handleIcon} />\n                        </ListItemIcon>\n                        <ListItemText primaryTypographyProps={sxClasses.listItemText} primary={getLayerName(layerId)} />\n                      </ListItemButton>\n                    </ListItem>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </List>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default ReorderLayersList;\n","import type React from 'react';\nimport { toJsonObject, TypeJsonObject, TypeWindow, TypeButtonPanel } from 'geoview-core';\n\nimport LayerStepper from './layer-stepper';\nimport ReorderLayersList from './reorder-layers-list';\n\ntype TypePanelContentProps = {\n  buttonPanel: TypeButtonPanel;\n  mapId: string;\n};\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @param {TypePanelContentProps} props the properties of the pane content\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\n  const { mapId, buttonPanel } = props;\n\n  const { cgpv } = w;\n  const { api, ui, react } = cgpv;\n  const { useState, useEffect } = react;\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\n  const [reorderLayersVisible, setReorderLayersVisible] = useState(false);\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [legend, setLegend] = useState<React.DetailedReactHTMLElement<{}, HTMLElement>>();\n  const [actionMenuAnchorElement, setActionMenuAnchorElement] = useState<null | HTMLElement>(null);\n  const [isExpandAll, setExpandAll] = useState<boolean>(false);\n  const [isHideAll, setHideAll] = useState<boolean>(false);\n  const {\n    IconButton,\n    AddIcon,\n    Box,\n    ExpandMoreIcon,\n    ExpandLessIcon,\n    VisibilityIcon,\n    VisibilityOffIcon,\n    Menu,\n    MenuItem,\n    MenuIcon,\n    ListItemIcon,\n    ListItemText,\n    ReorderIcon,\n  } = ui.elements;\n\n  const displayLanguage = api.maps[mapId].getDisplayLanguage();\n\n  const translations: TypeJsonObject = toJsonObject({\n    en: {\n      addLayer: 'Add Layer',\n      expandAll: 'Expand Groups',\n      collapseAll: 'Collapse Groups',\n      showAll: 'Show All',\n      hideAll: 'Hide All',\n      reorderLayers: 'Reorder Layers',\n    },\n    fr: {\n      addLayer: 'Ajouter Couche',\n      expandAll: 'Élargir les groupes',\n      collapseAll: 'Réduire les groupes',\n      showAll: 'Montrer tout',\n      hideAll: 'Cacher tout',\n      reorderLayers: 'Réorganiser les couches',\n    },\n  });\n\n  const sxClasses = {\n    mainContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'inherit',\n    },\n    topControls: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    addLayerSection: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 'auto',\n      justifyContent: 'end',\n    },\n  };\n\n  const actionMenuOpen = Boolean(actionMenuAnchorElement);\n\n  const updateLayers = () => {\n    if (api.maps[mapId].layer?.layerOrder !== undefined) setMapLayers([...api.maps[mapId].layer.layerOrder].reverse());\n  };\n\n  useEffect(() => {\n    api.event.on(api.eventNames.MAP.EVENT_MAP_LOADED, updateLayers, mapId);\n    api.event.on(api.eventNames.GET_LEGENDS.LEGENDS_LAYERSET_UPDATED, updateLayers, `${mapId}/LegendsLayerSet`);\n\n    return () => {\n      api.event.off(api.eventNames.MAP.EVENT_MAP_LOADED, mapId, updateLayers);\n      api.event.off(api.eventNames.GET_LEGENDS.LEGENDS_LAYERSET_UPDATED, mapId, updateLayers);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLegend(api.maps[mapId!].legend.createLegend({ layerIds: mapLayers, isRemoveable: true, canSetOpacity: true, canZoomTo: true }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapLayers]);\n\n  useEffect(() => {\n    const setAddLayerVisibleListenerFunction = () => setAddLayerVisible(false);\n\n    api.event.on(api.eventNames.PANEL.EVENT_PANEL_CLOSE, setAddLayerVisibleListenerFunction, `${mapId}/${buttonPanel.buttonPanelId}`);\n    return () => {\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, `${mapId}/${buttonPanel.buttonPanelId}`, setAddLayerVisibleListenerFunction);\n    };\n  }, [api, buttonPanel.buttonPanelId, mapId]);\n\n  useEffect(() => {\n    setLegend(\n      api.maps[mapId!].legend.createLegend({\n        layerIds: mapLayers,\n        isRemoveable: true,\n        canSetOpacity: true,\n        expandAll: isExpandAll,\n        canZoomTo: true,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isExpandAll]);\n\n  useEffect(() => {\n    setLegend(\n      api.maps[mapId!].legend.createLegend({\n        layerIds: mapLayers,\n        isRemoveable: true,\n        canSetOpacity: true,\n        hideAll: isHideAll,\n        canZoomTo: true,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isHideAll]);\n\n  const handleShowAddLayer = () => {\n    setAddLayerVisible((state: boolean) => !state);\n  };\n\n  const handleExpandMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    setActionMenuAnchorElement(event.currentTarget);\n  };\n  const handleCloseMenu = () => {\n    setActionMenuAnchorElement(null);\n  };\n\n  const handleExpandAllClick = (isExpand: boolean) => {\n    setExpandAll(isExpand);\n    handleCloseMenu();\n  };\n\n  const handleShowAllClick = (isShow: boolean) => {\n    setHideAll(!isShow);\n    handleCloseMenu();\n  };\n\n  const handleReorderLayersClick = (isReorder: boolean) => {\n    setReorderLayersVisible(isReorder);\n    handleCloseMenu();\n  };\n\n  useEffect(() => {\n    // this will disable all scrolling when the user is trying to reorder layers\n    // TODO see issue #754 and atlassian/react-beautiful-dnd#460 - there may be a more elegant solution eventually if supported from the react-beautiful-dnd library\n    if (reorderLayersVisible) {\n      const x = w.scrollX;\n      const y = w.scrollY;\n      w.onscroll = () => {\n        w.scrollTo(x, y);\n      };\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      w.onscroll = () => {};\n    }\n  }, [reorderLayersVisible]);\n\n  return (\n    <>\n      <Menu anchorEl={actionMenuAnchorElement} open={actionMenuOpen} onClose={handleCloseMenu}>\n        <MenuItem onClick={() => handleExpandAllClick(true)}>\n          <ListItemIcon>\n            <ExpandMoreIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].expandAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleExpandAllClick(false)}>\n          <ListItemIcon>\n            <ExpandLessIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].collapseAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(true)}>\n          <ListItemIcon>\n            <VisibilityIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].showAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(false)}>\n          <ListItemIcon>\n            <VisibilityOffIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].hideAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleReorderLayersClick(true)}>\n          <ListItemIcon>\n            <ReorderIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].reorderLayers as string}</ListItemText>\n        </MenuItem>\n      </Menu>\n      <Box sx={sxClasses.mainContainer}>\n        {addLayerVisible && <LayerStepper mapId={mapId!} setAddLayerVisible={setAddLayerVisible} />}\n        {reorderLayersVisible && (\n          <ReorderLayersList\n            mapId={mapId!}\n            title={translations[displayLanguage].reorderLayers as string}\n            layerIds={mapLayers}\n            setMapLayers={setMapLayers}\n            setReorderLayersVisible={setReorderLayersVisible}\n          />\n        )}\n        <Box sx={sxClasses.topControls} style={{ display: addLayerVisible || reorderLayersVisible ? 'none' : 'flex' }}>\n          <div>\n            <IconButton color=\"primary\" onClick={handleExpandMenuClick}>\n              <MenuIcon />\n            </IconButton>\n          </div>\n          <Box onClick={handleShowAddLayer}>\n            {translations[displayLanguage].addLayer as string}\n            <IconButton>\n              <AddIcon />\n            </IconButton>\n          </Box>\n        </Box>\n        <div style={{ display: addLayerVisible || reorderLayersVisible ? 'none' : 'block' }}>{legend}</div>\n      </Box>\n    </>\n  );\n}\n\nexport default PanelContent;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  Cast,\n  AbstractPlugin,\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeIconButtonProps,\n  TypePanelProps,\n  AnySchemaObject,\n} from 'geoview-core';\nimport PanelContent from './panel-content';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-layers-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass LayersPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations: TypeJsonObject = toJsonObject({\n    en: {\n      layersPanel: 'Layers',\n    },\n    fr: {\n      layersPanel: 'Couches',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added(): void {\n    const { mapId } = (this as AbstractPlugin).pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { LayersOutlinedIcon } = ui.elements;\n    const displayLanguage = api.maps[mapId].getDisplayLanguage();\n\n    let panelStatus = false;\n\n    panelStatus = (this as AbstractPlugin).configObj?.isOpen?.large as boolean;\n\n    // button props\n    const button: TypeIconButtonProps = {\n      id: 'layersPanelButton',\n      tooltip: this.translations[displayLanguage].layersPanel as string,\n      tooltipPlacement: 'right',\n      children: <LayersOutlinedIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[displayLanguage].layersPanel,\n      icon: '<i class=\"material-icons\">layers</i>',\n      width: 350,\n      status: panelStatus,\n    };\n\n    // create a new button panel on the app-bar\n    this.buttonPanel = api.maps[mapId].appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId} />);\n  }\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = (this as AbstractPlugin).pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.maps[mapId].appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n\nexport default LayersPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['layers-panel'] = Cast<AbstractPlugin>(LayersPanelPlugin);\n"],"names":["w","window","_ref","mapId","setAddLayerVisible","cgpv","api","ui","react","displayLanguage","maps","getDisplayLanguage","_api$layerTypes","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","GEOPACKAGE","WMS","WFS","OGC_FEATURE","XYZ_TILES","GEOCORE","useState","useEffect","useRef","_ui$elements","elements","Select","Stepper","TextField","Button","ButtonGroup","Autocomplete","CircularProgressBase","Box","IconButton","CloseIcon","FileUploadIcon","_useState","_useState2","_slicedToArray","activeStep","setActiveStep","_useState3","_useState4","layerURL","setLayerURL","_useState5","_useState6","displayURL","setDisplayURL","_useState7","_useState8","layerType","setLayerType","_useState9","_useState10","layerList","setLayerList","_useState11","_useState12","layerName","setLayerName","_useState13","_useState14","layerEntries","setLayerEntries","_useState15","_useState16","isLoading","setIsLoading","_useState17","_useState18","drag","setDrag","dragPopover","sxClasses","buttonGroup","paddingTop","gap","isMultiple","layerOptions","translations","en","finish","continue","back","or","dropzone","upload","drop","url","layer","stepOne","stepTwo","stepThree","stepFour","service","name","layerSelect","errorEmpty","errorNone","errorFile","errorServer","errorProj","only","fr","snackbarEventOpenListenerFunction","payload","payloadIsASnackbarMessage","message","value","event","on","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","off","esriOptions","type","err","capability","emitErrorEmpty","textField","utilities","showError","concat","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_urlParams$get","_layerURL$split","_layerURL$split2","baseUrl","queryString","urlParams","paramLayers","wms","layers","hasChildLayers","_context","prev","next","projection","projections","getMapState","currentProjection","getCode","split","URLSearchParams","get","geoUtilities","getWMSServiceMetadata","sent","Capability","Layer","CRS","includes","Error","length","forEach","childLayer","i","Name","push","Title","layerId","t0","abrupt","stop","apply","arguments","wfsValidation","_ref3","_callee2","wfs","_layers","_context2","getWFSServiceMetadata","FeatureTypeList","FeatureType","map","aFeatureType","ogcFeatureValidation","_ref4","_callee3","keysSingleLayer","responseSingle","jsonSingle","keys","responseCollection","jsonCollection","_layers2","_context3","fetch","status","json","every","key","Object","id","title","collections","geocoreValidation","indexOf","replaceAll","esriValidation","_ref5","_callee4","esri","_layers3","_context4","getESRIServiceMetadata","capabilities","aLayer","_x","xyzValidation","tiles","dataAccessPath","source","geoJSONValidation","_ref6","_callee5","response","_context5","pop","replace","handleStep2","_ref7","_callee6","valid","_context6","undefined","handleStepLast","geoviewLayerId","generateId","LAYER","EVENT_LAYER_ADDED","getMapServerUrl","_layerURL$split3","layerConfig","geoviewLayerName","geoviewLayerType","metadataAccessPath","listOfLayerEntryConfig","getOGCServerUrl","setTimeout","layerOrder","subLayer","unshift","addGeoviewLayer","handleBack","prevActiveStep","handleFile","file","fileURL","URL","createObjectURL","fileName","handleNameLayer","target","handleDrop","_event$dataTransfer","preventDefault","stopPropagation","dataTransfer","files","upFilename","toUpperCase","endsWith","NavButtons","_ref8","_ref8$isFirst","isFirst","_ref8$isLast","isLast","handleNext","_jsx","sx","padding","children","_jsxs","variant","onClick","_Fragment","display","justifyContent","zIndex","color","position","top","orientation","steps","stepLabel","stepContent","className","style","onDrop","e","onDragOver","onDragEnter","current","onDragLeave","ref","backgroundColor","bottom","left","right","textAlign","fontSize","onChange","accept","_document$getElementB","document","getElementById","click","width","label","trim","multiline","layerTokens","parseInt","Number","isNaN","fullWidth","labelId","inputLabel","menuItems","_ref9","_ref10","item","multiple","disableClearable","options","getOptionLabel","option","renderOption","props","_objectSpread","newValue","x","renderInput","params","layerIds","setReorderLayersVisible","setMapLayers","List","ListItem","ListItemButton","ListItemIcon","HandleIcon","ListItemText","titleBar","draggableList","regularListItem","draggingListItem","background","listItemText","noWrap","handleIcon","margin","getLayerName","geoviewLayers","DragDropContext","onDragEnd","destination","reorderedLayerIds","_toConsumableArray","_reorderedLayerIds$sp","splice","index","removed","moveLayer","Droppable","droppableId","provided","droppableProps","innerref","innerRef","Draggable","draggableId","providedDrag","snapshotDrag","isDragging","draggableProps","dragHandleProps","primaryTypographyProps","primary","placeholder","buttonPanel","addLayerVisible","reorderLayersVisible","mapLayers","legend","setLegend","actionMenuAnchorElement","setActionMenuAnchorElement","isExpandAll","setExpandAll","isHideAll","setHideAll","AddIcon","ExpandMoreIcon","ExpandLessIcon","VisibilityIcon","VisibilityOffIcon","Menu","MenuItem","MenuIcon","ReorderIcon","toJsonObject","addLayer","expandAll","collapseAll","showAll","hideAll","reorderLayers","mainContainer","flexDirection","height","topControls","addLayerSection","alignItems","marginTop","actionMenuOpen","Boolean","updateLayers","_api$maps$mapId$layer","reverse","MAP","EVENT_MAP_LOADED","GET_LEGENDS","LEGENDS_LAYERSET_UPDATED","createLegend","isRemoveable","canSetOpacity","canZoomTo","setAddLayerVisibleListenerFunction","PANEL","EVENT_PANEL_CLOSE","buttonPanelId","handleCloseMenu","handleExpandAllClick","isExpand","handleShowAllClick","isShow","scrollX","y","scrollY","onscroll","scrollTo","anchorEl","open","onClose","LayerStepper","ReorderLayersList","currentTarget","state","LayersPanelPlugin","_AbstractPlugin","_inherits","_super","_createSuper","pluginId","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","schema","defaultConfig","layersPanel","_createClass","_configObj","_this$buttonPanel","panelStatus","this","pluginProps","LayersOutlinedIcon","configObj","isOpen","large","button","tooltip","tooltipPlacement","visible","panel","icon","appBarButtons","createAppbarPanel","changeContent","PanelContent","removeAppbarPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}