{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"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","sources":["webpack://geoview-core/./src/api/plugin/appbar-plugin.ts","webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/reorder-layers-list.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["import { TypeWindow, TypeButtonPanel, TypeIconButtonProps, TypePanelProps } from '@/core/types/cgpv-types';\nimport { AbstractPlugin } from './abstract-plugin';\n\n/** ******************************************************************************************************************************\n * AppBar Plugin abstract class.\n */\nexport abstract class AppBarPlugin extends AbstractPlugin {\n  // Store the created button panel object\n  buttonPanel?: TypeButtonPanel;\n\n  // Store the footer props\n  buttonProps?: TypeIconButtonProps;\n\n  // Store the panel props\n  panelProps?: TypePanelProps;\n\n  /**\n   * Overridable function to create app bar button props content\n   * @returns TypeIconButtonProps The app bar button props content\n   */\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Override this to create the button props..\n\n    // Fetch cgpv\n    const { cgpv } = window as TypeWindow;\n    const { MapIcon } = cgpv.ui.elements;\n\n    // Return dummy plugin button\n    return {\n      id: 'somePluginButton',\n      tooltip: 'Some tooltip',\n      tooltipPlacement: 'right',\n      children: this.react!.createElement(MapIcon),\n      visible: true,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar props content\n   * @returns TypePanelProps The app bar props content\n   */\n  onCreateContentProps(): TypePanelProps {\n    // Override this to create the panel props..\n\n    // Panel props\n    return {\n      title: 'Some title',\n      icon: '<i class=\"material-icons\">map</i>',\n      width: '80vw',\n      status: this.configObj?.isOpen as boolean,\n    };\n  }\n\n  /**\n   * Overridable function to create app bar actual content\n   * @returns JSX.Element The app bar actual content\n   */\n  onCreateContent(): JSX.Element {\n    // Override this to create panel..\n\n    // Return dummy content\n    return this.react!.createElement('div', undefined, `Content for AppBar Plugin on map id ${this.pluginProps.mapId} goes here...`);\n  }\n\n  /**\n   * Called when an app bar plugin is being added\n   */\n  onAdd(): void {\n    // Create button props\n    this.buttonProps = this.onCreateButtonProps();\n\n    // Create panel props\n    this.panelProps = this.onCreateContentProps();\n\n    // Create a new button panel on the app-bar\n    this.buttonPanel = this.map()?.appBarButtons.createAppbarPanel(this.buttonProps!, this.panelProps, null) || undefined;\n\n    // Create content\n    const content = this.onCreateContent();\n\n    // Set panel content\n    this.buttonPanel?.panel?.changeContent(content);\n  }\n\n  /**\n   * Called when an app bar plugin is being removed\n   */\n  onRemove(): void {\n    // If cgpv exists\n    if (this.api && this.buttonPanel) {\n      // Remove the app bar panel\n      this.map()?.appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\n    }\n  }\n}\n","/* eslint-disable react/require-default-props */\nimport type React from 'react';\nimport {\n  TypeJsonArray,\n  TypeGeoviewLayerConfig,\n  TypeGeoviewLayerType,\n  SelectChangeEvent,\n  ButtonPropsLayerPanel,\n  TypeListOfLayerEntryConfig,\n  TypeLayerEntryConfig,\n  TypeJsonObject,\n  PayloadBaseClass,\n  payloadIsASnackbarMessage,\n} from 'geoview-core';\n\ntype Event = { target: { value: string } };\n\ninterface Props {\n  mapId: string;\n  setAddLayerVisible: (isVisible: boolean) => void;\n}\n\ntype EsriOptions = {\n  err: string;\n  capability: string;\n};\n\n/**\n * A react component that displays the details panel content\n *\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\n  const { cgpv } = window;\n  const { api, ui, react } = cgpv;\n  const displayLanguage = api.maps[mapId].getDisplayLanguage() as 'en' | 'fr';\n\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, GEOPACKAGE, WMS, WFS, OGC_FEATURE, XYZ_TILES, GEOCORE } = api.layerTypes;\n  const { useState, useEffect, useRef } = react;\n  const {\n    Select,\n    Stepper,\n    TextField,\n    Button,\n    ButtonGroup,\n    Autocomplete,\n    CircularProgressBase,\n    Box,\n    IconButton,\n    CloseIcon,\n    FileUploadIcon,\n  } = ui.elements;\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [layerURL, setLayerURL] = useState('');\n  const [displayURL, setDisplayURL] = useState('');\n  const [layerType, setLayerType] = useState<TypeGeoviewLayerType | ''>('');\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\n  const [layerName, setLayerName] = useState('');\n  const [layerEntries, setLayerEntries] = useState<TypeListOfLayerEntryConfig>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [drag, setDrag] = useState<boolean>(false);\n\n  const dragPopover = useRef(null);\n\n  const sxClasses = {\n    buttonGroup: {\n      paddingTop: 12,\n      gap: 6,\n    },\n  };\n\n  const isMultiple = () => layerType === ESRI_DYNAMIC || layerType === WFS || layerType === WMS;\n\n  /**\n   * List of layer types and labels\n   */\n  const layerOptions = [\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\n    [ESRI_FEATURE, 'ESRI Feature Service'],\n    [GEOJSON, 'GeoJSON'],\n    [GEOPACKAGE, 'GeoPackage'],\n    [WMS, 'OGC Web Map Service (WMS)'],\n    [WFS, 'OGC Web Feature Service (WFS)'],\n    [OGC_FEATURE, 'OGC API Features'],\n    [XYZ_TILES, 'XYZ Raster Tiles'],\n    [GEOCORE, 'GeoCore'],\n  ];\n\n  /**\n   * Translations object to inject to the viewer translations\n   */\n  const translations = {\n    en: {\n      finish: 'Finish',\n      continue: 'Continue',\n      back: 'Back',\n      or: 'or',\n      dropzone: 'Drop Here',\n      upload: 'Choose a File',\n      drop: 'Drop the file to upload',\n      url: 'Enter URL or UUID',\n      layer: 'Layer',\n      stepOne: 'Upload a File or enter URL/UUID',\n      stepTwo: 'Select format',\n      stepThree: 'Configure layer',\n      stepFour: 'Enter Name',\n      service: 'Service Type',\n      name: 'Name',\n      layerSelect: 'Select Layer',\n      errorEmpty: 'cannot be empty',\n      errorNone: 'No file or source added',\n      errorFile: 'Only geoJSON and GeoPackage files can be used',\n      errorServer: 'source is not valid',\n      errorProj: 'does not support current map projection',\n      only: 'only',\n    },\n    fr: {\n      finish: 'Finir',\n      continue: 'Continuer',\n      back: 'Retour',\n      or: 'ou',\n      dropzone: 'Déposez ici',\n      upload: 'Choisir un fichier',\n      drop: 'Déposez le fichier à télécharger',\n      url: \"Entrer l'URL ou l'UUID\",\n      layer: 'Couche',\n      stepOne: \"Ajouter un fichier ou entrer l'URL/UUID\",\n      stepTwo: 'Sélectionnez le format',\n      stepThree: 'Configurer la couche',\n      stepFour: 'Entrez le nom',\n      service: 'Type de service',\n      name: 'Nom',\n      layerSelect: 'Sélectionner la couche',\n      errorEmpty: 'ne peut être vide',\n      errorNone: 'Pas de fichier ou de source ajouté',\n      errorFile: 'Seuls les fichiers geoJSON et GeoPackage peuvent être utilisés',\n      errorServer: \"source n'est pas valide\",\n      errorProj: 'ne prend pas en charge la projection cartographique actuelle',\n      only: 'seulement',\n    },\n  };\n\n  const snackbarEventOpenListenerFunction = (payload: PayloadBaseClass) => {\n    if (payloadIsASnackbarMessage(payload)) {\n      if (payload.message && payload.message.value === 'validation.layer.loadfailed') {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    api.event.on(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, snackbarEventOpenListenerFunction, mapId);\n    return () => {\n      api.event.off(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, snackbarEventOpenListenerFunction);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Returns the appropriate error config for ESRI layer types\n   *\n   * @param type one of esriDynamic or esriFeature\n   * @returns {EsriOptions} an error configuration object for populating dialogues\n   */\n  const esriOptions = (type: string): EsriOptions => {\n    switch (type) {\n      case ESRI_DYNAMIC:\n        return { err: 'ESRI Map', capability: 'Map' };\n      case ESRI_FEATURE:\n        return { err: 'ESRI Feature', capability: 'Query' };\n      default:\n        return { err: '', capability: '' };\n    }\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorEmpty = (textField: string) => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, `${textField} ${translations[displayLanguage].errorEmpty}`, false);\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorNone = () => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, translations[displayLanguage].errorNone, false);\n  };\n\n  /**\n   * Emits an error dialogue when unsupported files are uploaded\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorFile = () => {\n    api.utilities.showError(mapId, translations[displayLanguage].errorFile, false);\n  };\n\n  /**\n   * Emits an error when the URL does not support the selected service type\n   *\n   * @param serviceName type of service provided by the URL\n   */\n  const emitErrorServer = (serviceName: string) => {\n    setIsLoading(false);\n    api.utilities.showError(mapId, `${serviceName} ${translations[displayLanguage].errorServer}`, false);\n  };\n\n  /**\n   * Emits an error when a service does not support the current map projection\n   *\n   * @param serviceName type of service provided by the URL\n   * @param proj current map projection\n   */\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\n    setIsLoading(false);\n    const message = `${serviceName} ${translations[displayLanguage].errorProj} ${proj}, ${\n      translations[displayLanguage].only\n    } ${supportedProj.join(', ')}`;\n    api.utilities.showError(mapId, message, false);\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WMS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wmsValidation = async (): Promise<boolean> => {\n    const proj = api.projection.projections[api.maps[mapId].getMapState().currentProjection].getCode();\n    let supportedProj: string[] = [];\n\n    try {\n      const [baseUrl, queryString] = layerURL.split('?');\n      const urlParams = new URLSearchParams(queryString);\n      const paramLayers = urlParams.get('layers')?.split(',') || [''];\n      // query layers are not sent, as not all services support asking for multiple layers\n      const wms = await api.geoUtilities.getWMSServiceMetadata(baseUrl, '');\n\n      supportedProj = wms.Capability.Layer.CRS as string[];\n      if (!supportedProj.includes(proj)) throw new Error('proj');\n\n      const layers: TypeJsonArray[] = [];\n\n      const hasChildLayers = (layer: TypeJsonObject) => {\n        if (layer.Layer && (layer.Layer as TypeJsonArray).length > 0) {\n          (layer.Layer as TypeJsonObject[]).forEach((childLayer: TypeJsonObject) => {\n            hasChildLayers(childLayer);\n          });\n        } else {\n          for (let i = 0; i < paramLayers.length; i++) {\n            if ((layer.Name as string) === paramLayers[i]) layers.push([layer.Name, layer.Title] as TypeJsonArray);\n          }\n        }\n      };\n\n      if (wms.Capability.Layer) {\n        hasChildLayers(wms.Capability.Layer);\n      }\n\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      if ((err as Error).message === 'proj') {\n        emitErrorProj('WMS', proj, supportedProj);\n      } else {\n        emitErrorServer('WMS');\n      }\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WFS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wfsValidation = async (): Promise<boolean> => {\n    try {\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\n        (aFeatureType.Name['#text'] as string).split(':')[1] as TypeJsonObject,\n        aFeatureType.Title['#text'],\n      ]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('WFS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid OGC API. You can either provide a single\n   * layer URL or the root OGC API where the user can select any number of layers in the collection\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const ogcFeatureValidation = async (): Promise<boolean> => {\n    const keysSingleLayer = ['id', 'title'];\n    const responseSingle = await fetch(`${layerURL}/?f=json`);\n    if (responseSingle.status !== 200) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    const jsonSingle = await responseSingle.json();\n    const isSingleLayerValid = keysSingleLayer.every((key) => Object.keys(jsonSingle).includes(key));\n    if (isSingleLayerValid) {\n      setLayerEntries([\n        {\n          layerId: jsonSingle.id,\n        },\n      ] as TypeListOfLayerEntryConfig);\n      setLayerName(jsonSingle.title);\n      return true;\n    }\n\n    try {\n      const keys = ['collections', 'links'];\n      const responseCollection = await fetch(`${layerURL}/collections?f=json`);\n      const jsonCollection = await responseCollection.json();\n      const isCollectionValid = keys.every((key) => Object.keys(jsonCollection).includes(key));\n      if (!isCollectionValid) throw new Error('err');\n      const layers = (jsonCollection.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            layerId: layers[0][0] as string,\n          },\n        ] as TypeListOfLayerEntryConfig);\n      } else {\n        setLayerList(layers);\n      }\n    } catch (err) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid Geocore UUID.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geocoreValidation = (): boolean => {\n    try {\n      const isValid = layerURL.indexOf('/') === -1 && layerURL.replaceAll('-', '').length === 32;\n      if (!isValid) throw new Error('err');\n      setLayerName('');\n      setLayerEntries([\n        {\n          layerId: layerURL,\n        },\n      ] as TypeListOfLayerEntryConfig);\n    } catch (err) {\n      emitErrorServer('GeoCore UUID');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const esriValidation = async (type: string): Promise<boolean> => {\n    try {\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\n        if ('layers' in esri) {\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\n          if (layers.length === 1) {\n            setLayerName(layers[0][1] as string);\n            setLayerEntries([\n              {\n                layerId: layers[0][0] as string,\n              },\n            ] as TypeListOfLayerEntryConfig);\n          } else {\n            setLayerList(layers);\n          }\n        } else {\n          setLayerName(esri.name as string);\n          setLayerEntries([\n            {\n              layerId: esri.id as string,\n            },\n          ] as TypeListOfLayerEntryConfig);\n        }\n      } else {\n        throw new Error('err');\n      }\n    } catch (err) {\n      emitErrorServer(esriOptions(type).err);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\n   *\n   * @returns {boolean} True if layer passes validation\n   */\n  const xyzValidation = (): boolean => {\n    const tiles = ['{x}', '{y}', '{z}'];\n    for (let i = 0; i < tiles.length; i += 1) {\n      if (!layerURL.includes(tiles[i])) {\n        emitErrorServer('XYZ Tile');\n        return false;\n      }\n    }\n    const dataAccessPath = layerURL;\n    setLayerName('');\n    setLayerEntries([\n      {\n        layerId: layerURL,\n        source: {\n          dataAccessPath: {\n            en: dataAccessPath,\n            fr: dataAccessPath,\n          },\n        },\n      },\n    ] as TypeListOfLayerEntryConfig);\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoJSONValidation = async (): Promise<boolean> => {\n    try {\n      const response = await fetch(layerURL);\n      const json = await response.json();\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) {\n        throw new Error('err');\n      }\n      const layerId = layerURL.split('/').pop() as string;\n      const dataAccessPath = layerURL.replace(layerId, '');\n      if (!layerName) setLayerName(layerId);\n      setLayerEntries([\n        {\n          layerId,\n          source: {\n            dataAccessPath: {\n              en: dataAccessPath,\n              fr: dataAccessPath,\n            },\n          },\n        },\n      ] as TypeListOfLayerEntryConfig);\n    } catch (err) {\n      emitErrorServer('GeoJSON');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoPackage.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoPackageValidation = (): boolean => {\n    // TODO actual geopackage validation\n    const layerId = layerURL.split('/').pop() as string;\n    const dataAccessPath = layerURL.replace(layerId, '');\n    if (!layerName) setLayerName(layerId);\n    setLayerEntries([\n      {\n        layerId,\n        source: {\n          dataAccessPath: {\n            en: dataAccessPath,\n            fr: dataAccessPath,\n          },\n        },\n      },\n    ] as TypeListOfLayerEntryConfig);\n    return true;\n  };\n\n  /**\n   * Attempt to determine the layer type based on the URL format\n   */\n  const bestGuessLayerType = () => {\n    const layerTokens = displayURL.toUpperCase().split('/');\n    const layerId = parseInt(layerTokens[layerTokens.length - 1], 10);\n    if (displayURL.toUpperCase().endsWith('MAPSERVER') || displayURL.toUpperCase().endsWith('MAPSERVER/')) {\n      setLayerType(ESRI_DYNAMIC);\n    } else if (\n      displayURL.toUpperCase().indexOf('FEATURESERVER') !== -1 ||\n      (displayURL.toUpperCase().indexOf('MAPSERVER') !== -1 && !Number.isNaN(layerId))\n    ) {\n      setLayerType(ESRI_FEATURE);\n    } else if (layerTokens.indexOf('WFS') !== -1) {\n      setLayerType(WFS);\n    } else if (displayURL.toUpperCase().endsWith('.JSON') || displayURL.toUpperCase().endsWith('.GEOJSON')) {\n      setLayerType(GEOJSON);\n    } else if (displayURL.toUpperCase().endsWith('.GPKG')) {\n      setLayerType(GEOPACKAGE);\n    } else if (displayURL.toUpperCase().indexOf('{Z}/{X}/{Y}') !== -1 || displayURL.toUpperCase().indexOf('{Z}/{Y}/{X}') !== -1) {\n      setLayerType(XYZ_TILES);\n    } else if (displayURL.indexOf('/') === -1 && displayURL.replaceAll('-', '').length === 32) {\n      setLayerType(GEOCORE);\n    } else if (displayURL.toUpperCase().indexOf('WMS') !== -1) {\n      setLayerType(WMS);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep1 = () => {\n    let valid = true;\n    if (layerURL.trim() === '') {\n      valid = false;\n      emitErrorNone();\n    }\n    if (valid) {\n      bestGuessLayerType();\n      setActiveStep(1);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep2 = async () => {\n    setIsLoading(true);\n    let valid = true;\n    if (layerType === undefined) {\n      valid = false;\n      setIsLoading(false);\n      emitErrorEmpty(translations[displayLanguage].service);\n    } else if (layerType === WMS) valid = await wmsValidation();\n    else if (layerType === WFS) valid = await wfsValidation();\n    else if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\n    else if (layerType === GEOPACKAGE) valid = geoPackageValidation();\n    else if (layerType === GEOCORE) valid = geocoreValidation();\n    if (valid) {\n      setIsLoading(false);\n      setActiveStep(2);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStep3 = () => {\n    let valid = true;\n    if (layerEntries.length === 0) {\n      valid = false;\n      emitErrorEmpty(translations[displayLanguage].layer);\n    }\n    if (valid) setActiveStep(3);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStepLast = () => {\n    setIsLoading(true);\n    const geoviewLayerId = api.generateId();\n    api.event.on(\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\n      () => {\n        api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\n        setIsLoading(false);\n        setAddLayerVisible(false);\n      },\n      `${mapId}/${geoviewLayerId}`\n    );\n\n    let valid = true;\n    const name = layerName;\n    let url = layerURL;\n    if (layerType === ESRI_DYNAMIC || layerType === ESRI_FEATURE) {\n      url = api.geoUtilities.getMapServerUrl(layerURL);\n    }\n    if (layerType === WMS) {\n      [url] = layerURL.split('?');\n    }\n\n    if (layerName === '') {\n      valid = false;\n      emitErrorEmpty(isMultiple() ? translations[displayLanguage].layer : translations[displayLanguage].name);\n    }\n    const layerConfig: TypeGeoviewLayerConfig = {\n      geoviewLayerId,\n      geoviewLayerName: {\n        en: name,\n        fr: name,\n      },\n      geoviewLayerType: layerType as TypeGeoviewLayerType,\n      metadataAccessPath: {\n        en: url,\n        fr: url,\n      },\n      listOfLayerEntryConfig: layerEntries as TypeListOfLayerEntryConfig,\n    };\n\n    if (layerType === GEOJSON || layerType === XYZ_TILES || layerType === GEOPACKAGE) {\n      // TODO probably want an option to add metadata if geojson or geopackage\n      // need to clear our metadata path or it will give errors trying to find it\n      layerConfig.metadataAccessPath = {\n        en: '',\n        fr: '',\n      };\n    }\n    if (layerType === GEOCORE) {\n      delete layerConfig.metadataAccessPath;\n    }\n    if (layerType === OGC_FEATURE) {\n      // make sure the metadataAccessPath is the root OGC API URL\n      layerConfig.metadataAccessPath = {\n        en: api.geoUtilities.getOGCServerUrl(layerURL),\n        fr: api.geoUtilities.getOGCServerUrl(layerURL),\n      };\n    }\n    if (valid) {\n      // TODO issue #668 - geocore layers do not have same ID, it is impossible to use the added event\n      // workaround - close after 3 sec\n      if (layerType === GEOCORE) {\n        setTimeout(() => {\n          setIsLoading(false);\n          setAddLayerVisible(false);\n        }, 3000);\n      }\n\n      if (layerConfig.geoviewLayerId) {\n        api.maps[mapId].layer.layerOrder.push(layerConfig.geoviewLayerId);\n      } else if (layerConfig.listOfLayerEntryConfig !== undefined) {\n        layerConfig.listOfLayerEntryConfig.forEach((subLayer: TypeLayerEntryConfig) => {\n          if (subLayer.layerId) api.maps[mapId].layer.layerOrder.unshift(subLayer.layerId);\n        });\n      }\n\n      api.maps[mapId].layer.addGeoviewLayer(layerConfig);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Back' button in the Stepper UI\n   */\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  /**\n   * Set layer URL from file input\n   *\n   * @param {File} file uploaded file\n   */\n  const handleFile = (file: File) => {\n    const fileURL = URL.createObjectURL(file);\n    setDisplayURL(file.name);\n    setLayerURL(fileURL);\n    const fileName = file.name.split('.')[0];\n    setLayerType('');\n    setLayerList([]);\n    setLayerName(fileName);\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layer URL from form input\n   *\n   * @param e TextField event\n   */\n  const handleInput = (event: Event) => {\n    setDisplayURL(event.target.value.trim());\n    setLayerURL(event.target.value.trim());\n    setLayerType('');\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layerType from form input\n   *\n   * @param {SelectChangeEvent} event TextField event\n   */\n  const handleSelectType = (event: SelectChangeEvent<unknown>) => {\n    setLayerType(event.target.value as TypeGeoviewLayerType);\n    setLayerList([]);\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set the currently selected layer from a list\n   *\n   * @param event Select event\n   * @param newValue value/label pairs of select options\n   */\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\n    if (isMultiple()) {\n      setLayerEntries(\n        newValue.map((x: string) => {\n          return { layerId: `${x[0]}` };\n        }) as TypeListOfLayerEntryConfig\n      );\n      setLayerName(newValue.map((x) => x[1]).join(', '));\n    } else {\n      setLayerEntries([{ layerId: `${newValue[0]}` }] as TypeListOfLayerEntryConfig);\n      setLayerName(newValue[1]);\n    }\n  };\n\n  /**\n   * Set the layer name from form input\n   *\n   * @param e TextField event\n   */\n  const handleNameLayer = (event: Event) => {\n    setLayerName(event.target.value);\n  };\n\n  /**\n   * Handle file dragged into dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragEnter = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (event.target !== dragPopover.current) {\n      setDrag(true);\n    }\n  };\n\n  /**\n   * Handle file dragged out of dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (event.target === dragPopover.current) setDrag(false);\n  };\n\n  /**\n   * Prevent default behaviour when file dragged over dropzone\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  /**\n   * Handle file drop\n   *\n   * @param {DragEvent<HTMLDivElement>} event Drag event\n   */\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setDrag(false);\n    if (event.dataTransfer?.files) {\n      const file = event.dataTransfer.files[0];\n      const upFilename = file.name.toUpperCase();\n      if (upFilename.endsWith('.JSON') || upFilename.endsWith('.GEOJSON') || upFilename.endsWith('.GPKG')) {\n        handleFile(file);\n      } else {\n        emitErrorFile();\n      }\n    }\n  };\n\n  /**\n   * Creates a set of Continue / Back buttons\n   *\n   * @param param0 specify if button is first or last in the list\n   * @returns {JSX.Element} React component\n   */\n  // eslint-disable-next-line react/no-unstable-nested-components\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonPropsLayerPanel): JSX.Element {\n    return isLoading ? (\n      <Box sx={{ padding: 10 }}>\n        <CircularProgressBase />\n      </Box>\n    ) : (\n      <ButtonGroup sx={sxClasses.buttonGroup}>\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\n          {isLast ? translations[displayLanguage].finish : translations[displayLanguage].continue}\n        </Button>\n        {!isFirst && (\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\n            {translations[displayLanguage].back}\n          </Button>\n        )}\n      </ButtonGroup>\n    );\n  }\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', justifyContent: 'end', zIndex: 2 }}>\n        <IconButton color=\"primary\" onClick={() => setAddLayerVisible(false)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      <Stepper\n        sx={{ position: 'relative', top: '-30px', zIndex: 1 }}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n        steps={[\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepOne,\n            },\n            stepContent: {\n              children: (\n                <div\n                  className=\"dropzone\"\n                  style={{ position: 'relative' }}\n                  onDrop={(e) => handleDrop(e)}\n                  onDragOver={(e) => handleDragOver(e)}\n                  onDragEnter={(e) => handleDragEnter(e)}\n                  onDragLeave={(e) => handleDragLeave(e)}\n                >\n                  {drag && (\n                    <div\n                      ref={dragPopover}\n                      style={{\n                        backgroundColor: 'rgba(128,128,128,.95)',\n                        position: 'absolute',\n                        top: 0,\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        zIndex: 9999,\n                        textAlign: 'center',\n                        color: 'black',\n                        fontSize: 24,\n                      }}\n                    >\n                      <h3>\n                        <br />\n                        <br />\n                        {translations[displayLanguage].dropzone}\n                      </h3>\n                    </div>\n                  )}\n                  <div>\n                    <input\n                      type=\"file\"\n                      id=\"fileUpload\"\n                      style={{ display: 'none' }}\n                      onChange={(e) => {\n                        if (e.target.files) handleFile(e.target.files[0]);\n                      }}\n                      accept=\".gpkg, .json, .geojson\"\n                    />\n                  </div>\n                  <Button type=\"text\" onClick={() => document.getElementById('fileUpload')?.click()} className=\"\">\n                    <FileUploadIcon />\n                    <span>{translations[displayLanguage].upload}</span>\n                  </Button>\n                  <p style={{ textAlign: 'center' }}>\n                    <small>{translations[displayLanguage].drop}</small>\n                  </p>\n                  <p style={{ textAlign: 'center' }}>{translations[displayLanguage].or}</p>\n                  <TextField\n                    sx={{ width: '100%' }}\n                    label={translations[displayLanguage].url}\n                    variant=\"standard\"\n                    value={displayURL}\n                    onChange={handleInput}\n                    multiline\n                  />\n                  <br />\n                  <NavButtons isFirst handleNext={handleStep1} />\n                </div>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepTwo,\n            },\n            stepContent: {\n              children: (\n                <>\n                  <Select\n                    fullWidth\n                    labelId=\"service-type-label\"\n                    value={layerType}\n                    onChange={handleSelectType}\n                    label={translations[displayLanguage].service}\n                    inputLabel={{\n                      id: 'service-type-label',\n                    }}\n                    menuItems={layerOptions.map(([value, label]) => ({\n                      key: value,\n                      item: {\n                        value,\n                        children: label,\n                      },\n                    }))}\n                  />\n                  <NavButtons handleNext={handleStep2} />\n                </>\n              ),\n            },\n          },\n          {\n            stepLabel: {\n              children: translations[displayLanguage].stepThree,\n            },\n            stepContent: {\n              children: (\n                <>\n                  {layerList.length === 0 && (\n                    <TextField label={translations[displayLanguage].name} variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                  )}\n                  {layerList.length > 1 && (\n                    <Autocomplete\n                      fullWidth\n                      multiple={isMultiple()}\n                      disableClearable={!isMultiple()}\n                      id=\"service-layer-label\"\n                      options={layerList}\n                      getOptionLabel={(option) => `${option[1]} (${option[0]})`}\n                      renderOption={(props, option) => <span {...props}>{option[1] as string}</span>}\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                      onChange={handleSelectLayer as any}\n                      renderInput={(params) => <TextField {...params} label={translations[displayLanguage].layerSelect} />}\n                    />\n                  )}\n                  <br />\n                  <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\n                </>\n              ),\n            },\n          },\n          isMultiple()\n            ? {\n                stepLabel: {\n                  children: translations[displayLanguage].stepFour,\n                },\n                stepContent: {\n                  children: (\n                    <>\n                      <TextField\n                        sx={{ width: '100%' }}\n                        label={translations[displayLanguage].name}\n                        variant=\"standard\"\n                        value={layerName}\n                        onChange={handleNameLayer}\n                      />\n                      <br />\n                      <NavButtons isLast handleNext={handleStepLast} />\n                    </>\n                  ),\n                },\n              }\n            : null,\n        ]}\n      />\n    </>\n  );\n}\n\nexport default LayerStepper;\n","/* eslint-disable react/require-default-props */\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\n\ninterface Props {\n  mapId: string;\n  title: string;\n  layerIds: string[];\n  setReorderLayersVisible: (isVisible: boolean) => void;\n  setMapLayers: (reorderedLayerIds: string[]) => void;\n}\n\n/**\n * A react component that displays the reorderable layers list\n *\n * @returns {JSX.Element} A React JSX Element with the reorderable layers list\n */\nfunction ReorderLayersList({ mapId, title, layerIds, setReorderLayersVisible, setMapLayers }: Props): JSX.Element {\n  const { cgpv } = window;\n  const { api, ui } = cgpv;\n\n  const { List, ListItem, ListItemButton, ListItemIcon, HandleIcon, ListItemText, Box, IconButton, CloseIcon } = ui.elements;\n\n  const { displayLanguage } = api.maps[mapId!];\n\n  const sxClasses = {\n    titleBar: {\n      position: 'relative',\n      top: '-30px',\n      zIndex: 1,\n    },\n    draggableList: {\n      top: '-30px',\n    },\n    regularListItem: {\n      color: 'text.primary',\n      padding: 0,\n    },\n    draggingListItem: {\n      color: 'text.primary',\n      padding: 0,\n      background: 'rgb(235,235,235,0.5)',\n    },\n    listItemText: {\n      fontSize: 14,\n      noWrap: true,\n    },\n    handleIcon: {\n      margin: '8px 0px',\n    },\n  };\n\n  const onDragEnd = ({ destination, source }: DropResult) => {\n    if (!destination) return; // dropped outside the list\n    const reorderedLayerIds = [...layerIds];\n    const [removed] = reorderedLayerIds.splice(source.index, 1);\n    reorderedLayerIds.splice(destination.index, 0, removed);\n    api.maps[mapId].layer.moveLayer(removed, destination.index);\n    setMapLayers(reorderedLayerIds);\n  };\n\n  const getLayerName = (layerId: string) => {\n    return api.maps[mapId].layer.geoviewLayers[layerId].geoviewLayerName[displayLanguage];\n  };\n\n  return (\n    <>\n      <Box sx={{ display: 'flex', justifyContent: 'end', zIndex: 2 }}>\n        <IconButton color=\"primary\" onClick={() => setReorderLayersVisible(false)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      <Box sx={sxClasses.titleBar}>{title}</Box>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided) => (\n            <List sx={sxClasses.draggableList} {...provided.droppableProps} innerref={provided.innerRef}>\n              {layerIds.map((layerId, index) => (\n                <Draggable key={layerId} draggableId={layerId} index={index}>\n                  {(providedDrag, snapshotDrag) => (\n                    <ListItem\n                      innerref={providedDrag.innerRef}\n                      sx={snapshotDrag.isDragging ? sxClasses.draggingListItem : sxClasses.regularListItem}\n                      {...providedDrag.draggableProps}\n                      {...providedDrag.dragHandleProps}\n                    >\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <HandleIcon sx={sxClasses.handleIcon} />\n                        </ListItemIcon>\n                        <ListItemText primaryTypographyProps={sxClasses.listItemText} primary={getLayerName(layerId)} />\n                      </ListItemButton>\n                    </ListItem>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </List>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default ReorderLayersList;\n","import type React from 'react';\nimport { toJsonObject, TypeJsonObject, TypeButtonPanel } from 'geoview-core';\n\nimport LayerStepper from './layer-stepper';\nimport ReorderLayersList from './reorder-layers-list';\n\ntype TypePanelContentProps = {\n  buttonPanel: TypeButtonPanel;\n  mapId: string;\n};\n\n/**\n * A react component that displays the details panel content\n *\n * @param {TypePanelContentProps} props the properties of the pane content\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\n  const { mapId, buttonPanel } = props;\n\n  const { cgpv } = window;\n  const { api, ui, react } = cgpv;\n  const { useState, useEffect } = react;\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\n  const [reorderLayersVisible, setReorderLayersVisible] = useState(false);\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [legend, setLegend] = useState<React.DetailedReactHTMLElement<{}, HTMLElement>>();\n  const [actionMenuAnchorElement, setActionMenuAnchorElement] = useState<null | HTMLElement>(null);\n  const [isExpandAll, setExpandAll] = useState<boolean>(false);\n  const [isHideAll, setHideAll] = useState<boolean>(false);\n  const {\n    IconButton,\n    AddIcon,\n    Box,\n    ExpandMoreIcon,\n    ExpandLessIcon,\n    VisibilityIcon,\n    VisibilityOffIcon,\n    Menu,\n    MenuItem,\n    MenuIcon,\n    ListItemIcon,\n    ListItemText,\n    ReorderIcon,\n  } = ui.elements;\n\n  const displayLanguage = api.maps[mapId].getDisplayLanguage();\n\n  const translations: TypeJsonObject = toJsonObject({\n    en: {\n      addLayer: 'Add Layer',\n      expandAll: 'Expand Groups',\n      collapseAll: 'Collapse Groups',\n      showAll: 'Show All',\n      hideAll: 'Hide All',\n      reorderLayers: 'Reorder Layers',\n    },\n    fr: {\n      addLayer: 'Ajouter Couche',\n      expandAll: 'Élargir les groupes',\n      collapseAll: 'Réduire les groupes',\n      showAll: 'Montrer tout',\n      hideAll: 'Cacher tout',\n      reorderLayers: 'Réorganiser les couches',\n    },\n  });\n\n  const sxClasses = {\n    mainContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'inherit',\n    },\n    topControls: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    addLayerSection: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 'auto',\n      justifyContent: 'end',\n    },\n  };\n\n  const actionMenuOpen = Boolean(actionMenuAnchorElement);\n\n  const updateLayers = () => {\n    if (api.maps[mapId].layer?.layerOrder !== undefined) setMapLayers([...api.maps[mapId].layer.layerOrder].reverse());\n  };\n\n  useEffect(() => {\n    api.event.on(api.eventNames.MAP.EVENT_MAP_LOADED, updateLayers, mapId);\n    api.event.on(api.eventNames.GET_LEGENDS.LEGENDS_LAYERSET_UPDATED, updateLayers, `${mapId}/LegendsLayerSet`);\n\n    return () => {\n      api.event.off(api.eventNames.MAP.EVENT_MAP_LOADED, mapId, updateLayers);\n      api.event.off(api.eventNames.GET_LEGENDS.LEGENDS_LAYERSET_UPDATED, mapId, updateLayers);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLegend(api.maps[mapId!].legend.createLegend({ layerIds: mapLayers, isRemoveable: true, canSetOpacity: true, canZoomTo: true }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mapLayers]);\n\n  useEffect(() => {\n    const setAddLayerVisibleListenerFunction = () => setAddLayerVisible(false);\n\n    api.event.on(api.eventNames.PANEL.EVENT_PANEL_CLOSE, setAddLayerVisibleListenerFunction, `${mapId}/${buttonPanel.buttonPanelId}`);\n    return () => {\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, `${mapId}/${buttonPanel.buttonPanelId}`, setAddLayerVisibleListenerFunction);\n    };\n  }, [api, buttonPanel.buttonPanelId, mapId]);\n\n  useEffect(() => {\n    setLegend(\n      api.maps[mapId!].legend.createLegend({\n        layerIds: mapLayers,\n        isRemoveable: true,\n        canSetOpacity: true,\n        expandAll: isExpandAll,\n        canZoomTo: true,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isExpandAll]);\n\n  useEffect(() => {\n    setLegend(\n      api.maps[mapId!].legend.createLegend({\n        layerIds: mapLayers,\n        isRemoveable: true,\n        canSetOpacity: true,\n        hideAll: isHideAll,\n        canZoomTo: true,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isHideAll]);\n\n  const handleShowAddLayer = () => {\n    setAddLayerVisible((state: boolean) => !state);\n  };\n\n  const handleExpandMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    setActionMenuAnchorElement(event.currentTarget);\n  };\n  const handleCloseMenu = () => {\n    setActionMenuAnchorElement(null);\n  };\n\n  const handleExpandAllClick = (isExpand: boolean) => {\n    setExpandAll(isExpand);\n    handleCloseMenu();\n  };\n\n  const handleShowAllClick = (isShow: boolean) => {\n    setHideAll(!isShow);\n    handleCloseMenu();\n  };\n\n  const handleReorderLayersClick = (isReorder: boolean) => {\n    setReorderLayersVisible(isReorder);\n    handleCloseMenu();\n  };\n\n  useEffect(() => {\n    // this will disable all scrolling when the user is trying to reorder layers\n    // TODO see issue #754 and atlassian/react-beautiful-dnd#460 - there may be a more elegant solution eventually if supported from the react-beautiful-dnd library\n    if (reorderLayersVisible) {\n      const x = window.scrollX;\n      const y = window.scrollY;\n      window.onscroll = () => {\n        window.scrollTo(x, y);\n      };\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      window.onscroll = () => {};\n    }\n  }, [reorderLayersVisible]);\n\n  return (\n    <>\n      <Menu anchorEl={actionMenuAnchorElement} open={actionMenuOpen} onClose={handleCloseMenu}>\n        <MenuItem onClick={() => handleExpandAllClick(true)}>\n          <ListItemIcon>\n            <ExpandMoreIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].expandAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleExpandAllClick(false)}>\n          <ListItemIcon>\n            <ExpandLessIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].collapseAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(true)}>\n          <ListItemIcon>\n            <VisibilityIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].showAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleShowAllClick(false)}>\n          <ListItemIcon>\n            <VisibilityOffIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].hideAll as string}</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleReorderLayersClick(true)}>\n          <ListItemIcon>\n            <ReorderIcon />\n          </ListItemIcon>\n          <ListItemText>{translations[displayLanguage].reorderLayers as string}</ListItemText>\n        </MenuItem>\n      </Menu>\n      <Box sx={sxClasses.mainContainer}>\n        {addLayerVisible && <LayerStepper mapId={mapId!} setAddLayerVisible={setAddLayerVisible} />}\n        {reorderLayersVisible && (\n          <ReorderLayersList\n            mapId={mapId!}\n            title={translations[displayLanguage].reorderLayers as string}\n            layerIds={mapLayers}\n            setMapLayers={setMapLayers}\n            setReorderLayersVisible={setReorderLayersVisible}\n          />\n        )}\n        <Box sx={sxClasses.topControls} style={{ display: addLayerVisible || reorderLayersVisible ? 'none' : 'flex' }}>\n          <div>\n            <IconButton color=\"primary\" onClick={handleExpandMenuClick}>\n              <MenuIcon />\n            </IconButton>\n          </div>\n          <Box onClick={handleShowAddLayer}>\n            {translations[displayLanguage].addLayer as string}\n            <IconButton>\n              <AddIcon />\n            </IconButton>\n          </Box>\n        </Box>\n        <div style={{ display: addLayerVisible || reorderLayersVisible ? 'none' : 'block' }}>{legend}</div>\n      </Box>\n    </>\n  );\n}\n\nexport default PanelContent;\n","import { Cast, toJsonObject, TypeJsonObject, TypeIconButtonProps, TypePanelProps, AnySchemaObject } from 'geoview-core';\nimport { AppBarPlugin } from 'geoview-core/src/api/plugin/appbar-plugin';\nimport { LayersOutlinedIcon } from 'geoview-core/src/ui';\nimport PanelContent from './panel-content';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-layers-panel.json';\n\n/**\n * Create a class for the plugin instance\n */\nclass LayersPanelPlugin extends AppBarPlugin {\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {AnySchemaObject} returns the schema for this package\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations: TypeJsonObject = toJsonObject({\n    en: {\n      layersPanel: { title: 'Layers' },\n    },\n    fr: {\n      layersPanel: { title: 'Couches' },\n    },\n  });\n\n  onCreateButtonProps(): TypeIconButtonProps {\n    // Button props\n    return {\n      id: 'layersPanelButton',\n      tooltip: 'layersPanel.title',\n      tooltipPlacement: 'right',\n      children: <LayersOutlinedIcon />,\n      visible: true,\n    };\n  }\n\n  onCreateContentProps(): TypePanelProps {\n    // Panel props\n    return {\n      title: 'layersPanel.title',\n      icon: <LayersOutlinedIcon />,\n      width: 350,\n      status: this.configObj?.isOpen?.large as boolean,\n    };\n  }\n\n  onCreateContent(): JSX.Element {\n    return <PanelContent buttonPanel={this.buttonPanel} mapId={this.pluginProps.mapId} />;\n  }\n}\n\nexport default LayersPanelPlugin;\n\nwindow.plugins = window.plugins || {};\nwindow.plugins['layers-panel'] = Cast<LayersPanelPlugin>(LayersPanelPlugin);\n"],"names":["AppBarPlugin","_AbstractPlugin","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","value","MapIcon","window","cgpv","ui","elements","id","tooltip","tooltipPlacement","children","this","react","createElement","visible","_this$configObj","title","icon","width","status","configObj","isOpen","undefined","pluginProps","mapId","_this$map","_this$buttonPanel","buttonProps","onCreateButtonProps","panelProps","onCreateContentProps","buttonPanel","map","appBarButtons","createAppbarPanel","content","onCreateContent","panel","changeContent","_this$map2","api","removeAppbarPanel","buttonPanelId","AbstractPlugin","_ref","setAddLayerVisible","displayLanguage","maps","getDisplayLanguage","_api$layerTypes","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","GEOPACKAGE","WMS","WFS","OGC_FEATURE","XYZ_TILES","GEOCORE","useState","useEffect","useRef","_ui$elements","Select","Stepper","TextField","Button","ButtonGroup","Autocomplete","CircularProgressBase","Box","IconButton","CloseIcon","FileUploadIcon","_useState","_useState2","_slicedToArray","activeStep","setActiveStep","_useState3","_useState4","layerURL","setLayerURL","_useState5","_useState6","displayURL","setDisplayURL","_useState7","_useState8","layerType","setLayerType","_useState9","_useState10","layerList","setLayerList","_useState11","_useState12","layerName","setLayerName","_useState13","_useState14","layerEntries","setLayerEntries","_useState15","_useState16","isLoading","setIsLoading","_useState17","_useState18","drag","setDrag","dragPopover","sxClasses","buttonGroup","paddingTop","gap","isMultiple","layerOptions","translations","en","finish","continue","back","or","dropzone","upload","drop","url","layer","stepOne","stepTwo","stepThree","stepFour","service","name","layerSelect","errorEmpty","errorNone","errorFile","errorServer","errorProj","only","fr","snackbarEventOpenListenerFunction","payload","payloadIsASnackbarMessage","message","event","on","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","off","esriOptions","type","err","capability","emitErrorEmpty","textField","utilities","showError","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_urlParams$get","_layerURL$split","_layerURL$split2","baseUrl","queryString","urlParams","paramLayers","wms","layers","hasChildLayers","_context","prev","next","projection","projections","getMapState","currentProjection","getCode","split","URLSearchParams","get","geoUtilities","getWMSServiceMetadata","sent","Capability","Layer","CRS","includes","Error","forEach","childLayer","i","Name","push","Title","layerId","t0","abrupt","stop","wfsValidation","_ref3","_callee2","wfs","_layers","_context2","getWFSServiceMetadata","FeatureTypeList","FeatureType","aFeatureType","ogcFeatureValidation","_ref4","_callee3","keysSingleLayer","responseSingle","jsonSingle","keys","responseCollection","jsonCollection","_layers2","_context3","fetch","json","every","Object","collections","geocoreValidation","indexOf","replaceAll","esriValidation","_ref5","_callee4","esri","_layers3","_context4","getESRIServiceMetadata","capabilities","aLayer","_x","xyzValidation","tiles","dataAccessPath","source","geoJSONValidation","_ref6","_callee5","response","_context5","pop","replace","handleStep2","_ref7","_callee6","valid","_context6","handleStepLast","geoviewLayerId","generateId","LAYER","EVENT_LAYER_ADDED","getMapServerUrl","_layerURL$split3","layerConfig","geoviewLayerName","geoviewLayerType","metadataAccessPath","listOfLayerEntryConfig","getOGCServerUrl","setTimeout","layerOrder","subLayer","unshift","addGeoviewLayer","handleBack","prevActiveStep","handleFile","file","fileURL","URL","createObjectURL","fileName","handleNameLayer","target","handleDrop","_event$dataTransfer","preventDefault","stopPropagation","dataTransfer","files","upFilename","toUpperCase","endsWith","NavButtons","_ref8","_ref8$isFirst","isFirst","_ref8$isLast","isLast","handleNext","_jsx","sx","padding","_jsxs","variant","onClick","_Fragment","display","justifyContent","zIndex","color","position","top","orientation","steps","stepLabel","stepContent","className","style","onDrop","e","onDragOver","onDragEnter","current","onDragLeave","ref","backgroundColor","bottom","left","right","textAlign","fontSize","onChange","accept","_document$getElementB","document","getElementById","click","label","trim","multiline","layerTokens","parseInt","Number","isNaN","fullWidth","labelId","inputLabel","menuItems","_ref9","_ref10","item","multiple","disableClearable","options","getOptionLabel","option","renderOption","props","_objectSpread","newValue","x","renderInput","params","layerIds","setReorderLayersVisible","setMapLayers","List","ListItem","ListItemButton","ListItemIcon","HandleIcon","ListItemText","titleBar","draggableList","regularListItem","draggingListItem","background","listItemText","noWrap","handleIcon","margin","getLayerName","geoviewLayers","DragDropContext","onDragEnd","destination","reorderedLayerIds","_toConsumableArray","_reorderedLayerIds$sp","splice","index","removed","moveLayer","Droppable","droppableId","provided","droppableProps","innerref","innerRef","Draggable","draggableId","providedDrag","snapshotDrag","isDragging","draggableProps","dragHandleProps","primaryTypographyProps","primary","placeholder","addLayerVisible","reorderLayersVisible","mapLayers","legend","setLegend","actionMenuAnchorElement","setActionMenuAnchorElement","isExpandAll","setExpandAll","isHideAll","setHideAll","AddIcon","ExpandMoreIcon","ExpandLessIcon","VisibilityIcon","VisibilityOffIcon","Menu","MenuItem","MenuIcon","ReorderIcon","toJsonObject","addLayer","expandAll","collapseAll","showAll","hideAll","reorderLayers","mainContainer","flexDirection","height","topControls","addLayerSection","alignItems","marginTop","actionMenuOpen","Boolean","updateLayers","_api$maps$mapId$layer","reverse","MAP","EVENT_MAP_LOADED","GET_LEGENDS","LEGENDS_LAYERSET_UPDATED","createLegend","isRemoveable","canSetOpacity","canZoomTo","setAddLayerVisibleListenerFunction","PANEL","EVENT_PANEL_CLOSE","handleCloseMenu","handleExpandAllClick","isExpand","handleShowAllClick","isShow","scrollX","y","scrollY","onscroll","scrollTo","anchorEl","open","onClose","LayerStepper","ReorderLayersList","currentTarget","state","LayersPanelPlugin","_AppBarPlugin","schema","defaultConfig","layersPanel","LayersOutlinedIcon","large","PanelContent","plugins","Cast"],"sourceRoot":""}